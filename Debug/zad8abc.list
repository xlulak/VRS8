
zad8abc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f64  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  080050f0  080050f0  000150f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052b4  080052b4  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080052b4  080052b4  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080052b4  080052b4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052b4  080052b4  000152b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052b8  080052b8  000152b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080052bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000068  08005324  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  08005324  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009665  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c91  00000000  00000000  000296fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000970  00000000  00000000  0002b390  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000878  00000000  00000000  0002bd00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001894d  00000000  00000000  0002c578  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006bd9  00000000  00000000  00044ec5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000848f5  00000000  00000000  0004ba9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d0393  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f0c  00000000  00000000  000d0410  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080050d4 	.word	0x080050d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	080050d4 	.word	0x080050d4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <LL_ADC_REG_SetSequencerLength>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f023 020f 	bic.w	r2, r3, #15
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	431a      	orrs	r2, r3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b083      	sub	sp, #12
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	689b      	ldr	r3, [r3, #8]
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	bf0c      	ite	eq
 8000b0e:	2301      	moveq	r3, #1
 8000b10:	2300      	movne	r3, #0
 8000b12:	b2db      	uxtb	r3, r3
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8000b20:	b590      	push	{r4, r7, lr}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 8000b2e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000b32:	f7ff ffe2 	bl	8000afa <LL_ADC_IsEnabled>
 8000b36:	4604      	mov	r4, r0
 8000b38:	4817      	ldr	r0, [pc, #92]	; (8000b98 <LL_ADC_CommonInit+0x78>)
 8000b3a:	f7ff ffde 	bl	8000afa <LL_ADC_IsEnabled>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	4323      	orrs	r3, r4
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d120      	bne.n	8000b88 <LL_ADC_CommonInit+0x68>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d012      	beq.n	8000b74 <LL_ADC_CommonInit+0x54>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	689a      	ldr	r2, [r3, #8]
 8000b52:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <LL_ADC_CommonInit+0x7c>)
 8000b54:	4013      	ands	r3, r2
 8000b56:	683a      	ldr	r2, [r7, #0]
 8000b58:	6811      	ldr	r1, [r2, #0]
 8000b5a:	683a      	ldr	r2, [r7, #0]
 8000b5c:	6852      	ldr	r2, [r2, #4]
 8000b5e:	4311      	orrs	r1, r2
 8000b60:	683a      	ldr	r2, [r7, #0]
 8000b62:	6892      	ldr	r2, [r2, #8]
 8000b64:	4311      	orrs	r1, r2
 8000b66:	683a      	ldr	r2, [r7, #0]
 8000b68:	68d2      	ldr	r2, [r2, #12]
 8000b6a:	430a      	orrs	r2, r1
 8000b6c:	431a      	orrs	r2, r3
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	e00b      	b.n	8000b8c <LL_ADC_CommonInit+0x6c>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	689a      	ldr	r2, [r3, #8]
 8000b78:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <LL_ADC_CommonInit+0x7c>)
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	683a      	ldr	r2, [r7, #0]
 8000b7e:	6812      	ldr	r2, [r2, #0]
 8000b80:	431a      	orrs	r2, r3
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	609a      	str	r2, [r3, #8]
 8000b86:	e001      	b.n	8000b8c <LL_ADC_CommonInit+0x6c>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8000b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3714      	adds	r7, #20
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd90      	pop	{r4, r7, pc}
 8000b96:	bf00      	nop
 8000b98:	50000100 	.word	0x50000100
 8000b9c:	fffc30e0 	.word	0xfffc30e0

08000ba0 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8000baa:	2300      	movs	r3, #0
 8000bac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f7ff ffa3 	bl	8000afa <LL_ADC_IsEnabled>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d111      	bne.n	8000bde <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	68db      	ldr	r3, [r3, #12]
 8000bbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000bc2:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8000bc6:	683a      	ldr	r2, [r7, #0]
 8000bc8:	6811      	ldr	r1, [r2, #0]
 8000bca:	683a      	ldr	r2, [r7, #0]
 8000bcc:	6852      	ldr	r2, [r2, #4]
 8000bce:	4311      	orrs	r1, r2
 8000bd0:	683a      	ldr	r2, [r7, #0]
 8000bd2:	6892      	ldr	r2, [r2, #8]
 8000bd4:	430a      	orrs	r2, r1
 8000bd6:	431a      	orrs	r2, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	60da      	str	r2, [r3, #12]
 8000bdc:	e001      	b.n	8000be2 <LL_ADC_Init+0x42>
    
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8000be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f7ff ff7d 	bl	8000afa <LL_ADC_IsEnabled>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d132      	bne.n	8000c6c <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d015      	beq.n	8000c3a <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	68da      	ldr	r2, [r3, #12]
 8000c12:	4b1a      	ldr	r3, [pc, #104]	; (8000c7c <LL_ADC_REG_Init+0x90>)
 8000c14:	4013      	ands	r3, r2
 8000c16:	683a      	ldr	r2, [r7, #0]
 8000c18:	6811      	ldr	r1, [r2, #0]
 8000c1a:	683a      	ldr	r2, [r7, #0]
 8000c1c:	6892      	ldr	r2, [r2, #8]
 8000c1e:	4311      	orrs	r1, r2
 8000c20:	683a      	ldr	r2, [r7, #0]
 8000c22:	68d2      	ldr	r2, [r2, #12]
 8000c24:	4311      	orrs	r1, r2
 8000c26:	683a      	ldr	r2, [r7, #0]
 8000c28:	6912      	ldr	r2, [r2, #16]
 8000c2a:	4311      	orrs	r1, r2
 8000c2c:	683a      	ldr	r2, [r7, #0]
 8000c2e:	6952      	ldr	r2, [r2, #20]
 8000c30:	430a      	orrs	r2, r1
 8000c32:	431a      	orrs	r2, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	60da      	str	r2, [r3, #12]
 8000c38:	e011      	b.n	8000c5e <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	68da      	ldr	r2, [r3, #12]
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <LL_ADC_REG_Init+0x90>)
 8000c40:	4013      	ands	r3, r2
 8000c42:	683a      	ldr	r2, [r7, #0]
 8000c44:	6811      	ldr	r1, [r2, #0]
 8000c46:	683a      	ldr	r2, [r7, #0]
 8000c48:	68d2      	ldr	r2, [r2, #12]
 8000c4a:	4311      	orrs	r1, r2
 8000c4c:	683a      	ldr	r2, [r7, #0]
 8000c4e:	6912      	ldr	r2, [r2, #16]
 8000c50:	4311      	orrs	r1, r2
 8000c52:	683a      	ldr	r2, [r7, #0]
 8000c54:	6952      	ldr	r2, [r2, #20]
 8000c56:	430a      	orrs	r2, r1
 8000c58:	431a      	orrs	r2, r3
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }
    
    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	4619      	mov	r1, r3
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	f7ff ff35 	bl	8000ad4 <LL_ADC_REG_SetSequencerLength>
 8000c6a:	e001      	b.n	8000c70 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8000c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	fff0c03c 	.word	0xfff0c03c

08000c80 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b089      	sub	sp, #36	; 0x24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	fa93 f3a3 	rbit	r3, r3
 8000c9a:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	fab3 f383 	clz	r3, r3
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	2103      	movs	r1, #3
 8000ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8000caa:	43db      	mvns	r3, r3
 8000cac:	401a      	ands	r2, r3
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	fa93 f3a3 	rbit	r3, r3
 8000cb8:	61bb      	str	r3, [r7, #24]
  return(result);
 8000cba:	69bb      	ldr	r3, [r7, #24]
 8000cbc:	fab3 f383 	clz	r3, r3
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	6879      	ldr	r1, [r7, #4]
 8000cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	601a      	str	r2, [r3, #0]
}
 8000cce:	bf00      	nop
 8000cd0:	3724      	adds	r7, #36	; 0x24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	b085      	sub	sp, #20
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	60f8      	str	r0, [r7, #12]
 8000ce2:	60b9      	str	r1, [r7, #8]
 8000ce4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	685a      	ldr	r2, [r3, #4]
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	43db      	mvns	r3, r3
 8000cee:	401a      	ands	r2, r3
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	6879      	ldr	r1, [r7, #4]
 8000cf4:	fb01 f303 	mul.w	r3, r1, r3
 8000cf8:	431a      	orrs	r2, r3
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	605a      	str	r2, [r3, #4]
}
 8000cfe:	bf00      	nop
 8000d00:	3714      	adds	r7, #20
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	b089      	sub	sp, #36	; 0x24
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	60f8      	str	r0, [r7, #12]
 8000d12:	60b9      	str	r1, [r7, #8]
 8000d14:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	689a      	ldr	r2, [r3, #8]
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	fa93 f3a3 	rbit	r3, r3
 8000d24:	613b      	str	r3, [r7, #16]
  return(result);
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	fab3 f383 	clz	r3, r3
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	2103      	movs	r1, #3
 8000d30:	fa01 f303 	lsl.w	r3, r1, r3
 8000d34:	43db      	mvns	r3, r3
 8000d36:	401a      	ands	r2, r3
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	fa93 f3a3 	rbit	r3, r3
 8000d42:	61bb      	str	r3, [r7, #24]
  return(result);
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	fab3 f383 	clz	r3, r3
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	6879      	ldr	r1, [r7, #4]
 8000d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d52:	431a      	orrs	r2, r3
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8000d58:	bf00      	nop
 8000d5a:	3724      	adds	r7, #36	; 0x24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b089      	sub	sp, #36	; 0x24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	68da      	ldr	r2, [r3, #12]
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	fa93 f3a3 	rbit	r3, r3
 8000d7e:	613b      	str	r3, [r7, #16]
  return(result);
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	fab3 f383 	clz	r3, r3
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	2103      	movs	r1, #3
 8000d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	401a      	ands	r2, r3
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	fa93 f3a3 	rbit	r3, r3
 8000d9c:	61bb      	str	r3, [r7, #24]
  return(result);
 8000d9e:	69bb      	ldr	r3, [r7, #24]
 8000da0:	fab3 f383 	clz	r3, r3
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	6879      	ldr	r1, [r7, #4]
 8000da8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dac:	431a      	orrs	r2, r3
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	60da      	str	r2, [r3, #12]
}
 8000db2:	bf00      	nop
 8000db4:	3724      	adds	r7, #36	; 0x24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	b089      	sub	sp, #36	; 0x24
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	60f8      	str	r0, [r7, #12]
 8000dc6:	60b9      	str	r1, [r7, #8]
 8000dc8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	6a1a      	ldr	r2, [r3, #32]
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	fa93 f3a3 	rbit	r3, r3
 8000dd8:	613b      	str	r3, [r7, #16]
  return(result);
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	fab3 f383 	clz	r3, r3
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	210f      	movs	r1, #15
 8000de4:	fa01 f303 	lsl.w	r3, r1, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	401a      	ands	r2, r3
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	fa93 f3a3 	rbit	r3, r3
 8000df6:	61bb      	str	r3, [r7, #24]
  return(result);
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	fab3 f383 	clz	r3, r3
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	6879      	ldr	r1, [r7, #4]
 8000e02:	fa01 f303 	lsl.w	r3, r1, r3
 8000e06:	431a      	orrs	r2, r3
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8000e0c:	bf00      	nop
 8000e0e:	3724      	adds	r7, #36	; 0x24
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b089      	sub	sp, #36	; 0x24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	0a1b      	lsrs	r3, r3, #8
 8000e2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	fa93 f3a3 	rbit	r3, r3
 8000e34:	613b      	str	r3, [r7, #16]
  return(result);
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	fab3 f383 	clz	r3, r3
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	210f      	movs	r1, #15
 8000e40:	fa01 f303 	lsl.w	r3, r1, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	401a      	ands	r2, r3
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	0a1b      	lsrs	r3, r3, #8
 8000e4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	fa93 f3a3 	rbit	r3, r3
 8000e54:	61bb      	str	r3, [r7, #24]
  return(result);
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	fab3 f383 	clz	r3, r3
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	6879      	ldr	r1, [r7, #4]
 8000e60:	fa01 f303 	lsl.w	r3, r1, r3
 8000e64:	431a      	orrs	r2, r3
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8000e6a:	bf00      	nop
 8000e6c:	3724      	adds	r7, #36	; 0x24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b088      	sub	sp, #32
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
 8000e7e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8000e84:	2300      	movs	r3, #0
 8000e86:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	fa93 f3a3 	rbit	r3, r3
 8000e94:	613b      	str	r3, [r7, #16]
  return(result);
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	fab3 f383 	clz	r3, r3
 8000e9c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000e9e:	e048      	b.n	8000f32 <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8000eac:	4013      	ands	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d03a      	beq.n	8000f2c <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	461a      	mov	r2, r3
 8000ebc:	69b9      	ldr	r1, [r7, #24]
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f7ff fede 	bl	8000c80 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d003      	beq.n	8000ed4 <LL_GPIO_Init+0x5e>
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d106      	bne.n	8000ee2 <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	69b9      	ldr	r1, [r7, #24]
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f7ff ff14 	bl	8000d0a <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	691b      	ldr	r3, [r3, #16]
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	69b9      	ldr	r1, [r7, #24]
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f7ff ff3a 	bl	8000d64 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d119      	bne.n	8000f2c <LL_GPIO_Init+0xb6>
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	fa93 f3a3 	rbit	r3, r3
 8000f02:	60bb      	str	r3, [r7, #8]
  return(result);
 8000f04:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8000f06:	fab3 f383 	clz	r3, r3
 8000f0a:	2b07      	cmp	r3, #7
 8000f0c:	d807      	bhi.n	8000f1e <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	695b      	ldr	r3, [r3, #20]
 8000f12:	461a      	mov	r2, r3
 8000f14:	69b9      	ldr	r1, [r7, #24]
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff ff51 	bl	8000dbe <LL_GPIO_SetAFPin_0_7>
 8000f1c:	e006      	b.n	8000f2c <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	695b      	ldr	r3, [r3, #20]
 8000f22:	461a      	mov	r2, r3
 8000f24:	69b9      	ldr	r1, [r7, #24]
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff ff76 	bl	8000e18 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	fa22 f303 	lsr.w	r3, r2, r3
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d1af      	bne.n	8000ea0 <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d003      	beq.n	8000f50 <LL_GPIO_Init+0xda>
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d107      	bne.n	8000f60 <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	6819      	ldr	r1, [r3, #0]
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff febd 	bl	8000cda <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3720      	adds	r7, #32
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <LL_RCC_HSI_IsReady+0x20>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f003 0302 	and.w	r3, r3, #2
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	bf0c      	ite	eq
 8000f7c:	2301      	moveq	r3, #1
 8000f7e:	2300      	movne	r3, #0
 8000f80:	b2db      	uxtb	r3, r3
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	40021000 	.word	0x40021000

08000f90 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <LL_RCC_LSE_IsReady+0x20>)
 8000f96:	6a1b      	ldr	r3, [r3, #32]
 8000f98:	f003 0302 	and.w	r3, r3, #2
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	bf0c      	ite	eq
 8000fa0:	2301      	moveq	r3, #1
 8000fa2:	2300      	movne	r3, #0
 8000fa4:	b2db      	uxtb	r3, r3
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	40021000 	.word	0x40021000

08000fb4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000fb8:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <LL_RCC_GetSysClkSource+0x18>)
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f003 030c 	and.w	r3, r3, #12
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	40021000 	.word	0x40021000

08000fd0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000fd4:	4b04      	ldr	r3, [pc, #16]	; (8000fe8 <LL_RCC_GetAHBPrescaler+0x18>)
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	40021000 	.word	0x40021000

08000fec <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8000ff0:	4b04      	ldr	r3, [pc, #16]	; (8001004 <LL_RCC_GetAPB1Prescaler+0x18>)
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	40021000 	.word	0x40021000

08001008 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800100c:	4b04      	ldr	r3, [pc, #16]	; (8001020 <LL_RCC_GetAPB2Prescaler+0x18>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001014:	4618      	mov	r0, r3
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	40021000 	.word	0x40021000

08001024 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 800102c:	4b07      	ldr	r3, [pc, #28]	; (800104c <LL_RCC_GetUSARTClockSource+0x28>)
 800102e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001030:	2103      	movs	r1, #3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	fa01 f303 	lsl.w	r3, r1, r3
 8001038:	401a      	ands	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	061b      	lsls	r3, r3, #24
 800103e:	4313      	orrs	r3, r2
}
 8001040:	4618      	mov	r0, r3
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	40021000 	.word	0x40021000

08001050 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001054:	4b04      	ldr	r3, [pc, #16]	; (8001068 <LL_RCC_PLL_GetMainSource+0x18>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 800105c:	4618      	mov	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	40021000 	.word	0x40021000

0800106c <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8001070:	4b04      	ldr	r3, [pc, #16]	; (8001084 <LL_RCC_PLL_GetMultiplicator+0x18>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8001078:	4618      	mov	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	40021000 	.word	0x40021000

08001088 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 800108c:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <LL_RCC_PLL_GetPrediv+0x18>)
 800108e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001090:	f003 030f 	and.w	r3, r3, #15
}
 8001094:	4618      	mov	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	40021000 	.word	0x40021000

080010a4 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80010ac:	f000 f860 	bl	8001170 <RCC_GetSystemClockFreq>
 80010b0:	4602      	mov	r2, r0
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 f87a 	bl	80011b4 <RCC_GetHCLKClockFreq>
 80010c0:	4602      	mov	r2, r0
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 f888 	bl	80011e0 <RCC_GetPCLK1ClockFreq>
 80010d0:	4602      	mov	r2, r0
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 f894 	bl	8001208 <RCC_GetPCLK2ClockFreq>
 80010e0:	4602      	mov	r2, r0
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	60da      	str	r2, [r3, #12]
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d12a      	bne.n	8001158 <LL_RCC_GetUSARTClockFreq+0x68>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff ff8e 	bl	8001024 <LL_RCC_GetUSARTClockSource>
 8001108:	4603      	mov	r3, r0
 800110a:	2b02      	cmp	r3, #2
 800110c:	d00f      	beq.n	800112e <LL_RCC_GetUSARTClockFreq+0x3e>
 800110e:	2b03      	cmp	r3, #3
 8001110:	d005      	beq.n	800111e <LL_RCC_GetUSARTClockFreq+0x2e>
 8001112:	2b01      	cmp	r3, #1
 8001114:	d114      	bne.n	8001140 <LL_RCC_GetUSARTClockFreq+0x50>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001116:	f000 f82b 	bl	8001170 <RCC_GetSystemClockFreq>
 800111a:	60f8      	str	r0, [r7, #12]
        break;
 800111c:	e021      	b.n	8001162 <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800111e:	f7ff ff25 	bl	8000f6c <LL_RCC_HSI_IsReady>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d019      	beq.n	800115c <LL_RCC_GetUSARTClockFreq+0x6c>
        {
          usart_frequency = HSI_VALUE;
 8001128:	4b10      	ldr	r3, [pc, #64]	; (800116c <LL_RCC_GetUSARTClockFreq+0x7c>)
 800112a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800112c:	e016      	b.n	800115c <LL_RCC_GetUSARTClockFreq+0x6c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800112e:	f7ff ff2f 	bl	8000f90 <LL_RCC_LSE_IsReady>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d013      	beq.n	8001160 <LL_RCC_GetUSARTClockFreq+0x70>
        {
          usart_frequency = LSE_VALUE;
 8001138:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800113c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800113e:	e00f      	b.n	8001160 <LL_RCC_GetUSARTClockFreq+0x70>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001140:	f000 f816 	bl	8001170 <RCC_GetSystemClockFreq>
 8001144:	4603      	mov	r3, r0
 8001146:	4618      	mov	r0, r3
 8001148:	f000 f834 	bl	80011b4 <RCC_GetHCLKClockFreq>
 800114c:	4603      	mov	r3, r0
 800114e:	4618      	mov	r0, r3
 8001150:	f000 f846 	bl	80011e0 <RCC_GetPCLK1ClockFreq>
 8001154:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 8001156:	e004      	b.n	8001162 <LL_RCC_GetUSARTClockFreq+0x72>
    }
  }
 8001158:	bf00      	nop
 800115a:	e002      	b.n	8001162 <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 800115c:	bf00      	nop
 800115e:	e000      	b.n	8001162 <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 8001160:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8001162:	68fb      	ldr	r3, [r7, #12]
}
 8001164:	4618      	mov	r0, r3
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	007a1200 	.word	0x007a1200

08001170 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001176:	2300      	movs	r3, #0
 8001178:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800117a:	f7ff ff1b 	bl	8000fb4 <LL_RCC_GetSysClkSource>
 800117e:	4603      	mov	r3, r0
 8001180:	2b04      	cmp	r3, #4
 8001182:	d006      	beq.n	8001192 <RCC_GetSystemClockFreq+0x22>
 8001184:	2b08      	cmp	r3, #8
 8001186:	d007      	beq.n	8001198 <RCC_GetSystemClockFreq+0x28>
 8001188:	2b00      	cmp	r3, #0
 800118a:	d109      	bne.n	80011a0 <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800118c:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <RCC_GetSystemClockFreq+0x40>)
 800118e:	607b      	str	r3, [r7, #4]
      break;
 8001190:	e009      	b.n	80011a6 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001192:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <RCC_GetSystemClockFreq+0x40>)
 8001194:	607b      	str	r3, [r7, #4]
      break;
 8001196:	e006      	b.n	80011a6 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001198:	f000 f84a 	bl	8001230 <RCC_PLL_GetFreqDomain_SYS>
 800119c:	6078      	str	r0, [r7, #4]
      break;
 800119e:	e002      	b.n	80011a6 <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 80011a0:	4b03      	ldr	r3, [pc, #12]	; (80011b0 <RCC_GetSystemClockFreq+0x40>)
 80011a2:	607b      	str	r3, [r7, #4]
      break;
 80011a4:	bf00      	nop
  }

  return frequency;
 80011a6:	687b      	ldr	r3, [r7, #4]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	007a1200 	.word	0x007a1200

080011b4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80011bc:	f7ff ff08 	bl	8000fd0 <LL_RCC_GetAHBPrescaler>
 80011c0:	4603      	mov	r3, r0
 80011c2:	091b      	lsrs	r3, r3, #4
 80011c4:	f003 030f 	and.w	r3, r3, #15
 80011c8:	4a04      	ldr	r2, [pc, #16]	; (80011dc <RCC_GetHCLKClockFreq+0x28>)
 80011ca:	5cd3      	ldrb	r3, [r2, r3]
 80011cc:	461a      	mov	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	40d3      	lsrs	r3, r2
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	08005148 	.word	0x08005148

080011e0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80011e8:	f7ff ff00 	bl	8000fec <LL_RCC_GetAPB1Prescaler>
 80011ec:	4603      	mov	r3, r0
 80011ee:	0a1b      	lsrs	r3, r3, #8
 80011f0:	4a04      	ldr	r2, [pc, #16]	; (8001204 <RCC_GetPCLK1ClockFreq+0x24>)
 80011f2:	5cd3      	ldrb	r3, [r2, r3]
 80011f4:	461a      	mov	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	40d3      	lsrs	r3, r2
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	08005158 	.word	0x08005158

08001208 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001210:	f7ff fefa 	bl	8001008 <LL_RCC_GetAPB2Prescaler>
 8001214:	4603      	mov	r3, r0
 8001216:	0adb      	lsrs	r3, r3, #11
 8001218:	4a04      	ldr	r2, [pc, #16]	; (800122c <RCC_GetPCLK2ClockFreq+0x24>)
 800121a:	5cd3      	ldrb	r3, [r2, r3]
 800121c:	461a      	mov	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	40d3      	lsrs	r3, r2
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	08005158 	.word	0x08005158

08001230 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001230:	b590      	push	{r4, r7, lr}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	2300      	movs	r3, #0
 800123c:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 800123e:	f7ff ff07 	bl	8001050 <LL_RCC_PLL_GetMainSource>
 8001242:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d003      	beq.n	8001252 <RCC_PLL_GetFreqDomain_SYS+0x22>
 800124a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800124e:	d003      	beq.n	8001258 <RCC_PLL_GetFreqDomain_SYS+0x28>
 8001250:	e005      	b.n	800125e <RCC_PLL_GetFreqDomain_SYS+0x2e>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8001252:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 8001254:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8001256:	e005      	b.n	8001264 <RCC_PLL_GetFreqDomain_SYS+0x34>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800125a:	60fb      	str	r3, [r7, #12]
      break;
 800125c:	e002      	b.n	8001264 <RCC_PLL_GetFreqDomain_SYS+0x34>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 800125e:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 8001260:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8001262:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8001264:	f7ff ff10 	bl	8001088 <LL_RCC_PLL_GetPrediv>
 8001268:	4603      	mov	r3, r0
 800126a:	3301      	adds	r3, #1
 800126c:	68fa      	ldr	r2, [r7, #12]
 800126e:	fbb2 f4f3 	udiv	r4, r2, r3
 8001272:	f7ff fefb 	bl	800106c <LL_RCC_PLL_GetMultiplicator>
 8001276:	4603      	mov	r3, r0
 8001278:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800127c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001280:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	fa92 f2a2 	rbit	r2, r2
 8001288:	603a      	str	r2, [r7, #0]
  return(result);
 800128a:	683a      	ldr	r2, [r7, #0]
 800128c:	fab2 f282 	clz	r2, r2
 8001290:	40d3      	lsrs	r3, r2
 8001292:	3302      	adds	r3, #2
 8001294:	fb03 f304 	mul.w	r3, r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8001298:	4618      	mov	r0, r3
 800129a:	3714      	adds	r7, #20
 800129c:	46bd      	mov	sp, r7
 800129e:	bd90      	pop	{r4, r7, pc}
 80012a0:	003d0900 	.word	0x003d0900
 80012a4:	007a1200 	.word	0x007a1200

080012a8 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	683a      	ldr	r2, [r7, #0]
 80012b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	683a      	ldr	r2, [r7, #0]
 80012d2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	683a      	ldr	r2, [r7, #0]
 80012ee:	631a      	str	r2, [r3, #48]	; 0x30
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	683a      	ldr	r2, [r7, #0]
 800130a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	683a      	ldr	r2, [r7, #0]
 8001326:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	683a      	ldr	r2, [r7, #0]
 8001342:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	683a      	ldr	r2, [r7, #0]
 800135e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <LL_TIM_OC_SetCompareCH5>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH5 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH5(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR5, CompareValue);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	659a      	str	r2, [r3, #88]	; 0x58
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <LL_TIM_OC_SetCompareCH6>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH6 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH6(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	695b      	ldr	r3, [r3, #20]
 80013b0:	f043 0201 	orr.w	r2, r3, #1
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	615a      	str	r2, [r3, #20]
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4a2f      	ldr	r2, [pc, #188]	; (8001498 <LL_TIM_Init+0xd4>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d007      	beq.n	80013f0 <LL_TIM_Init+0x2c>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013e6:	d003      	beq.n	80013f0 <LL_TIM_Init+0x2c>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4a2c      	ldr	r2, [pc, #176]	; (800149c <LL_TIM_Init+0xd8>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d106      	bne.n	80013fe <LL_TIM_Init+0x3a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a25      	ldr	r2, [pc, #148]	; (8001498 <LL_TIM_Init+0xd4>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d013      	beq.n	800142e <LL_TIM_Init+0x6a>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800140c:	d00f      	beq.n	800142e <LL_TIM_Init+0x6a>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a22      	ldr	r2, [pc, #136]	; (800149c <LL_TIM_Init+0xd8>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d00b      	beq.n	800142e <LL_TIM_Init+0x6a>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a21      	ldr	r2, [pc, #132]	; (80014a0 <LL_TIM_Init+0xdc>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d007      	beq.n	800142e <LL_TIM_Init+0x6a>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a20      	ldr	r2, [pc, #128]	; (80014a4 <LL_TIM_Init+0xe0>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d003      	beq.n	800142e <LL_TIM_Init+0x6a>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a1f      	ldr	r2, [pc, #124]	; (80014a8 <LL_TIM_Init+0xe4>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d106      	bne.n	800143c <LL_TIM_Init+0x78>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	4313      	orrs	r3, r2
 800143a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	4619      	mov	r1, r3
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f7ff ff3b 	bl	80012c4 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	881b      	ldrh	r3, [r3, #0]
 8001452:	4619      	mov	r1, r3
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff ff27 	bl	80012a8 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a0e      	ldr	r2, [pc, #56]	; (8001498 <LL_TIM_Init+0xd4>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d00b      	beq.n	800147a <LL_TIM_Init+0xb6>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a0e      	ldr	r2, [pc, #56]	; (80014a0 <LL_TIM_Init+0xdc>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d007      	beq.n	800147a <LL_TIM_Init+0xb6>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a0d      	ldr	r2, [pc, #52]	; (80014a4 <LL_TIM_Init+0xe0>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d003      	beq.n	800147a <LL_TIM_Init+0xb6>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a0c      	ldr	r2, [pc, #48]	; (80014a8 <LL_TIM_Init+0xe4>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d105      	bne.n	8001486 <LL_TIM_Init+0xc2>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	7c1b      	ldrb	r3, [r3, #16]
 800147e:	4619      	mov	r1, r3
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f7ff ff2d 	bl	80012e0 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff ff8c 	bl	80013a4 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40012c00 	.word	0x40012c00
 800149c:	40000400 	.word	0x40000400
 80014a0:	40014000 	.word	0x40014000
 80014a4:	40014400 	.word	0x40014400
 80014a8:	40014800 	.word	0x40014800

080014ac <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014c2:	d01f      	beq.n	8001504 <LL_TIM_OC_Init+0x58>
 80014c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014c8:	d804      	bhi.n	80014d4 <LL_TIM_OC_Init+0x28>
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d00c      	beq.n	80014e8 <LL_TIM_OC_Init+0x3c>
 80014ce:	2b10      	cmp	r3, #16
 80014d0:	d011      	beq.n	80014f6 <LL_TIM_OC_Init+0x4a>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 80014d2:	e033      	b.n	800153c <LL_TIM_OC_Init+0x90>
  switch (Channel)
 80014d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d8:	d022      	beq.n	8001520 <LL_TIM_OC_Init+0x74>
 80014da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80014de:	d026      	beq.n	800152e <LL_TIM_OC_Init+0x82>
 80014e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014e4:	d015      	beq.n	8001512 <LL_TIM_OC_Init+0x66>
      break;
 80014e6:	e029      	b.n	800153c <LL_TIM_OC_Init+0x90>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80014e8:	6879      	ldr	r1, [r7, #4]
 80014ea:	68f8      	ldr	r0, [r7, #12]
 80014ec:	f000 f82c 	bl	8001548 <OC1Config>
 80014f0:	4603      	mov	r3, r0
 80014f2:	75fb      	strb	r3, [r7, #23]
      break;
 80014f4:	e022      	b.n	800153c <LL_TIM_OC_Init+0x90>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80014f6:	6879      	ldr	r1, [r7, #4]
 80014f8:	68f8      	ldr	r0, [r7, #12]
 80014fa:	f000 f8a5 	bl	8001648 <OC2Config>
 80014fe:	4603      	mov	r3, r0
 8001500:	75fb      	strb	r3, [r7, #23]
      break;
 8001502:	e01b      	b.n	800153c <LL_TIM_OC_Init+0x90>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8001504:	6879      	ldr	r1, [r7, #4]
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	f000 f922 	bl	8001750 <OC3Config>
 800150c:	4603      	mov	r3, r0
 800150e:	75fb      	strb	r3, [r7, #23]
      break;
 8001510:	e014      	b.n	800153c <LL_TIM_OC_Init+0x90>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8001512:	6879      	ldr	r1, [r7, #4]
 8001514:	68f8      	ldr	r0, [r7, #12]
 8001516:	f000 f99f 	bl	8001858 <OC4Config>
 800151a:	4603      	mov	r3, r0
 800151c:	75fb      	strb	r3, [r7, #23]
      break;
 800151e:	e00d      	b.n	800153c <LL_TIM_OC_Init+0x90>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8001520:	6879      	ldr	r1, [r7, #4]
 8001522:	68f8      	ldr	r0, [r7, #12]
 8001524:	f000 fa04 	bl	8001930 <OC5Config>
 8001528:	4603      	mov	r3, r0
 800152a:	75fb      	strb	r3, [r7, #23]
      break;
 800152c:	e006      	b.n	800153c <LL_TIM_OC_Init+0x90>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	68f8      	ldr	r0, [r7, #12]
 8001532:	f000 fa5f 	bl	80019f4 <OC6Config>
 8001536:	4603      	mov	r3, r0
 8001538:	75fb      	strb	r3, [r7, #23]
      break;
 800153a:	bf00      	nop
  }

  return result;
 800153c:	7dfb      	ldrb	r3, [r7, #23]
}
 800153e:	4618      	mov	r0, r3
 8001540:	3718      	adds	r7, #24
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
	...

08001548 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a1b      	ldr	r3, [r3, #32]
 8001562:	f023 0201 	bic.w	r2, r3, #1
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a1b      	ldr	r3, [r3, #32]
 800156e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f023 0303 	bic.w	r3, r3, #3
 8001582:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800158a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800158e:	683a      	ldr	r2, [r7, #0]
 8001590:	6812      	ldr	r2, [r2, #0]
 8001592:	4313      	orrs	r3, r2
 8001594:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	f023 0202 	bic.w	r2, r3, #2
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	691b      	ldr	r3, [r3, #16]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	f023 0201 	bic.w	r2, r3, #1
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a20      	ldr	r2, [pc, #128]	; (8001638 <OC1Config+0xf0>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d00b      	beq.n	80015d2 <OC1Config+0x8a>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a1f      	ldr	r2, [pc, #124]	; (800163c <OC1Config+0xf4>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d007      	beq.n	80015d2 <OC1Config+0x8a>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a1e      	ldr	r2, [pc, #120]	; (8001640 <OC1Config+0xf8>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d003      	beq.n	80015d2 <OC1Config+0x8a>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a1d      	ldr	r2, [pc, #116]	; (8001644 <OC1Config+0xfc>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d11e      	bne.n	8001610 <OC1Config+0xc8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	f023 0208 	bic.w	r2, r3, #8
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	695b      	ldr	r3, [r3, #20]
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4313      	orrs	r3, r2
 80015e0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	f023 0204 	bic.w	r2, r3, #4
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4313      	orrs	r3, r2
 80015f0:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	4313      	orrs	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	4619      	mov	r1, r3
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff fe6a 	bl	80012fc <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	697a      	ldr	r2, [r7, #20]
 800162c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800162e:	2300      	movs	r3, #0
}
 8001630:	4618      	mov	r0, r3
 8001632:	3718      	adds	r7, #24
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40012c00 	.word	0x40012c00
 800163c:	40014000 	.word	0x40014000
 8001640:	40014400 	.word	0x40014400
 8001644:	40014800 	.word	0x40014800

08001648 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800165a:	2300      	movs	r3, #0
 800165c:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a1b      	ldr	r3, [r3, #32]
 8001662:	f023 0210 	bic.w	r2, r3, #16
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a1b      	ldr	r3, [r3, #32]
 800166e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001682:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800168a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	6812      	ldr	r2, [r2, #0]
 8001692:	0212      	lsls	r2, r2, #8
 8001694:	4313      	orrs	r3, r2
 8001696:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	f023 0220 	bic.w	r2, r3, #32
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	011b      	lsls	r3, r3, #4
 80016a4:	4313      	orrs	r3, r2
 80016a6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	f023 0210 	bic.w	r2, r3, #16
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	011b      	lsls	r3, r3, #4
 80016b4:	4313      	orrs	r3, r2
 80016b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a21      	ldr	r2, [pc, #132]	; (8001740 <OC2Config+0xf8>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d00b      	beq.n	80016d8 <OC2Config+0x90>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4a20      	ldr	r2, [pc, #128]	; (8001744 <OC2Config+0xfc>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d007      	beq.n	80016d8 <OC2Config+0x90>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a1f      	ldr	r2, [pc, #124]	; (8001748 <OC2Config+0x100>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d003      	beq.n	80016d8 <OC2Config+0x90>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4a1e      	ldr	r2, [pc, #120]	; (800174c <OC2Config+0x104>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d11f      	bne.n	8001718 <OC2Config+0xd0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	019b      	lsls	r3, r3, #6
 80016e4:	4313      	orrs	r3, r2
 80016e6:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	019b      	lsls	r3, r3, #6
 80016f4:	4313      	orrs	r3, r2
 80016f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	4313      	orrs	r3, r2
 8001706:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	4313      	orrs	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	68fa      	ldr	r2, [r7, #12]
 8001722:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	4619      	mov	r1, r3
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7ff fdf4 	bl	8001318 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	697a      	ldr	r2, [r7, #20]
 8001734:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001736:	2300      	movs	r3, #0
}
 8001738:	4618      	mov	r0, r3
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40012c00 	.word	0x40012c00
 8001744:	40014000 	.word	0x40014000
 8001748:	40014400 	.word	0x40014400
 800174c:	40014800 	.word	0x40014800

08001750 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8001762:	2300      	movs	r3, #0
 8001764:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a1b      	ldr	r3, [r3, #32]
 800176a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a1b      	ldr	r3, [r3, #32]
 8001776:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f023 0303 	bic.w	r3, r3, #3
 800178a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	6812      	ldr	r2, [r2, #0]
 800179a:	4313      	orrs	r3, r2
 800179c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	691b      	ldr	r3, [r3, #16]
 80017a8:	021b      	lsls	r3, r3, #8
 80017aa:	4313      	orrs	r3, r2
 80017ac:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	021b      	lsls	r3, r3, #8
 80017ba:	4313      	orrs	r3, r2
 80017bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a21      	ldr	r2, [pc, #132]	; (8001848 <OC3Config+0xf8>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d00b      	beq.n	80017de <OC3Config+0x8e>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a20      	ldr	r2, [pc, #128]	; (800184c <OC3Config+0xfc>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d007      	beq.n	80017de <OC3Config+0x8e>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a1f      	ldr	r2, [pc, #124]	; (8001850 <OC3Config+0x100>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d003      	beq.n	80017de <OC3Config+0x8e>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a1e      	ldr	r2, [pc, #120]	; (8001854 <OC3Config+0x104>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d11f      	bne.n	800181e <OC3Config+0xce>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	695b      	ldr	r3, [r3, #20]
 80017e8:	029b      	lsls	r3, r3, #10
 80017ea:	4313      	orrs	r3, r2
 80017ec:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	029b      	lsls	r3, r3, #10
 80017fa:	4313      	orrs	r3, r2
 80017fc:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	011b      	lsls	r3, r3, #4
 800180a:	4313      	orrs	r3, r2
 800180c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	69db      	ldr	r3, [r3, #28]
 8001818:	015b      	lsls	r3, r3, #5
 800181a:	4313      	orrs	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68fa      	ldr	r2, [r7, #12]
 8001828:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	4619      	mov	r1, r3
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f7ff fd7f 	bl	8001334 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3718      	adds	r7, #24
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40012c00 	.word	0x40012c00
 800184c:	40014000 	.word	0x40014000
 8001850:	40014400 	.word	0x40014400
 8001854:	40014800 	.word	0x40014800

08001858 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a1b      	ldr	r3, [r3, #32]
 8001872:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a1b      	ldr	r3, [r3, #32]
 800187e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	613b      	str	r3, [r7, #16]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001892:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800189a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	6812      	ldr	r2, [r2, #0]
 80018a2:	0212      	lsls	r2, r2, #8
 80018a4:	4313      	orrs	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	031b      	lsls	r3, r3, #12
 80018b4:	4313      	orrs	r3, r2
 80018b6:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	031b      	lsls	r3, r3, #12
 80018c4:	4313      	orrs	r3, r2
 80018c6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4a15      	ldr	r2, [pc, #84]	; (8001920 <OC4Config+0xc8>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d00b      	beq.n	80018e8 <OC4Config+0x90>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4a14      	ldr	r2, [pc, #80]	; (8001924 <OC4Config+0xcc>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d007      	beq.n	80018e8 <OC4Config+0x90>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4a13      	ldr	r2, [pc, #76]	; (8001928 <OC4Config+0xd0>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d003      	beq.n	80018e8 <OC4Config+0x90>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4a12      	ldr	r2, [pc, #72]	; (800192c <OC4Config+0xd4>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d107      	bne.n	80018f8 <OC4Config+0xa0>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	019b      	lsls	r3, r3, #6
 80018f4:	4313      	orrs	r3, r2
 80018f6:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	697a      	ldr	r2, [r7, #20]
 80018fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	4619      	mov	r1, r3
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7ff fd20 	bl	8001350 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	3718      	adds	r7, #24
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40012c00 	.word	0x40012c00
 8001924:	40014000 	.word	0x40014000
 8001928:	40014400 	.word	0x40014400
 800192c:	40014800 	.word	0x40014800

08001930 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800193e:	2300      	movs	r3, #0
 8001940:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a1b      	ldr	r3, [r3, #32]
 8001946:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a1b      	ldr	r3, [r3, #32]
 8001952:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001958:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	6812      	ldr	r2, [r2, #0]
 8001968:	4313      	orrs	r3, r2
 800196a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	041b      	lsls	r3, r3, #16
 8001978:	4313      	orrs	r3, r2
 800197a:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	041b      	lsls	r3, r3, #16
 8001988:	4313      	orrs	r3, r2
 800198a:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a15      	ldr	r2, [pc, #84]	; (80019e4 <OC5Config+0xb4>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d00b      	beq.n	80019ac <OC5Config+0x7c>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a14      	ldr	r2, [pc, #80]	; (80019e8 <OC5Config+0xb8>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d007      	beq.n	80019ac <OC5Config+0x7c>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a13      	ldr	r2, [pc, #76]	; (80019ec <OC5Config+0xbc>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d003      	beq.n	80019ac <OC5Config+0x7c>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a12      	ldr	r2, [pc, #72]	; (80019f0 <OC5Config+0xc0>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d109      	bne.n	80019c0 <OC5Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	021b      	lsls	r3, r3, #8
 80019ba:	431a      	orrs	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	4619      	mov	r1, r3
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff fccd 	bl	800136c <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68ba      	ldr	r2, [r7, #8]
 80019d6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40012c00 	.word	0x40012c00
 80019e8:	40014000 	.word	0x40014000
 80019ec:	40014400 	.word	0x40014400
 80019f0:	40014800 	.word	0x40014800

080019f4 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 80019fe:	2300      	movs	r3, #0
 8001a00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001a02:	2300      	movs	r3, #0
 8001a04:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a1b      	ldr	r3, [r3, #32]
 8001a0a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a1b      	ldr	r3, [r3, #32]
 8001a16:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a1c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	6812      	ldr	r2, [r2, #0]
 8001a2c:	0212      	lsls	r2, r2, #8
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	691b      	ldr	r3, [r3, #16]
 8001a3c:	051b      	lsls	r3, r3, #20
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	051b      	lsls	r3, r3, #20
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a14      	ldr	r2, [pc, #80]	; (8001aa8 <OC6Config+0xb4>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d00b      	beq.n	8001a72 <OC6Config+0x7e>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a13      	ldr	r2, [pc, #76]	; (8001aac <OC6Config+0xb8>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d007      	beq.n	8001a72 <OC6Config+0x7e>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a12      	ldr	r2, [pc, #72]	; (8001ab0 <OC6Config+0xbc>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d003      	beq.n	8001a72 <OC6Config+0x7e>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a11      	ldr	r2, [pc, #68]	; (8001ab4 <OC6Config+0xc0>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d109      	bne.n	8001a86 <OC6Config+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	029b      	lsls	r3, r3, #10
 8001a80:	431a      	orrs	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	68fa      	ldr	r2, [r7, #12]
 8001a8a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	4619      	mov	r1, r3
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff fc78 	bl	8001388 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68ba      	ldr	r2, [r7, #8]
 8001a9c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40012c00 	.word	0x40012c00
 8001aac:	40014000 	.word	0x40014000
 8001ab0:	40014400 	.word	0x40014400
 8001ab4:	40014800 	.word	0x40014800

08001ab8 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	bf0c      	ite	eq
 8001acc:	2301      	moveq	r3, #1
 8001ace:	2300      	movne	r3, #0
 8001ad0:	b2db      	uxtb	r3, r3
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b083      	sub	sp, #12
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
 8001ae6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	605a      	str	r2, [r3, #4]
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	431a      	orrs	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	609a      	str	r2, [r3, #8]
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 8001b2a:	b4b0      	push	{r4, r5, r7}
 8001b2c:	b085      	sub	sp, #20
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	60f8      	str	r0, [r7, #12]
 8001b32:	60b9      	str	r1, [r7, #8]
 8001b34:	607a      	str	r2, [r7, #4]
 8001b36:	603b      	str	r3, [r7, #0]
  register uint32_t usartdiv = 0x0U;
 8001b38:	2500      	movs	r5, #0
  register uint32_t brrtemp = 0x0U;
 8001b3a:	2400      	movs	r4, #0

  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b42:	d114      	bne.n	8001b6e <LL_USART_SetBaudRate+0x44>
  {
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	005a      	lsls	r2, r3, #1
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	085b      	lsrs	r3, r3, #1
 8001b4c:	441a      	add	r2, r3
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	461d      	mov	r5, r3
    brrtemp = usartdiv & 0xFFF0U;
 8001b58:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8001b5c:	402c      	ands	r4, r5
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001b5e:	086b      	lsrs	r3, r5, #1
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	60dc      	str	r4, [r3, #12]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 8001b6c:	e00a      	b.n	8001b84 <LL_USART_SetBaudRate+0x5a>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	085a      	lsrs	r2, r3, #1
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	441a      	add	r2, r3
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	461a      	mov	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	60da      	str	r2, [r3, #12]
}
 8001b84:	bf00      	nop
 8001b86:	3714      	adds	r7, #20
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bcb0      	pop	{r4, r5, r7}
 8001b8c:	4770      	bx	lr
	...

08001b90 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b088      	sub	sp, #32
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff ff88 	bl	8001ab8 <LL_USART_IsEnabled>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d14e      	bne.n	8001c4c <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	4b29      	ldr	r3, [pc, #164]	; (8001c58 <LL_USART_Init+0xc8>)
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	6851      	ldr	r1, [r2, #4]
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	68d2      	ldr	r2, [r2, #12]
 8001bbe:	4311      	orrs	r1, r2
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	6912      	ldr	r2, [r2, #16]
 8001bc4:	4311      	orrs	r1, r2
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	6992      	ldr	r2, [r2, #24]
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	431a      	orrs	r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f7ff ff80 	bl	8001ade <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	4619      	mov	r1, r3
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f7ff ff8d 	bl	8001b04 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a1b      	ldr	r2, [pc, #108]	; (8001c5c <LL_USART_Init+0xcc>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d104      	bne.n	8001bfc <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	f7ff fa7c 	bl	80010f0 <LL_RCC_GetUSARTClockFreq>
 8001bf8:	61b8      	str	r0, [r7, #24]
 8001bfa:	e016      	b.n	8001c2a <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a18      	ldr	r2, [pc, #96]	; (8001c60 <LL_USART_Init+0xd0>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d107      	bne.n	8001c14 <LL_USART_Init+0x84>
    {
#if defined (RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8001c04:	f107 0308 	add.w	r3, r7, #8
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff fa4b 	bl	80010a4 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	61bb      	str	r3, [r7, #24]
 8001c12:	e00a      	b.n	8001c2a <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a13      	ldr	r2, [pc, #76]	; (8001c64 <LL_USART_Init+0xd4>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d106      	bne.n	8001c2a <LL_USART_Init+0x9a>
    {
#if defined (RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8001c1c:	f107 0308 	add.w	r3, r7, #8
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff fa3f 	bl	80010a4 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d00d      	beq.n	8001c4c <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d009      	beq.n	8001c4c <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	699a      	ldr	r2, [r3, #24]
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	69b9      	ldr	r1, [r7, #24]
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7ff ff6f 	bl	8001b2a <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8001c4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3720      	adds	r7, #32
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	efff69f3 	.word	0xefff69f3
 8001c5c:	40013800 	.word	0x40013800
 8001c60:	40004400 	.word	0x40004400
 8001c64:	40004800 	.word	0x40004800

08001c68 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7a:	4a07      	ldr	r2, [pc, #28]	; (8001c98 <LL_InitTick+0x30>)
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001c80:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <LL_InitTick+0x30>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c86:	4b04      	ldr	r3, [pc, #16]	; (8001c98 <LL_InitTick+0x30>)
 8001c88:	2205      	movs	r2, #5
 8001c8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	e000e010 	.word	0xe000e010

08001c9c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001ca4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f7ff ffdd 	bl	8001c68 <LL_InitTick>
}
 8001cae:	bf00      	nop
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
	...

08001cb8 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001cc0:	4b0e      	ldr	r3, [pc, #56]	; (8001cfc <LL_mDelay+0x44>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8001cc6:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cce:	d00c      	beq.n	8001cea <LL_mDelay+0x32>
  {
    Delay++;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8001cd6:	e008      	b.n	8001cea <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001cd8:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <LL_mDelay+0x44>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d002      	beq.n	8001cea <LL_mDelay+0x32>
    {
      Delay--;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	607b      	str	r3, [r7, #4]
  while (Delay)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1f3      	bne.n	8001cd8 <LL_mDelay+0x20>
    }
  }
}
 8001cf0:	bf00      	nop
 8001cf2:	3714      	adds	r7, #20
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	e000e010 	.word	0xe000e010

08001d00 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001d08:	4a04      	ldr	r2, [pc, #16]	; (8001d1c <LL_SetSystemCoreClock+0x1c>)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6013      	str	r3, [r2, #0]
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	20000000 	.word	0x20000000

08001d20 <LL_ADC_REG_SetSequencerRanks>:
{
 8001d20:	b490      	push	{r4, r7}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	3330      	adds	r3, #48	; 0x30
 8001d30:	4619      	mov	r1, r3
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001d38:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	fa93 f3a3 	rbit	r3, r3
 8001d44:	613b      	str	r3, [r7, #16]
  return(result);
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	fab3 f383 	clz	r3, r3
 8001d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	440b      	add	r3, r1
 8001d54:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8001d56:	6822      	ldr	r2, [r4, #0]
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	f003 031f 	and.w	r3, r3, #31
 8001d5e:	211f      	movs	r1, #31
 8001d60:	fa01 f303 	lsl.w	r3, r1, r3
 8001d64:	43db      	mvns	r3, r3
 8001d66:	401a      	ands	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	f003 031f 	and.w	r3, r3, #31
 8001d74:	f1c3 031a 	rsb	r3, r3, #26
 8001d78:	fa21 f303 	lsr.w	r3, r1, r3
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	6023      	str	r3, [r4, #0]
}
 8001d80:	bf00      	nop
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bc90      	pop	{r4, r7}
 8001d88:	4770      	bx	lr

08001d8a <LL_ADC_SetChannelSamplingTime>:
{
 8001d8a:	b490      	push	{r4, r7}
 8001d8c:	b08a      	sub	sp, #40	; 0x28
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	60f8      	str	r0, [r7, #12]
 8001d92:	60b9      	str	r1, [r7, #8]
 8001d94:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	3314      	adds	r3, #20
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8001da2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001da6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	fa93 f3a3 	rbit	r3, r3
 8001dae:	613b      	str	r3, [r7, #16]
  return(result);
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	fab3 f383 	clz	r3, r3
 8001db6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8001dc0:	6822      	ldr	r2, [r4, #0]
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	f003 71f8 	and.w	r1, r3, #32505856	; 0x1f00000
 8001dc8:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 8001dcc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	fa93 f3a3 	rbit	r3, r3
 8001dd4:	61bb      	str	r3, [r7, #24]
  return(result);
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	fab3 f383 	clz	r3, r3
 8001ddc:	fa21 f303 	lsr.w	r3, r1, r3
 8001de0:	2107      	movs	r1, #7
 8001de2:	fa01 f303 	lsl.w	r3, r1, r3
 8001de6:	43db      	mvns	r3, r3
 8001de8:	401a      	ands	r2, r3
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	f003 71f8 	and.w	r1, r3, #32505856	; 0x1f00000
 8001df0:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 8001df4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df8:	fa93 f3a3 	rbit	r3, r3
 8001dfc:	623b      	str	r3, [r7, #32]
  return(result);
 8001dfe:	6a3b      	ldr	r3, [r7, #32]
 8001e00:	fab3 f383 	clz	r3, r3
 8001e04:	fa21 f303 	lsr.w	r3, r1, r3
 8001e08:	6879      	ldr	r1, [r7, #4]
 8001e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	6023      	str	r3, [r4, #0]
}
 8001e12:	bf00      	nop
 8001e14:	3728      	adds	r7, #40	; 0x28
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc90      	pop	{r4, r7}
 8001e1a:	4770      	bx	lr

08001e1c <LL_ADC_SetChannelSingleDiff>:
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e34:	43db      	mvns	r3, r3
 8001e36:	401a      	ands	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f003 0320 	and.w	r3, r3, #32
 8001e3e:	4908      	ldr	r1, [pc, #32]	; (8001e60 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e40:	4099      	lsls	r1, r3
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	400b      	ands	r3, r1
 8001e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001e52:	bf00      	nop
 8001e54:	3714      	adds	r7, #20
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	0007ffff 	.word	0x0007ffff

08001e64 <LL_ADC_DisableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f023 0204 	bic.w	r2, r3, #4
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	605a      	str	r2, [r3, #4]
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <LL_ADC_DisableIT_EOS>:
  * @rmtoll IER      EOSIE          LL_ADC_DisableIT_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f023 0208 	bic.w	r2, r3, #8
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	605a      	str	r2, [r3, #4]
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001eac:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001eae:	695a      	ldr	r2, [r3, #20]
 8001eb0:	4907      	ldr	r1, [pc, #28]	; (8001ed0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001eb8:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001eba:	695a      	ldr	r2, [r3, #20]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
}
 8001ec4:	bf00      	nop
 8001ec6:	3714      	adds	r7, #20
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	40021000 	.word	0x40021000

08001ed4 <MX_ADC1_Init>:

/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b094      	sub	sp, #80	; 0x50
 8001ed8:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001eda:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	605a      	str	r2, [r3, #4]
 8001ee4:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001ee6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	605a      	str	r2, [r3, #4]
 8001ef0:	609a      	str	r2, [r3, #8]
 8001ef2:	60da      	str	r2, [r3, #12]
 8001ef4:	611a      	str	r2, [r3, #16]
 8001ef6:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8001ef8:	f107 031c 	add.w	r3, r7, #28
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f06:	1d3b      	adds	r3, r7, #4
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	60da      	str	r2, [r3, #12]
 8001f12:	611a      	str	r2, [r3, #16]
 8001f14:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_ADC12);
 8001f16:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001f1a:	f7ff ffc3 	bl	8001ea4 <LL_AHB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001f1e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001f22:	f7ff ffbf 	bl	8001ea4 <LL_AHB1_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA0   ------> ADC1_IN1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8001f26:	2301      	movs	r3, #1
 8001f28:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f32:	1d3b      	adds	r3, r7, #4
 8001f34:	4619      	mov	r1, r3
 8001f36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f3a:	f7fe ff9c 	bl	8000e76 <LL_GPIO_Init>

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8001f42:	2300      	movs	r3, #0
 8001f44:	64bb      	str	r3, [r7, #72]	; 0x48
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8001f46:	2300      	movs	r3, #0
 8001f48:	64fb      	str	r3, [r7, #76]	; 0x4c
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8001f4a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f4e:	4619      	mov	r1, r3
 8001f50:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001f54:	f7fe fe24 	bl	8000ba0 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8001f60:	2300      	movs	r3, #0
 8001f62:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8001f64:	2300      	movs	r3, #0
 8001f66:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
 8001f6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f70:	643b      	str	r3, [r7, #64]	; 0x40
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8001f72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f76:	4619      	mov	r1, r3
 8001f78:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001f7c:	f7fe fe36 	bl	8000bec <LL_ADC_REG_Init>
  LL_ADC_DisableIT_EOC(ADC1);
 8001f80:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001f84:	f7ff ff6e 	bl	8001e64 <LL_ADC_DisableIT_EOC>
  LL_ADC_DisableIT_EOS(ADC1);
 8001f88:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001f8c:	f7ff ff7a 	bl	8001e84 <LL_ADC_DisableIT_EOS>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV1;
 8001f90:	2300      	movs	r3, #0
 8001f92:	61fb      	str	r3, [r7, #28]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8001f94:	2300      	movs	r3, #0
 8001f96:	623b      	str	r3, [r7, #32]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8001f98:	f107 031c 	add.w	r3, r7, #28
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	480c      	ldr	r0, [pc, #48]	; (8001fd0 <MX_ADC1_Init+0xfc>)
 8001fa0:	f7fe fdbe 	bl	8000b20 <LL_ADC_CommonInit>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8001fa4:	4a0b      	ldr	r2, [pc, #44]	; (8001fd4 <MX_ADC1_Init+0x100>)
 8001fa6:	2106      	movs	r1, #6
 8001fa8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001fac:	f7ff feb8 	bl	8001d20 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	4908      	ldr	r1, [pc, #32]	; (8001fd4 <MX_ADC1_Init+0x100>)
 8001fb4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001fb8:	f7ff fee7 	bl	8001d8a <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SINGLE_ENDED);
 8001fbc:	227f      	movs	r2, #127	; 0x7f
 8001fbe:	4905      	ldr	r1, [pc, #20]	; (8001fd4 <MX_ADC1_Init+0x100>)
 8001fc0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001fc4:	f7ff ff2a 	bl	8001e1c <LL_ADC_SetChannelSingleDiff>

}
 8001fc8:	bf00      	nop
 8001fca:	3750      	adds	r7, #80	; 0x50
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	50000300 	.word	0x50000300
 8001fd4:	04300002 	.word	0x04300002

08001fd8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001fe2:	79fb      	ldrb	r3, [r7, #7]
 8001fe4:	f003 021f 	and.w	r2, r3, #31
 8001fe8:	4907      	ldr	r1, [pc, #28]	; (8002008 <NVIC_EnableIRQ+0x30>)
 8001fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fee:	095b      	lsrs	r3, r3, #5
 8001ff0:	2001      	movs	r0, #1
 8001ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	e000e100 	.word	0xe000e100

0800200c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	6039      	str	r1, [r7, #0]
 8002016:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201c:	2b00      	cmp	r3, #0
 800201e:	da0b      	bge.n	8002038 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	b2da      	uxtb	r2, r3
 8002024:	490c      	ldr	r1, [pc, #48]	; (8002058 <NVIC_SetPriority+0x4c>)
 8002026:	79fb      	ldrb	r3, [r7, #7]
 8002028:	f003 030f 	and.w	r3, r3, #15
 800202c:	3b04      	subs	r3, #4
 800202e:	0112      	lsls	r2, r2, #4
 8002030:	b2d2      	uxtb	r2, r2
 8002032:	440b      	add	r3, r1
 8002034:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002036:	e009      	b.n	800204c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	b2da      	uxtb	r2, r3
 800203c:	4907      	ldr	r1, [pc, #28]	; (800205c <NVIC_SetPriority+0x50>)
 800203e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002042:	0112      	lsls	r2, r2, #4
 8002044:	b2d2      	uxtb	r2, r2
 8002046:	440b      	add	r3, r1
 8002048:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	e000ed00 	.word	0xe000ed00
 800205c:	e000e100 	.word	0xe000e100

08002060 <LL_AHB1_GRP1_EnableClock>:
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8002068:	4b08      	ldr	r3, [pc, #32]	; (800208c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800206a:	695a      	ldr	r2, [r3, #20]
 800206c:	4907      	ldr	r1, [pc, #28]	; (800208c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4313      	orrs	r3, r2
 8002072:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002074:	4b05      	ldr	r3, [pc, #20]	; (800208c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002076:	695a      	ldr	r2, [r3, #20]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4013      	ands	r3, r2
 800207c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800207e:	68fb      	ldr	r3, [r7, #12]
}
 8002080:	bf00      	nop
 8002082:	3714      	adds	r7, #20
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	40021000 	.word	0x40021000

08002090 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8002094:	2001      	movs	r0, #1
 8002096:	f7ff ffe3 	bl	8002060 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, 0); //NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0)
 800209a:	2100      	movs	r1, #0
 800209c:	2010      	movs	r0, #16
 800209e:	f7ff ffb5 	bl	800200c <NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80020a2:	2010      	movs	r0, #16
 80020a4:	f7ff ff98 	bl	8001fd8 <NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, 0); //NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0)
 80020a8:	2100      	movs	r1, #0
 80020aa:	2011      	movs	r0, #17
 80020ac:	f7ff ffae 	bl	800200c <NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80020b0:	2011      	movs	r0, #17
 80020b2:	f7ff ff91 	bl	8001fd8 <NVIC_EnableIRQ>

}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
	...

080020bc <LL_AHB1_GRP1_EnableClock>:
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80020c4:	4b08      	ldr	r3, [pc, #32]	; (80020e8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80020c6:	695a      	ldr	r2, [r3, #20]
 80020c8:	4907      	ldr	r1, [pc, #28]	; (80020e8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80020d0:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80020d2:	695a      	ldr	r2, [r3, #20]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4013      	ands	r3, r2
 80020d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020da:	68fb      	ldr	r3, [r7, #12]
}
 80020dc:	bf00      	nop
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	40021000 	.word	0x40021000

080020ec <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800210e:	463b      	mov	r3, r7
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	609a      	str	r2, [r3, #8]
 8002118:	60da      	str	r2, [r3, #12]
 800211a:	611a      	str	r2, [r3, #16]
 800211c:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800211e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002122:	f7ff ffcb 	bl	80020bc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002126:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800212a:	f7ff ffc7 	bl	80020bc <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_3);
 800212e:	2108      	movs	r1, #8
 8002130:	480a      	ldr	r0, [pc, #40]	; (800215c <MX_GPIO_Init+0x54>)
 8002132:	f7ff ffdb 	bl	80020ec <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8002136:	2308      	movs	r3, #8
 8002138:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800213a:	2301      	movs	r3, #1
 800213c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800213e:	2300      	movs	r3, #0
 8002140:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002142:	2300      	movs	r3, #0
 8002144:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002146:	2300      	movs	r3, #0
 8002148:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800214a:	463b      	mov	r3, r7
 800214c:	4619      	mov	r1, r3
 800214e:	4803      	ldr	r0, [pc, #12]	; (800215c <MX_GPIO_Init+0x54>)
 8002150:	f7fe fe91 	bl	8000e76 <LL_GPIO_Init>

}
 8002154:	bf00      	nop
 8002156:	3718      	adds	r7, #24
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	48000400 	.word	0x48000400

08002160 <NVIC_SetPriorityGrouping>:
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002170:	4b0c      	ldr	r3, [pc, #48]	; (80021a4 <NVIC_SetPriorityGrouping+0x44>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002176:	68ba      	ldr	r2, [r7, #8]
 8002178:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800217c:	4013      	ands	r3, r2
 800217e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002188:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800218c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002190:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002192:	4a04      	ldr	r2, [pc, #16]	; (80021a4 <NVIC_SetPriorityGrouping+0x44>)
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	60d3      	str	r3, [r2, #12]
}
 8002198:	bf00      	nop
 800219a:	3714      	adds	r7, #20
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	e000ed00 	.word	0xe000ed00

080021a8 <LL_RCC_HSI_Enable>:
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80021ac:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <LL_RCC_HSI_Enable+0x1c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a04      	ldr	r2, [pc, #16]	; (80021c4 <LL_RCC_HSI_Enable+0x1c>)
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	6013      	str	r3, [r2, #0]
}
 80021b8:	bf00      	nop
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	40021000 	.word	0x40021000

080021c8 <LL_RCC_HSI_IsReady>:
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80021cc:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <LL_RCC_HSI_IsReady+0x20>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	bf0c      	ite	eq
 80021d8:	2301      	moveq	r3, #1
 80021da:	2300      	movne	r3, #0
 80021dc:	b2db      	uxtb	r3, r3
}
 80021de:	4618      	mov	r0, r3
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	40021000 	.word	0x40021000

080021ec <LL_RCC_HSI_SetCalibTrimming>:
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80021f4:	4b07      	ldr	r3, [pc, #28]	; (8002214 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	4904      	ldr	r1, [pc, #16]	; (8002214 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8002202:	4313      	orrs	r3, r2
 8002204:	600b      	str	r3, [r1, #0]
}
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	40021000 	.word	0x40021000

08002218 <LL_RCC_SetSysClkSource>:
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002220:	4b06      	ldr	r3, [pc, #24]	; (800223c <LL_RCC_SetSysClkSource+0x24>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f023 0203 	bic.w	r2, r3, #3
 8002228:	4904      	ldr	r1, [pc, #16]	; (800223c <LL_RCC_SetSysClkSource+0x24>)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4313      	orrs	r3, r2
 800222e:	604b      	str	r3, [r1, #4]
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	40021000 	.word	0x40021000

08002240 <LL_RCC_GetSysClkSource>:
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002244:	4b04      	ldr	r3, [pc, #16]	; (8002258 <LL_RCC_GetSysClkSource+0x18>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f003 030c 	and.w	r3, r3, #12
}
 800224c:	4618      	mov	r0, r3
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	40021000 	.word	0x40021000

0800225c <LL_RCC_SetAHBPrescaler>:
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002264:	4b06      	ldr	r3, [pc, #24]	; (8002280 <LL_RCC_SetAHBPrescaler+0x24>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800226c:	4904      	ldr	r1, [pc, #16]	; (8002280 <LL_RCC_SetAHBPrescaler+0x24>)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4313      	orrs	r3, r2
 8002272:	604b      	str	r3, [r1, #4]
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	40021000 	.word	0x40021000

08002284 <LL_RCC_SetAPB1Prescaler>:
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800228c:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <LL_RCC_SetAPB1Prescaler+0x24>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002294:	4904      	ldr	r1, [pc, #16]	; (80022a8 <LL_RCC_SetAPB1Prescaler+0x24>)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4313      	orrs	r3, r2
 800229a:	604b      	str	r3, [r1, #4]
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	40021000 	.word	0x40021000

080022ac <LL_RCC_SetAPB2Prescaler>:
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80022b4:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022bc:	4904      	ldr	r1, [pc, #16]	; (80022d0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	604b      	str	r3, [r1, #4]
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	40021000 	.word	0x40021000

080022d4 <LL_RCC_SetADCClockSource>:
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_ADCPRE12, ADCxSource);
 80022dc:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <LL_RCC_SetADCClockSource+0x24>)
 80022de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80022e4:	4904      	ldr	r1, [pc, #16]	; (80022f8 <LL_RCC_SetADCClockSource+0x24>)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	40021000 	.word	0x40021000

080022fc <LL_RCC_PLL_Enable>:
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002300:	4b05      	ldr	r3, [pc, #20]	; (8002318 <LL_RCC_PLL_Enable+0x1c>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a04      	ldr	r2, [pc, #16]	; (8002318 <LL_RCC_PLL_Enable+0x1c>)
 8002306:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800230a:	6013      	str	r3, [r2, #0]
}
 800230c:	bf00      	nop
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	40021000 	.word	0x40021000

0800231c <LL_RCC_PLL_IsReady>:
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8002320:	4b07      	ldr	r3, [pc, #28]	; (8002340 <LL_RCC_PLL_IsReady+0x24>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002328:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800232c:	bf0c      	ite	eq
 800232e:	2301      	moveq	r3, #1
 8002330:	2300      	movne	r3, #0
 8002332:	b2db      	uxtb	r3, r3
}
 8002334:	4618      	mov	r0, r3
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	40021000 	.word	0x40021000

08002344 <LL_RCC_PLL_ConfigDomain_SYS>:
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, (Source & RCC_CFGR_PLLSRC) | PLLMul);
 800234e:	4b0e      	ldr	r3, [pc, #56]	; (8002388 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	430b      	orrs	r3, r1
 8002360:	4909      	ldr	r1, [pc, #36]	; (8002388 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8002362:	4313      	orrs	r3, r2
 8002364:	604b      	str	r3, [r1, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (Source & RCC_CFGR2_PREDIV));
 8002366:	4b08      	ldr	r3, [pc, #32]	; (8002388 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8002368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236a:	f023 020f 	bic.w	r2, r3, #15
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f003 030f 	and.w	r3, r3, #15
 8002374:	4904      	ldr	r1, [pc, #16]	; (8002388 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8002376:	4313      	orrs	r3, r2
 8002378:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	40021000 	.word	0x40021000

0800238c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8002394:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002396:	69da      	ldr	r2, [r3, #28]
 8002398:	4907      	ldr	r1, [pc, #28]	; (80023b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4313      	orrs	r3, r2
 800239e:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80023a0:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80023a2:	69da      	ldr	r2, [r3, #28]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4013      	ands	r3, r2
 80023a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023aa:	68fb      	ldr	r3, [r7, #12]
}
 80023ac:	bf00      	nop
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	40021000 	.word	0x40021000

080023bc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80023c4:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80023c6:	699a      	ldr	r2, [r3, #24]
 80023c8:	4907      	ldr	r1, [pc, #28]	; (80023e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80023d0:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80023d2:	699a      	ldr	r2, [r3, #24]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4013      	ands	r3, r2
 80023d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023da:	68fb      	ldr	r3, [r7, #12]
}
 80023dc:	bf00      	nop
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	40021000 	.word	0x40021000

080023ec <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80023f4:	4b06      	ldr	r3, [pc, #24]	; (8002410 <LL_FLASH_SetLatency+0x24>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f023 0207 	bic.w	r2, r3, #7
 80023fc:	4904      	ldr	r1, [pc, #16]	; (8002410 <LL_FLASH_SetLatency+0x24>)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4313      	orrs	r3, r2
 8002402:	600b      	str	r3, [r1, #0]
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	40022000 	.word	0x40022000

08002414 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8002418:	4b04      	ldr	r3, [pc, #16]	; (800242c <LL_FLASH_GetLatency+0x18>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0307 	and.w	r3, r3, #7
}
 8002420:	4618      	mov	r0, r3
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	40022000 	.word	0x40022000

08002430 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b04      	cmp	r3, #4
 800243c:	d106      	bne.n	800244c <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 800243e:	4b09      	ldr	r3, [pc, #36]	; (8002464 <LL_SYSTICK_SetClkSource+0x34>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a08      	ldr	r2, [pc, #32]	; (8002464 <LL_SYSTICK_SetClkSource+0x34>)
 8002444:	f043 0304 	orr.w	r3, r3, #4
 8002448:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 800244a:	e005      	b.n	8002458 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 800244c:	4b05      	ldr	r3, [pc, #20]	; (8002464 <LL_SYSTICK_SetClkSource+0x34>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a04      	ldr	r2, [pc, #16]	; (8002464 <LL_SYSTICK_SetClkSource+0x34>)
 8002452:	f023 0304 	bic.w	r3, r3, #4
 8002456:	6013      	str	r3, [r2, #0]
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	e000e010 	.word	0xe000e010

08002468 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002468:	b5b0      	push	{r4, r5, r7, lr}
 800246a:	b0ba      	sub	sp, #232	; 0xe8
 800246c:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800246e:	2001      	movs	r0, #1
 8002470:	f7ff ffa4 	bl	80023bc <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8002474:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002478:	f7ff ff88 	bl	800238c <LL_APB1_GRP1_EnableClock>
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800247c:	2003      	movs	r0, #3
 800247e:	f7ff fe6f 	bl	8002160 <NVIC_SetPriorityGrouping>

  /* Configure the system clock */
  SystemClock_Config();
 8002482:	f000 f8c9 	bl	8002618 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002486:	f7ff fe3f 	bl	8002108 <MX_GPIO_Init>
  MX_DMA_Init();
 800248a:	f7ff fe01 	bl	8002090 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800248e:	f001 f897 	bl	80035c0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8002492:	f7ff fd1f 	bl	8001ed4 <MX_ADC1_Init>
  MX_TIM2_Init();
 8002496:	f000 fccd 	bl	8002e34 <MX_TIM2_Init>
  USART2_RegisterCallback(proccesDmaData);
 800249a:	4859      	ldr	r0, [pc, #356]	; (8002600 <main+0x198>)
 800249c:	f001 f87e 	bl	800359c <USART2_RegisterCallback>

  	  	  	uint8_t tx1[] = "Buffer capacity: ";
 80024a0:	4b58      	ldr	r3, [pc, #352]	; (8002604 <main+0x19c>)
 80024a2:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 80024a6:	461d      	mov	r5, r3
 80024a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024ac:	682b      	ldr	r3, [r5, #0]
 80024ae:	8023      	strh	r3, [r4, #0]
    		uint8_t tx2[] = " bytes, occupied memory: ";
 80024b0:	4b55      	ldr	r3, [pc, #340]	; (8002608 <main+0x1a0>)
 80024b2:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 80024b6:	461d      	mov	r5, r3
 80024b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80024c0:	c403      	stmia	r4!, {r0, r1}
 80024c2:	8022      	strh	r2, [r4, #0]
    		uint8_t tx3[] = " bytes, load [in %]: ";
 80024c4:	4b51      	ldr	r3, [pc, #324]	; (800260c <main+0x1a4>)
 80024c6:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80024ca:	461d      	mov	r5, r3
 80024cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024d0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80024d4:	6020      	str	r0, [r4, #0]
 80024d6:	3404      	adds	r4, #4
 80024d8:	8021      	strh	r1, [r4, #0]
    		uint8_t tx4[] = "  %\n \r";
 80024da:	4a4d      	ldr	r2, [pc, #308]	; (8002610 <main+0x1a8>)
 80024dc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80024e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024e4:	6018      	str	r0, [r3, #0]
 80024e6:	3304      	adds	r3, #4
 80024e8:	8019      	strh	r1, [r3, #0]
 80024ea:	3302      	adds	r3, #2
 80024ec:	0c0a      	lsrs	r2, r1, #16
 80024ee:	701a      	strb	r2, [r3, #0]

    		while (1)
  {
    					USART2_CheckDmaReception();
 80024f0:	f001 f95e 	bl	80037b0 <USART2_CheckDmaReception>

    					int occupied = numOfOccupied();
 80024f4:	f001 f9d0 	bl	8003898 <numOfOccupied>
 80024f8:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
    					int capacity = sizeOfBuff();
 80024fc:	f001 f9d8 	bl	80038b0 <sizeOfBuff>
 8002500:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
    					float occupied1 = occupied;
 8002504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002508:	ee07 3a90 	vmov	s15, r3
 800250c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002510:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc
    					float percentage = occupied1/capacity*100.0;
 8002514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002518:	ee07 3a90 	vmov	s15, r3
 800251c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002520:	edd7 6a37 	vldr	s13, [r7, #220]	; 0xdc
 8002524:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002528:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8002614 <main+0x1ac>
 800252c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002530:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
    					uint8_t final[100];
    					uint8_t pomoc1[10],pomoc2[10],pomoc3[10];
    					memset(final,0,sizeof(final));
 8002534:	463b      	mov	r3, r7
 8002536:	2264      	movs	r2, #100	; 0x64
 8002538:	2100      	movs	r1, #0
 800253a:	4618      	mov	r0, r3
 800253c:	f001 fa60 	bl	8003a00 <memset>
    					itoa(capacity,pomoc1,10);
 8002540:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002544:	220a      	movs	r2, #10
 8002546:	4619      	mov	r1, r3
 8002548:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 800254c:	f001 fa56 	bl	80039fc <itoa>
    					strcpy(final,tx1);
 8002550:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8002554:	463b      	mov	r3, r7
 8002556:	4611      	mov	r1, r2
 8002558:	4618      	mov	r0, r3
 800255a:	f001 fa68 	bl	8003a2e <strcpy>
    					strcat(final, pomoc1);
 800255e:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8002562:	463b      	mov	r3, r7
 8002564:	4611      	mov	r1, r2
 8002566:	4618      	mov	r0, r3
 8002568:	f001 fa52 	bl	8003a10 <strcat>
    					itoa(occupied,pomoc2,10);
 800256c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002570:	220a      	movs	r2, #10
 8002572:	4619      	mov	r1, r3
 8002574:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8002578:	f001 fa40 	bl	80039fc <itoa>
    					strcat(final,tx2);
 800257c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002580:	463b      	mov	r3, r7
 8002582:	4611      	mov	r1, r2
 8002584:	4618      	mov	r0, r3
 8002586:	f001 fa43 	bl	8003a10 <strcat>
    					strcat(final, pomoc2);
 800258a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800258e:	463b      	mov	r3, r7
 8002590:	4611      	mov	r1, r2
 8002592:	4618      	mov	r0, r3
 8002594:	f001 fa3c 	bl	8003a10 <strcat>
    					strcat(final,tx3);
 8002598:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800259c:	463b      	mov	r3, r7
 800259e:	4611      	mov	r1, r2
 80025a0:	4618      	mov	r0, r3
 80025a2:	f001 fa35 	bl	8003a10 <strcat>
    					gcvt(percentage, 4, pomoc3);
 80025a6:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80025aa:	f7fd ff79 	bl	80004a0 <__aeabi_f2d>
 80025ae:	4604      	mov	r4, r0
 80025b0:	460d      	mov	r5, r1
 80025b2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80025b6:	4619      	mov	r1, r3
 80025b8:	2004      	movs	r0, #4
 80025ba:	ec45 4b10 	vmov	d0, r4, r5
 80025be:	f001 f9af 	bl	8003920 <gcvt>
    					strcat(final,pomoc3);
 80025c2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80025c6:	463b      	mov	r3, r7
 80025c8:	4611      	mov	r1, r2
 80025ca:	4618      	mov	r0, r3
 80025cc:	f001 fa20 	bl	8003a10 <strcat>
    					strcat(final,tx4);
 80025d0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80025d4:	463b      	mov	r3, r7
 80025d6:	4611      	mov	r1, r2
 80025d8:	4618      	mov	r0, r3
 80025da:	f001 fa19 	bl	8003a10 <strcat>

    				  USART2_PutBuffer(final, strlen(final));
 80025de:	463b      	mov	r3, r7
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fd fdf1 	bl	80001c8 <strlen>
 80025e6:	4603      	mov	r3, r0
 80025e8:	b2da      	uxtb	r2, r3
 80025ea:	463b      	mov	r3, r7
 80025ec:	4611      	mov	r1, r2
 80025ee:	4618      	mov	r0, r3
 80025f0:	f001 f8be 	bl	8003770 <USART2_PutBuffer>
    				  LL_mDelay(800);
 80025f4:	f44f 7048 	mov.w	r0, #800	; 0x320
 80025f8:	f7ff fb5e 	bl	8001cb8 <LL_mDelay>
  {
 80025fc:	e778      	b.n	80024f0 <main+0x88>
 80025fe:	bf00      	nop
 8002600:	080026a9 	.word	0x080026a9
 8002604:	080050f0 	.word	0x080050f0
 8002608:	08005104 	.word	0x08005104
 800260c:	08005120 	.word	0x08005120
 8002610:	08005138 	.word	0x08005138
 8002614:	42c80000 	.word	0x42c80000

08002618 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */

void SystemClock_Config(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 800261c:	2000      	movs	r0, #0
 800261e:	f7ff fee5 	bl	80023ec <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8002622:	f7ff fef7 	bl	8002414 <LL_FLASH_GetLatency>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <SystemClock_Config+0x18>
  {
  Error_Handler();
 800262c:	f000 f8ae 	bl	800278c <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 8002630:	f7ff fdba 	bl	80021a8 <LL_RCC_HSI_Enable>


  while(LL_RCC_HSI_IsReady() != 1)
 8002634:	bf00      	nop
 8002636:	f7ff fdc7 	bl	80021c8 <LL_RCC_HSI_IsReady>
 800263a:	4603      	mov	r3, r0
 800263c:	2b01      	cmp	r3, #1
 800263e:	d1fa      	bne.n	8002636 <SystemClock_Config+0x1e>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8002640:	2010      	movs	r0, #16
 8002642:	f7ff fdd3 	bl	80021ec <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI_DIV_2, LL_RCC_PLL_MUL_4);
 8002646:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800264a:	2000      	movs	r0, #0
 800264c:	f7ff fe7a 	bl	8002344 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8002650:	f7ff fe54 	bl	80022fc <LL_RCC_PLL_Enable>


  while(LL_RCC_PLL_IsReady() != 1)
 8002654:	bf00      	nop
 8002656:	f7ff fe61 	bl	800231c <LL_RCC_PLL_IsReady>
 800265a:	4603      	mov	r3, r0
 800265c:	2b01      	cmp	r3, #1
 800265e:	d1fa      	bne.n	8002656 <SystemClock_Config+0x3e>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8002660:	2000      	movs	r0, #0
 8002662:	f7ff fdfb 	bl	800225c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8002666:	2000      	movs	r0, #0
 8002668:	f7ff fe0c 	bl	8002284 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 800266c:	2000      	movs	r0, #0
 800266e:	f7ff fe1d 	bl	80022ac <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8002672:	2000      	movs	r0, #0
 8002674:	f7ff fdd0 	bl	8002218 <LL_RCC_SetSysClkSource>


  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8002678:	bf00      	nop
 800267a:	f7ff fde1 	bl	8002240 <LL_RCC_GetSysClkSource>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1fa      	bne.n	800267a <SystemClock_Config+0x62>
  {

  }
  LL_Init1msTick(8000000);
 8002684:	4807      	ldr	r0, [pc, #28]	; (80026a4 <SystemClock_Config+0x8c>)
 8002686:	f7ff fb09 	bl	8001c9c <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 800268a:	2004      	movs	r0, #4
 800268c:	f7ff fed0 	bl	8002430 <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 8002690:	4804      	ldr	r0, [pc, #16]	; (80026a4 <SystemClock_Config+0x8c>)
 8002692:	f7ff fb35 	bl	8001d00 <LL_SetSystemCoreClock>
  LL_RCC_SetADCClockSource(LL_RCC_ADC12_CLKSRC_PLL_DIV_1);
 8002696:	f44f 7080 	mov.w	r0, #256	; 0x100
 800269a:	f7ff fe1b 	bl	80022d4 <LL_RCC_SetADCClockSource>
}
 800269e:	bf00      	nop
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	007a1200 	.word	0x007a1200

080026a8 <proccesDmaData>:
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
  LL_SetSystemCoreClock(8000000);
}
*/
void proccesDmaData(uint8_t sign)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	71fb      	strb	r3, [r7, #7]
	/* Process received data */

		// type your algorithm here:


		if (start==0 && sign=='#'){				// zaciatok
 80026b2:	4b31      	ldr	r3, [pc, #196]	; (8002778 <proccesDmaData+0xd0>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d105      	bne.n	80026c6 <proccesDmaData+0x1e>
 80026ba:	79fb      	ldrb	r3, [r7, #7]
 80026bc:	2b23      	cmp	r3, #35	; 0x23
 80026be:	d102      	bne.n	80026c6 <proccesDmaData+0x1e>
					start=1;
 80026c0:	4b2d      	ldr	r3, [pc, #180]	; (8002778 <proccesDmaData+0xd0>)
 80026c2:	2201      	movs	r2, #1
 80026c4:	601a      	str	r2, [r3, #0]
		}

		if(start==1 && sign!=0)
 80026c6:	4b2c      	ldr	r3, [pc, #176]	; (8002778 <proccesDmaData+0xd0>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d11d      	bne.n	800270a <proccesDmaData+0x62>
 80026ce:	79fb      	ldrb	r3, [r7, #7]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d01a      	beq.n	800270a <proccesDmaData+0x62>
		{
			poc_prijatych++;
 80026d4:	4b29      	ldr	r3, [pc, #164]	; (800277c <proccesDmaData+0xd4>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	3301      	adds	r3, #1
 80026da:	4a28      	ldr	r2, [pc, #160]	; (800277c <proccesDmaData+0xd4>)
 80026dc:	6013      	str	r3, [r2, #0]

			if(sign>='A' && sign<='Z'){
 80026de:	79fb      	ldrb	r3, [r7, #7]
 80026e0:	2b40      	cmp	r3, #64	; 0x40
 80026e2:	d907      	bls.n	80026f4 <proccesDmaData+0x4c>
 80026e4:	79fb      	ldrb	r3, [r7, #7]
 80026e6:	2b5a      	cmp	r3, #90	; 0x5a
 80026e8:	d804      	bhi.n	80026f4 <proccesDmaData+0x4c>
				poc_velkych++;
 80026ea:	4b25      	ldr	r3, [pc, #148]	; (8002780 <proccesDmaData+0xd8>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	3301      	adds	r3, #1
 80026f0:	4a23      	ldr	r2, [pc, #140]	; (8002780 <proccesDmaData+0xd8>)
 80026f2:	6013      	str	r3, [r2, #0]
			}
			if(sign>='a' && sign<='z'){
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	2b60      	cmp	r3, #96	; 0x60
 80026f8:	d907      	bls.n	800270a <proccesDmaData+0x62>
 80026fa:	79fb      	ldrb	r3, [r7, #7]
 80026fc:	2b7a      	cmp	r3, #122	; 0x7a
 80026fe:	d804      	bhi.n	800270a <proccesDmaData+0x62>
				poc_malych++;
 8002700:	4b20      	ldr	r3, [pc, #128]	; (8002784 <proccesDmaData+0xdc>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	3301      	adds	r3, #1
 8002706:	4a1f      	ldr	r2, [pc, #124]	; (8002784 <proccesDmaData+0xdc>)
 8002708:	6013      	str	r3, [r2, #0]
			}
		}

		if (poc_prijatych==35 && start == 1){
 800270a:	4b1c      	ldr	r3, [pc, #112]	; (800277c <proccesDmaData+0xd4>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2b23      	cmp	r3, #35	; 0x23
 8002710:	d10f      	bne.n	8002732 <proccesDmaData+0x8a>
 8002712:	4b19      	ldr	r3, [pc, #100]	; (8002778 <proccesDmaData+0xd0>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d10b      	bne.n	8002732 <proccesDmaData+0x8a>
					start=0;
 800271a:	4b17      	ldr	r3, [pc, #92]	; (8002778 <proccesDmaData+0xd0>)
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
					poc_malych=0;
 8002720:	4b18      	ldr	r3, [pc, #96]	; (8002784 <proccesDmaData+0xdc>)
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
					poc_velkych=0;
 8002726:	4b16      	ldr	r3, [pc, #88]	; (8002780 <proccesDmaData+0xd8>)
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
					poc_prijatych=0;
 800272c:	4b13      	ldr	r3, [pc, #76]	; (800277c <proccesDmaData+0xd4>)
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]
		}

		if (start==1 && sign=='$'){				// konec
 8002732:	4b11      	ldr	r3, [pc, #68]	; (8002778 <proccesDmaData+0xd0>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d117      	bne.n	800276a <proccesDmaData+0xc2>
 800273a:	79fb      	ldrb	r3, [r7, #7]
 800273c:	2b24      	cmp	r3, #36	; 0x24
 800273e:	d114      	bne.n	800276a <proccesDmaData+0xc2>

					start=0;
 8002740:	4b0d      	ldr	r3, [pc, #52]	; (8002778 <proccesDmaData+0xd0>)
 8002742:	2200      	movs	r2, #0
 8002744:	601a      	str	r2, [r3, #0]

					nazov.capital_letter+=poc_velkych;
 8002746:	4b10      	ldr	r3, [pc, #64]	; (8002788 <proccesDmaData+0xe0>)
 8002748:	785a      	ldrb	r2, [r3, #1]
 800274a:	4b0d      	ldr	r3, [pc, #52]	; (8002780 <proccesDmaData+0xd8>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	b2db      	uxtb	r3, r3
 8002750:	4413      	add	r3, r2
 8002752:	b2da      	uxtb	r2, r3
 8002754:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <proccesDmaData+0xe0>)
 8002756:	705a      	strb	r2, [r3, #1]
					nazov.small_letter+=poc_malych;
 8002758:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <proccesDmaData+0xe0>)
 800275a:	781a      	ldrb	r2, [r3, #0]
 800275c:	4b09      	ldr	r3, [pc, #36]	; (8002784 <proccesDmaData+0xdc>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	b2db      	uxtb	r3, r3
 8002762:	4413      	add	r3, r2
 8002764:	b2da      	uxtb	r2, r3
 8002766:	4b08      	ldr	r3, [pc, #32]	; (8002788 <proccesDmaData+0xe0>)
 8002768:	701a      	strb	r2, [r3, #0]

				}

}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	20000084 	.word	0x20000084
 800277c:	20000088 	.word	0x20000088
 8002780:	20000090 	.word	0x20000090
 8002784:	2000008c 	.word	0x2000008c
 8002788:	200000a8 	.word	0x200000a8

0800278c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0

}
 8002790:	bf00      	nop
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
	...

0800279c <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	3b01      	subs	r3, #1
 80027aa:	4a0b      	ldr	r2, [pc, #44]	; (80027d8 <LL_DMA_DisableChannel+0x3c>)
 80027ac:	5cd3      	ldrb	r3, [r2, r3]
 80027ae:	461a      	mov	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4413      	add	r3, r2
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	3a01      	subs	r2, #1
 80027ba:	4907      	ldr	r1, [pc, #28]	; (80027d8 <LL_DMA_DisableChannel+0x3c>)
 80027bc:	5c8a      	ldrb	r2, [r1, r2]
 80027be:	4611      	mov	r1, r2
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	440a      	add	r2, r1
 80027c4:	f023 0301 	bic.w	r3, r3, #1
 80027c8:	6013      	str	r3, [r2, #0]
}
 80027ca:	bf00      	nop
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	08005140 	.word	0x08005140

080027dc <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027f0:	bf0c      	ite	eq
 80027f2:	2301      	moveq	r3, #1
 80027f4:	2300      	movne	r3, #0
 80027f6:	b2db      	uxtb	r3, r3
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002814:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002818:	bf0c      	ite	eq
 800281a:	2301      	moveq	r3, #1
 800281c:	2300      	movne	r3, #0
 800281e:	b2db      	uxtb	r3, r3
}
 8002820:	4618      	mov	r0, r3
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <LL_DMA_IsActiveFlag_HT6>:
  * @rmtoll ISR          HTIF6         LL_DMA_IsActiveFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800283c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002840:	bf0c      	ite	eq
 8002842:	2301      	moveq	r3, #1
 8002844:	2300      	movne	r3, #0
 8002846:	b2db      	uxtb	r3, r3
}
 8002848:	4618      	mov	r0, r3
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002862:	605a      	str	r2, [r3, #4]
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800287e:	605a      	str	r2, [r3, #4]
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <LL_DMA_ClearFlag_HT6>:
  * @rmtoll IFCR         CHTIF6        LL_DMA_ClearFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800289a:	605a      	str	r2, [r3, #4]
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	69db      	ldr	r3, [r3, #28]
 80028b4:	f003 0310 	and.w	r3, r3, #16
 80028b8:	2b10      	cmp	r3, #16
 80028ba:	bf0c      	ite	eq
 80028bc:	2301      	moveq	r3, #1
 80028be:	2300      	movne	r3, #0
 80028c0:	b2db      	uxtb	r3, r3
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b083      	sub	sp, #12
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC));
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	69db      	ldr	r3, [r3, #28]
 80028da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028de:	2b40      	cmp	r3, #64	; 0x40
 80028e0:	bf0c      	ite	eq
 80028e2:	2301      	moveq	r3, #1
 80028e4:	2300      	movne	r3, #0
 80028e6:	b2db      	uxtb	r3, r3
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2210      	movs	r2, #16
 8002900:	621a      	str	r2, [r3, #32]
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800290e:	b480      	push	{r7}
 8002910:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002912:	bf00      	nop
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002920:	e7fe      	b.n	8002920 <HardFault_Handler+0x4>

08002922 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002922:	b480      	push	{r7}
 8002924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002926:	e7fe      	b.n	8002926 <MemManage_Handler+0x4>

08002928 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800292c:	e7fe      	b.n	800292c <BusFault_Handler+0x4>

0800292e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800292e:	b480      	push	{r7}
 8002930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002932:	e7fe      	b.n	8002932 <UsageFault_Handler+0x4>

08002934 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002938:	bf00      	nop
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002942:	b480      	push	{r7}
 8002944:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002946:	bf00      	nop
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002954:	bf00      	nop
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800295e:	b480      	push	{r7}
 8002960:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002962:	bf00      	nop
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == SET)
 8002970:	480c      	ldr	r0, [pc, #48]	; (80029a4 <DMA1_Channel6_IRQHandler+0x38>)
 8002972:	f7ff ff33 	bl	80027dc <LL_DMA_IsActiveFlag_TC6>
 8002976:	4603      	mov	r3, r0
 8002978:	2b01      	cmp	r3, #1
 800297a:	d105      	bne.n	8002988 <DMA1_Channel6_IRQHandler+0x1c>
	{
		USART2_CheckDmaReception();
 800297c:	f000 ff18 	bl	80037b0 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_TC6(DMA1);
 8002980:	4808      	ldr	r0, [pc, #32]	; (80029a4 <DMA1_Channel6_IRQHandler+0x38>)
 8002982:	f7ff ff67 	bl	8002854 <LL_DMA_ClearFlag_TC6>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
	{
		USART2_CheckDmaReception();
		LL_DMA_ClearFlag_HT6(DMA1);
	}
}
 8002986:	e00a      	b.n	800299e <DMA1_Channel6_IRQHandler+0x32>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
 8002988:	4806      	ldr	r0, [pc, #24]	; (80029a4 <DMA1_Channel6_IRQHandler+0x38>)
 800298a:	f7ff ff4f 	bl	800282c <LL_DMA_IsActiveFlag_HT6>
 800298e:	4603      	mov	r3, r0
 8002990:	2b01      	cmp	r3, #1
 8002992:	d104      	bne.n	800299e <DMA1_Channel6_IRQHandler+0x32>
		USART2_CheckDmaReception();
 8002994:	f000 ff0c 	bl	80037b0 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_HT6(DMA1);
 8002998:	4802      	ldr	r0, [pc, #8]	; (80029a4 <DMA1_Channel6_IRQHandler+0x38>)
 800299a:	f7ff ff77 	bl	800288c <LL_DMA_ClearFlag_HT6>
}
 800299e:	bf00      	nop
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	40020000 	.word	0x40020000

080029a8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 80029ac:	480a      	ldr	r0, [pc, #40]	; (80029d8 <DMA1_Channel7_IRQHandler+0x30>)
 80029ae:	f7ff ff29 	bl	8002804 <LL_DMA_IsActiveFlag_TC7>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d10d      	bne.n	80029d4 <DMA1_Channel7_IRQHandler+0x2c>
	{
		LL_DMA_ClearFlag_TC7(DMA1);
 80029b8:	4807      	ldr	r0, [pc, #28]	; (80029d8 <DMA1_Channel7_IRQHandler+0x30>)
 80029ba:	f7ff ff59 	bl	8002870 <LL_DMA_ClearFlag_TC7>

		while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 80029be:	bf00      	nop
 80029c0:	4806      	ldr	r0, [pc, #24]	; (80029dc <DMA1_Channel7_IRQHandler+0x34>)
 80029c2:	f7ff ff84 	bl	80028ce <LL_USART_IsActiveFlag_TC>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0f9      	beq.n	80029c0 <DMA1_Channel7_IRQHandler+0x18>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 80029cc:	2107      	movs	r1, #7
 80029ce:	4802      	ldr	r0, [pc, #8]	; (80029d8 <DMA1_Channel7_IRQHandler+0x30>)
 80029d0:	f7ff fee4 	bl	800279c <LL_DMA_DisableChannel>
	}
}
 80029d4:	bf00      	nop
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40020000 	.word	0x40020000
 80029dc:	40004400 	.word	0x40004400

080029e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0

  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80029e4:	bf00      	nop
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
	...

080029f0 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_IDLE(USART2))
 80029f4:	4806      	ldr	r0, [pc, #24]	; (8002a10 <USART2_IRQHandler+0x20>)
 80029f6:	f7ff ff57 	bl	80028a8 <LL_USART_IsActiveFlag_IDLE>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d004      	beq.n	8002a0a <USART2_IRQHandler+0x1a>
	{
		USART2_CheckDmaReception();
 8002a00:	f000 fed6 	bl	80037b0 <USART2_CheckDmaReception>
		LL_USART_ClearFlag_IDLE(USART2);
 8002a04:	4802      	ldr	r0, [pc, #8]	; (8002a10 <USART2_IRQHandler+0x20>)
 8002a06:	f7ff ff75 	bl	80028f4 <LL_USART_ClearFlag_IDLE>
	}
}
 8002a0a:	bf00      	nop
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40004400 	.word	0x40004400

08002a14 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002a1c:	4b11      	ldr	r3, [pc, #68]	; (8002a64 <_sbrk+0x50>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d102      	bne.n	8002a2a <_sbrk+0x16>
		heap_end = &end;
 8002a24:	4b0f      	ldr	r3, [pc, #60]	; (8002a64 <_sbrk+0x50>)
 8002a26:	4a10      	ldr	r2, [pc, #64]	; (8002a68 <_sbrk+0x54>)
 8002a28:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002a2a:	4b0e      	ldr	r3, [pc, #56]	; (8002a64 <_sbrk+0x50>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002a30:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <_sbrk+0x50>)
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4413      	add	r3, r2
 8002a38:	466a      	mov	r2, sp
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d907      	bls.n	8002a4e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002a3e:	f000 ff9b 	bl	8003978 <__errno>
 8002a42:	4602      	mov	r2, r0
 8002a44:	230c      	movs	r3, #12
 8002a46:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002a48:	f04f 33ff 	mov.w	r3, #4294967295
 8002a4c:	e006      	b.n	8002a5c <_sbrk+0x48>
	}

	heap_end += incr;
 8002a4e:	4b05      	ldr	r3, [pc, #20]	; (8002a64 <_sbrk+0x50>)
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4413      	add	r3, r2
 8002a56:	4a03      	ldr	r2, [pc, #12]	; (8002a64 <_sbrk+0x50>)
 8002a58:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	20000094 	.word	0x20000094
 8002a68:	200001b8 	.word	0x200001b8

08002a6c <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a70:	4b1f      	ldr	r3, [pc, #124]	; (8002af0 <SystemInit+0x84>)
 8002a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a76:	4a1e      	ldr	r2, [pc, #120]	; (8002af0 <SystemInit+0x84>)
 8002a78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002a80:	4b1c      	ldr	r3, [pc, #112]	; (8002af4 <SystemInit+0x88>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a1b      	ldr	r2, [pc, #108]	; (8002af4 <SystemInit+0x88>)
 8002a86:	f043 0301 	orr.w	r3, r3, #1
 8002a8a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8002a8c:	4b19      	ldr	r3, [pc, #100]	; (8002af4 <SystemInit+0x88>)
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	4918      	ldr	r1, [pc, #96]	; (8002af4 <SystemInit+0x88>)
 8002a92:	4b19      	ldr	r3, [pc, #100]	; (8002af8 <SystemInit+0x8c>)
 8002a94:	4013      	ands	r3, r2
 8002a96:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002a98:	4b16      	ldr	r3, [pc, #88]	; (8002af4 <SystemInit+0x88>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a15      	ldr	r2, [pc, #84]	; (8002af4 <SystemInit+0x88>)
 8002a9e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aa6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002aa8:	4b12      	ldr	r3, [pc, #72]	; (8002af4 <SystemInit+0x88>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a11      	ldr	r2, [pc, #68]	; (8002af4 <SystemInit+0x88>)
 8002aae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ab2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002ab4:	4b0f      	ldr	r3, [pc, #60]	; (8002af4 <SystemInit+0x88>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	4a0e      	ldr	r2, [pc, #56]	; (8002af4 <SystemInit+0x88>)
 8002aba:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002abe:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8002ac0:	4b0c      	ldr	r3, [pc, #48]	; (8002af4 <SystemInit+0x88>)
 8002ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac4:	4a0b      	ldr	r2, [pc, #44]	; (8002af4 <SystemInit+0x88>)
 8002ac6:	f023 030f 	bic.w	r3, r3, #15
 8002aca:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002acc:	4b09      	ldr	r3, [pc, #36]	; (8002af4 <SystemInit+0x88>)
 8002ace:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ad0:	4908      	ldr	r1, [pc, #32]	; (8002af4 <SystemInit+0x88>)
 8002ad2:	4b0a      	ldr	r3, [pc, #40]	; (8002afc <SystemInit+0x90>)
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002ad8:	4b06      	ldr	r3, [pc, #24]	; (8002af4 <SystemInit+0x88>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ade:	4b04      	ldr	r3, [pc, #16]	; (8002af0 <SystemInit+0x84>)
 8002ae0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ae4:	609a      	str	r2, [r3, #8]
#endif
}
 8002ae6:	bf00      	nop
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	e000ed00 	.word	0xe000ed00
 8002af4:	40021000 	.word	0x40021000
 8002af8:	f87fc00c 	.word	0xf87fc00c
 8002afc:	ff00fccc 	.word	0xff00fccc

08002b00 <NVIC_GetPriorityGrouping>:
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b04:	4b04      	ldr	r3, [pc, #16]	; (8002b18 <NVIC_GetPriorityGrouping+0x18>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	0a1b      	lsrs	r3, r3, #8
 8002b0a:	f003 0307 	and.w	r3, r3, #7
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	e000ed00 	.word	0xe000ed00

08002b1c <NVIC_EnableIRQ>:
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002b26:	79fb      	ldrb	r3, [r7, #7]
 8002b28:	f003 021f 	and.w	r2, r3, #31
 8002b2c:	4907      	ldr	r1, [pc, #28]	; (8002b4c <NVIC_EnableIRQ+0x30>)
 8002b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b32:	095b      	lsrs	r3, r3, #5
 8002b34:	2001      	movs	r0, #1
 8002b36:	fa00 f202 	lsl.w	r2, r0, r2
 8002b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	e000e100 	.word	0xe000e100

08002b50 <NVIC_SetPriority>:
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	4603      	mov	r3, r0
 8002b58:	6039      	str	r1, [r7, #0]
 8002b5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	da0b      	bge.n	8002b7c <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	b2da      	uxtb	r2, r3
 8002b68:	490c      	ldr	r1, [pc, #48]	; (8002b9c <NVIC_SetPriority+0x4c>)
 8002b6a:	79fb      	ldrb	r3, [r7, #7]
 8002b6c:	f003 030f 	and.w	r3, r3, #15
 8002b70:	3b04      	subs	r3, #4
 8002b72:	0112      	lsls	r2, r2, #4
 8002b74:	b2d2      	uxtb	r2, r2
 8002b76:	440b      	add	r3, r1
 8002b78:	761a      	strb	r2, [r3, #24]
}
 8002b7a:	e009      	b.n	8002b90 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	b2da      	uxtb	r2, r3
 8002b80:	4907      	ldr	r1, [pc, #28]	; (8002ba0 <NVIC_SetPriority+0x50>)
 8002b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b86:	0112      	lsls	r2, r2, #4
 8002b88:	b2d2      	uxtb	r2, r2
 8002b8a:	440b      	add	r3, r1
 8002b8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	e000ed00 	.word	0xe000ed00
 8002ba0:	e000e100 	.word	0xe000e100

08002ba4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b089      	sub	sp, #36	; 0x24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f003 0307 	and.w	r3, r3, #7
 8002bb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	f1c3 0307 	rsb	r3, r3, #7
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	bf28      	it	cs
 8002bc2:	2304      	movcs	r3, #4
 8002bc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	3304      	adds	r3, #4
 8002bca:	2b06      	cmp	r3, #6
 8002bcc:	d902      	bls.n	8002bd4 <NVIC_EncodePriority+0x30>
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	3b03      	subs	r3, #3
 8002bd2:	e000      	b.n	8002bd6 <NVIC_EncodePriority+0x32>
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	43da      	mvns	r2, r3
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	401a      	ands	r2, r3
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bec:	f04f 31ff 	mov.w	r1, #4294967295
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf6:	43d9      	mvns	r1, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bfc:	4313      	orrs	r3, r2
         );
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3724      	adds	r7, #36	; 0x24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
	...

08002c0c <LL_AHB1_GRP1_EnableClock>:
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8002c14:	4b08      	ldr	r3, [pc, #32]	; (8002c38 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002c16:	695a      	ldr	r2, [r3, #20]
 8002c18:	4907      	ldr	r1, [pc, #28]	; (8002c38 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002c20:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002c22:	695a      	ldr	r2, [r3, #20]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4013      	ands	r3, r2
 8002c28:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
}
 8002c2c:	bf00      	nop
 8002c2e:	3714      	adds	r7, #20
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	40021000 	.word	0x40021000

08002c3c <LL_APB1_GRP1_EnableClock>:
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002c44:	4b08      	ldr	r3, [pc, #32]	; (8002c68 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002c46:	69da      	ldr	r2, [r3, #28]
 8002c48:	4907      	ldr	r1, [pc, #28]	; (8002c68 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002c50:	4b05      	ldr	r3, [pc, #20]	; (8002c68 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002c52:	69da      	ldr	r2, [r3, #28]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4013      	ands	r3, r2
 8002c58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
}
 8002c5c:	bf00      	nop
 8002c5e:	3714      	adds	r7, #20
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	40021000 	.word	0x40021000

08002c6c <LL_TIM_DisableARRPreload>:
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	601a      	str	r2, [r3, #0]
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <LL_TIM_OC_DisableFast>:
{
 8002c8c:	b4b0      	push	{r4, r5, r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d028      	beq.n	8002cee <LL_TIM_OC_DisableFast+0x62>
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	2b04      	cmp	r3, #4
 8002ca0:	d023      	beq.n	8002cea <LL_TIM_OC_DisableFast+0x5e>
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	2b10      	cmp	r3, #16
 8002ca6:	d01e      	beq.n	8002ce6 <LL_TIM_OC_DisableFast+0x5a>
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	2b40      	cmp	r3, #64	; 0x40
 8002cac:	d019      	beq.n	8002ce2 <LL_TIM_OC_DisableFast+0x56>
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cb4:	d013      	beq.n	8002cde <LL_TIM_OC_DisableFast+0x52>
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cbc:	d00d      	beq.n	8002cda <LL_TIM_OC_DisableFast+0x4e>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cc4:	d007      	beq.n	8002cd6 <LL_TIM_OC_DisableFast+0x4a>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ccc:	d101      	bne.n	8002cd2 <LL_TIM_OC_DisableFast+0x46>
 8002cce:	2307      	movs	r3, #7
 8002cd0:	e00e      	b.n	8002cf0 <LL_TIM_OC_DisableFast+0x64>
 8002cd2:	2308      	movs	r3, #8
 8002cd4:	e00c      	b.n	8002cf0 <LL_TIM_OC_DisableFast+0x64>
 8002cd6:	2306      	movs	r3, #6
 8002cd8:	e00a      	b.n	8002cf0 <LL_TIM_OC_DisableFast+0x64>
 8002cda:	2305      	movs	r3, #5
 8002cdc:	e008      	b.n	8002cf0 <LL_TIM_OC_DisableFast+0x64>
 8002cde:	2304      	movs	r3, #4
 8002ce0:	e006      	b.n	8002cf0 <LL_TIM_OC_DisableFast+0x64>
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e004      	b.n	8002cf0 <LL_TIM_OC_DisableFast+0x64>
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	e002      	b.n	8002cf0 <LL_TIM_OC_DisableFast+0x64>
 8002cea:	2301      	movs	r3, #1
 8002cec:	e000      	b.n	8002cf0 <LL_TIM_OC_DisableFast+0x64>
 8002cee:	2300      	movs	r3, #0
 8002cf0:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	3318      	adds	r3, #24
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	4629      	mov	r1, r5
 8002cfa:	4b09      	ldr	r3, [pc, #36]	; (8002d20 <LL_TIM_OC_DisableFast+0x94>)
 8002cfc:	5c5b      	ldrb	r3, [r3, r1]
 8002cfe:	4413      	add	r3, r2
 8002d00:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8002d02:	6822      	ldr	r2, [r4, #0]
 8002d04:	4629      	mov	r1, r5
 8002d06:	4b07      	ldr	r3, [pc, #28]	; (8002d24 <LL_TIM_OC_DisableFast+0x98>)
 8002d08:	5c5b      	ldrb	r3, [r3, r1]
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	2304      	movs	r3, #4
 8002d0e:	408b      	lsls	r3, r1
 8002d10:	43db      	mvns	r3, r3
 8002d12:	4013      	ands	r3, r2
 8002d14:	6023      	str	r3, [r4, #0]
}
 8002d16:	bf00      	nop
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bcb0      	pop	{r4, r5, r7}
 8002d1e:	4770      	bx	lr
 8002d20:	08005160 	.word	0x08005160
 8002d24:	0800516c 	.word	0x0800516c

08002d28 <LL_TIM_OC_EnablePreload>:
{
 8002d28:	b4b0      	push	{r4, r5, r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d028      	beq.n	8002d8a <LL_TIM_OC_EnablePreload+0x62>
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	d023      	beq.n	8002d86 <LL_TIM_OC_EnablePreload+0x5e>
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	2b10      	cmp	r3, #16
 8002d42:	d01e      	beq.n	8002d82 <LL_TIM_OC_EnablePreload+0x5a>
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	2b40      	cmp	r3, #64	; 0x40
 8002d48:	d019      	beq.n	8002d7e <LL_TIM_OC_EnablePreload+0x56>
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d50:	d013      	beq.n	8002d7a <LL_TIM_OC_EnablePreload+0x52>
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d58:	d00d      	beq.n	8002d76 <LL_TIM_OC_EnablePreload+0x4e>
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d60:	d007      	beq.n	8002d72 <LL_TIM_OC_EnablePreload+0x4a>
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d68:	d101      	bne.n	8002d6e <LL_TIM_OC_EnablePreload+0x46>
 8002d6a:	2307      	movs	r3, #7
 8002d6c:	e00e      	b.n	8002d8c <LL_TIM_OC_EnablePreload+0x64>
 8002d6e:	2308      	movs	r3, #8
 8002d70:	e00c      	b.n	8002d8c <LL_TIM_OC_EnablePreload+0x64>
 8002d72:	2306      	movs	r3, #6
 8002d74:	e00a      	b.n	8002d8c <LL_TIM_OC_EnablePreload+0x64>
 8002d76:	2305      	movs	r3, #5
 8002d78:	e008      	b.n	8002d8c <LL_TIM_OC_EnablePreload+0x64>
 8002d7a:	2304      	movs	r3, #4
 8002d7c:	e006      	b.n	8002d8c <LL_TIM_OC_EnablePreload+0x64>
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e004      	b.n	8002d8c <LL_TIM_OC_EnablePreload+0x64>
 8002d82:	2302      	movs	r3, #2
 8002d84:	e002      	b.n	8002d8c <LL_TIM_OC_EnablePreload+0x64>
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <LL_TIM_OC_EnablePreload+0x64>
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	3318      	adds	r3, #24
 8002d92:	461a      	mov	r2, r3
 8002d94:	4629      	mov	r1, r5
 8002d96:	4b09      	ldr	r3, [pc, #36]	; (8002dbc <LL_TIM_OC_EnablePreload+0x94>)
 8002d98:	5c5b      	ldrb	r3, [r3, r1]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8002d9e:	6822      	ldr	r2, [r4, #0]
 8002da0:	4629      	mov	r1, r5
 8002da2:	4b07      	ldr	r3, [pc, #28]	; (8002dc0 <LL_TIM_OC_EnablePreload+0x98>)
 8002da4:	5c5b      	ldrb	r3, [r3, r1]
 8002da6:	4619      	mov	r1, r3
 8002da8:	2308      	movs	r3, #8
 8002daa:	408b      	lsls	r3, r1
 8002dac:	4313      	orrs	r3, r2
 8002dae:	6023      	str	r3, [r4, #0]
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bcb0      	pop	{r4, r5, r7}
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	08005160 	.word	0x08005160
 8002dc0:	0800516c 	.word	0x0800516c

08002dc4 <LL_TIM_SetClockSource>:
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8002dd6:	f023 0307 	bic.w	r3, r3, #7
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	609a      	str	r2, [r3, #8]
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <LL_TIM_SetTriggerOutput>:
{
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
 8002df6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	431a      	orrs	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	605a      	str	r2, [r3, #4]
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <LL_TIM_DisableMasterSlaveMode>:
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	609a      	str	r2, [r3, #8]
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b094      	sub	sp, #80	; 0x50
 8002e38:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002e3a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e3e:	2200      	movs	r2, #0
 8002e40:	601a      	str	r2, [r3, #0]
 8002e42:	605a      	str	r2, [r3, #4]
 8002e44:	609a      	str	r2, [r3, #8]
 8002e46:	60da      	str	r2, [r3, #12]
 8002e48:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002e4a:	f107 031c 	add.w	r3, r7, #28
 8002e4e:	2220      	movs	r2, #32
 8002e50:	2100      	movs	r1, #0
 8002e52:	4618      	mov	r0, r3
 8002e54:	f000 fdd4 	bl	8003a00 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e58:	1d3b      	adds	r3, r7, #4
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	601a      	str	r2, [r3, #0]
 8002e5e:	605a      	str	r2, [r3, #4]
 8002e60:	609a      	str	r2, [r3, #8]
 8002e62:	60da      	str	r2, [r3, #12]
 8002e64:	611a      	str	r2, [r3, #16]
 8002e66:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8002e68:	2001      	movs	r0, #1
 8002e6a:	f7ff fee7 	bl	8002c3c <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002e6e:	f7ff fe47 	bl	8002b00 <NVIC_GetPriorityGrouping>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2200      	movs	r2, #0
 8002e76:	2100      	movs	r1, #0
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff fe93 	bl	8002ba4 <NVIC_EncodePriority>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	4619      	mov	r1, r3
 8002e82:	201c      	movs	r0, #28
 8002e84:	f7ff fe64 	bl	8002b50 <NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8002e88:	201c      	movs	r0, #28
 8002e8a:	f7ff fe47 	bl	8002b1c <NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 0;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002e92:	2300      	movs	r3, #0
 8002e94:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 0;
 8002e96:	2300      	movs	r3, #0
 8002e98:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8002e9e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002ea8:	f7fe fa8c 	bl	80013c4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8002eac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002eb0:	f7ff fedc 	bl	8002c6c <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002eba:	f7ff ff83 	bl	8002dc4 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002ec4:	f7ff ff30 	bl	8002d28 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002ec8:	2360      	movs	r3, #96	; 0x60
 8002eca:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002edc:	f107 031c 	add.w	r3, r7, #28
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002ee8:	f7fe fae0 	bl	80014ac <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8002eec:	2101      	movs	r1, #1
 8002eee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002ef2:	f7ff fecb 	bl	8002c8c <LL_TIM_OC_DisableFast>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002efa:	2300      	movs	r3, #0
 8002efc:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002efe:	2300      	movs	r3, #0
 8002f00:	627b      	str	r3, [r7, #36]	; 0x24
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8002f02:	f107 031c 	add.w	r3, r7, #28
 8002f06:	461a      	mov	r2, r3
 8002f08:	2110      	movs	r1, #16
 8002f0a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002f0e:	f7fe facd 	bl	80014ac <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH2);
 8002f12:	2110      	movs	r1, #16
 8002f14:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002f18:	f7ff feb8 	bl	8002c8c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002f22:	f7ff ff64 	bl	8002dee <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8002f26:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002f2a:	f7ff ff73 	bl	8002e14 <LL_TIM_DisableMasterSlaveMode>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002f2e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002f32:	f7ff fe6b 	bl	8002c0c <LL_AHB1_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8002f36:	2320      	movs	r3, #32
 8002f38:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002f42:	2300      	movs	r3, #0
 8002f44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002f46:	2300      	movs	r3, #0
 8002f48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f4e:	1d3b      	adds	r3, r7, #4
 8002f50:	4619      	mov	r1, r3
 8002f52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f56:	f7fd ff8e 	bl	8000e76 <LL_GPIO_Init>

}
 8002f5a:	bf00      	nop
 8002f5c:	3750      	adds	r7, #80	; 0x50
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
	...

08002f64 <NVIC_EnableIRQ>:
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002f6e:	79fb      	ldrb	r3, [r7, #7]
 8002f70:	f003 021f 	and.w	r2, r3, #31
 8002f74:	4907      	ldr	r1, [pc, #28]	; (8002f94 <NVIC_EnableIRQ+0x30>)
 8002f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7a:	095b      	lsrs	r3, r3, #5
 8002f7c:	2001      	movs	r0, #1
 8002f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	e000e100 	.word	0xe000e100

08002f98 <NVIC_SetPriority>:
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	6039      	str	r1, [r7, #0]
 8002fa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	da0b      	bge.n	8002fc4 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	b2da      	uxtb	r2, r3
 8002fb0:	490c      	ldr	r1, [pc, #48]	; (8002fe4 <NVIC_SetPriority+0x4c>)
 8002fb2:	79fb      	ldrb	r3, [r7, #7]
 8002fb4:	f003 030f 	and.w	r3, r3, #15
 8002fb8:	3b04      	subs	r3, #4
 8002fba:	0112      	lsls	r2, r2, #4
 8002fbc:	b2d2      	uxtb	r2, r2
 8002fbe:	440b      	add	r3, r1
 8002fc0:	761a      	strb	r2, [r3, #24]
}
 8002fc2:	e009      	b.n	8002fd8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	b2da      	uxtb	r2, r3
 8002fc8:	4907      	ldr	r1, [pc, #28]	; (8002fe8 <NVIC_SetPriority+0x50>)
 8002fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fce:	0112      	lsls	r2, r2, #4
 8002fd0:	b2d2      	uxtb	r2, r2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr
 8002fe4:	e000ed00 	.word	0xe000ed00
 8002fe8:	e000e100 	.word	0xe000e100

08002fec <LL_DMA_EnableChannel>:
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	4a0b      	ldr	r2, [pc, #44]	; (8003028 <LL_DMA_EnableChannel+0x3c>)
 8002ffc:	5cd3      	ldrb	r3, [r2, r3]
 8002ffe:	461a      	mov	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4413      	add	r3, r2
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	3a01      	subs	r2, #1
 800300a:	4907      	ldr	r1, [pc, #28]	; (8003028 <LL_DMA_EnableChannel+0x3c>)
 800300c:	5c8a      	ldrb	r2, [r1, r2]
 800300e:	4611      	mov	r1, r2
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	440a      	add	r2, r1
 8003014:	f043 0301 	orr.w	r3, r3, #1
 8003018:	6013      	str	r3, [r2, #0]
}
 800301a:	bf00      	nop
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	08005178 	.word	0x08005178

0800302c <LL_DMA_DisableChannel>:
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	3b01      	subs	r3, #1
 800303a:	4a0b      	ldr	r2, [pc, #44]	; (8003068 <LL_DMA_DisableChannel+0x3c>)
 800303c:	5cd3      	ldrb	r3, [r2, r3]
 800303e:	461a      	mov	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4413      	add	r3, r2
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	3a01      	subs	r2, #1
 800304a:	4907      	ldr	r1, [pc, #28]	; (8003068 <LL_DMA_DisableChannel+0x3c>)
 800304c:	5c8a      	ldrb	r2, [r1, r2]
 800304e:	4611      	mov	r1, r2
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	440a      	add	r2, r1
 8003054:	f023 0301 	bic.w	r3, r3, #1
 8003058:	6013      	str	r3, [r2, #0]
}
 800305a:	bf00      	nop
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	08005178 	.word	0x08005178

0800306c <LL_DMA_SetDataTransferDirection>:
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	3b01      	subs	r3, #1
 800307c:	4a0d      	ldr	r2, [pc, #52]	; (80030b4 <LL_DMA_SetDataTransferDirection+0x48>)
 800307e:	5cd3      	ldrb	r3, [r2, r3]
 8003080:	461a      	mov	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	4413      	add	r3, r2
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800308c:	f023 0310 	bic.w	r3, r3, #16
 8003090:	68ba      	ldr	r2, [r7, #8]
 8003092:	3a01      	subs	r2, #1
 8003094:	4907      	ldr	r1, [pc, #28]	; (80030b4 <LL_DMA_SetDataTransferDirection+0x48>)
 8003096:	5c8a      	ldrb	r2, [r1, r2]
 8003098:	4611      	mov	r1, r2
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	440a      	add	r2, r1
 800309e:	4611      	mov	r1, r2
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	600b      	str	r3, [r1, #0]
}
 80030a6:	bf00      	nop
 80030a8:	3714      	adds	r7, #20
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	08005178 	.word	0x08005178

080030b8 <LL_DMA_GetDataTransferDirection>:
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	3b01      	subs	r3, #1
 80030c6:	4a07      	ldr	r2, [pc, #28]	; (80030e4 <LL_DMA_GetDataTransferDirection+0x2c>)
 80030c8:	5cd3      	ldrb	r3, [r2, r3]
 80030ca:	461a      	mov	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4413      	add	r3, r2
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	f244 0310 	movw	r3, #16400	; 0x4010
 80030d6:	4013      	ands	r3, r2
}
 80030d8:	4618      	mov	r0, r3
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	08005178 	.word	0x08005178

080030e8 <LL_DMA_SetMode>:
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	3b01      	subs	r3, #1
 80030f8:	4a0c      	ldr	r2, [pc, #48]	; (800312c <LL_DMA_SetMode+0x44>)
 80030fa:	5cd3      	ldrb	r3, [r2, r3]
 80030fc:	461a      	mov	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	4413      	add	r3, r2
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f023 0220 	bic.w	r2, r3, #32
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	3b01      	subs	r3, #1
 800310c:	4907      	ldr	r1, [pc, #28]	; (800312c <LL_DMA_SetMode+0x44>)
 800310e:	5ccb      	ldrb	r3, [r1, r3]
 8003110:	4619      	mov	r1, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	440b      	add	r3, r1
 8003116:	4619      	mov	r1, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4313      	orrs	r3, r2
 800311c:	600b      	str	r3, [r1, #0]
}
 800311e:	bf00      	nop
 8003120:	3714      	adds	r7, #20
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	08005178 	.word	0x08005178

08003130 <LL_DMA_SetPeriphIncMode>:
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	3b01      	subs	r3, #1
 8003140:	4a0c      	ldr	r2, [pc, #48]	; (8003174 <LL_DMA_SetPeriphIncMode+0x44>)
 8003142:	5cd3      	ldrb	r3, [r2, r3]
 8003144:	461a      	mov	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	4413      	add	r3, r2
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	3b01      	subs	r3, #1
 8003154:	4907      	ldr	r1, [pc, #28]	; (8003174 <LL_DMA_SetPeriphIncMode+0x44>)
 8003156:	5ccb      	ldrb	r3, [r1, r3]
 8003158:	4619      	mov	r1, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	440b      	add	r3, r1
 800315e:	4619      	mov	r1, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4313      	orrs	r3, r2
 8003164:	600b      	str	r3, [r1, #0]
}
 8003166:	bf00      	nop
 8003168:	3714      	adds	r7, #20
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	08005178 	.word	0x08005178

08003178 <LL_DMA_SetMemoryIncMode>:
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	3b01      	subs	r3, #1
 8003188:	4a0c      	ldr	r2, [pc, #48]	; (80031bc <LL_DMA_SetMemoryIncMode+0x44>)
 800318a:	5cd3      	ldrb	r3, [r2, r3]
 800318c:	461a      	mov	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	4413      	add	r3, r2
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	3b01      	subs	r3, #1
 800319c:	4907      	ldr	r1, [pc, #28]	; (80031bc <LL_DMA_SetMemoryIncMode+0x44>)
 800319e:	5ccb      	ldrb	r3, [r1, r3]
 80031a0:	4619      	mov	r1, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	440b      	add	r3, r1
 80031a6:	4619      	mov	r1, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	600b      	str	r3, [r1, #0]
}
 80031ae:	bf00      	nop
 80031b0:	3714      	adds	r7, #20
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	08005178 	.word	0x08005178

080031c0 <LL_DMA_SetPeriphSize>:
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	3b01      	subs	r3, #1
 80031d0:	4a0c      	ldr	r2, [pc, #48]	; (8003204 <LL_DMA_SetPeriphSize+0x44>)
 80031d2:	5cd3      	ldrb	r3, [r2, r3]
 80031d4:	461a      	mov	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	4413      	add	r3, r2
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	3b01      	subs	r3, #1
 80031e4:	4907      	ldr	r1, [pc, #28]	; (8003204 <LL_DMA_SetPeriphSize+0x44>)
 80031e6:	5ccb      	ldrb	r3, [r1, r3]
 80031e8:	4619      	mov	r1, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	440b      	add	r3, r1
 80031ee:	4619      	mov	r1, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	600b      	str	r3, [r1, #0]
}
 80031f6:	bf00      	nop
 80031f8:	3714      	adds	r7, #20
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	08005178 	.word	0x08005178

08003208 <LL_DMA_SetMemorySize>:
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	3b01      	subs	r3, #1
 8003218:	4a0c      	ldr	r2, [pc, #48]	; (800324c <LL_DMA_SetMemorySize+0x44>)
 800321a:	5cd3      	ldrb	r3, [r2, r3]
 800321c:	461a      	mov	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	4413      	add	r3, r2
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	3b01      	subs	r3, #1
 800322c:	4907      	ldr	r1, [pc, #28]	; (800324c <LL_DMA_SetMemorySize+0x44>)
 800322e:	5ccb      	ldrb	r3, [r1, r3]
 8003230:	4619      	mov	r1, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	440b      	add	r3, r1
 8003236:	4619      	mov	r1, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4313      	orrs	r3, r2
 800323c:	600b      	str	r3, [r1, #0]
}
 800323e:	bf00      	nop
 8003240:	3714      	adds	r7, #20
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	08005178 	.word	0x08005178

08003250 <LL_DMA_SetChannelPriorityLevel>:
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	3b01      	subs	r3, #1
 8003260:	4a0c      	ldr	r2, [pc, #48]	; (8003294 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8003262:	5cd3      	ldrb	r3, [r2, r3]
 8003264:	461a      	mov	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	4413      	add	r3, r2
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	3b01      	subs	r3, #1
 8003274:	4907      	ldr	r1, [pc, #28]	; (8003294 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8003276:	5ccb      	ldrb	r3, [r1, r3]
 8003278:	4619      	mov	r1, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	440b      	add	r3, r1
 800327e:	4619      	mov	r1, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4313      	orrs	r3, r2
 8003284:	600b      	str	r3, [r1, #0]
}
 8003286:	bf00      	nop
 8003288:	3714      	adds	r7, #20
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	08005178 	.word	0x08005178

08003298 <LL_DMA_SetDataLength>:
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	3b01      	subs	r3, #1
 80032a8:	4a0c      	ldr	r2, [pc, #48]	; (80032dc <LL_DMA_SetDataLength+0x44>)
 80032aa:	5cd3      	ldrb	r3, [r2, r3]
 80032ac:	461a      	mov	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	4413      	add	r3, r2
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	0c1b      	lsrs	r3, r3, #16
 80032b6:	041b      	lsls	r3, r3, #16
 80032b8:	68ba      	ldr	r2, [r7, #8]
 80032ba:	3a01      	subs	r2, #1
 80032bc:	4907      	ldr	r1, [pc, #28]	; (80032dc <LL_DMA_SetDataLength+0x44>)
 80032be:	5c8a      	ldrb	r2, [r1, r2]
 80032c0:	4611      	mov	r1, r2
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	440a      	add	r2, r1
 80032c6:	4611      	mov	r1, r2
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	604b      	str	r3, [r1, #4]
}
 80032ce:	bf00      	nop
 80032d0:	3714      	adds	r7, #20
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	08005178 	.word	0x08005178

080032e0 <LL_DMA_GetDataLength>:
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	3b01      	subs	r3, #1
 80032ee:	4a06      	ldr	r2, [pc, #24]	; (8003308 <LL_DMA_GetDataLength+0x28>)
 80032f0:	5cd3      	ldrb	r3, [r2, r3]
 80032f2:	461a      	mov	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4413      	add	r3, r2
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	b29b      	uxth	r3, r3
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	08005178 	.word	0x08005178

0800330c <LL_DMA_ConfigAddresses>:
{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
 8003318:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	2b10      	cmp	r3, #16
 800331e:	d114      	bne.n	800334a <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	3b01      	subs	r3, #1
 8003324:	4a16      	ldr	r2, [pc, #88]	; (8003380 <LL_DMA_ConfigAddresses+0x74>)
 8003326:	5cd3      	ldrb	r3, [r2, r3]
 8003328:	461a      	mov	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	4413      	add	r3, r2
 800332e:	461a      	mov	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	3b01      	subs	r3, #1
 8003338:	4a11      	ldr	r2, [pc, #68]	; (8003380 <LL_DMA_ConfigAddresses+0x74>)
 800333a:	5cd3      	ldrb	r3, [r2, r3]
 800333c:	461a      	mov	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	4413      	add	r3, r2
 8003342:	461a      	mov	r2, r3
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	6093      	str	r3, [r2, #8]
}
 8003348:	e013      	b.n	8003372 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	3b01      	subs	r3, #1
 800334e:	4a0c      	ldr	r2, [pc, #48]	; (8003380 <LL_DMA_ConfigAddresses+0x74>)
 8003350:	5cd3      	ldrb	r3, [r2, r3]
 8003352:	461a      	mov	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	4413      	add	r3, r2
 8003358:	461a      	mov	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	3b01      	subs	r3, #1
 8003362:	4a07      	ldr	r2, [pc, #28]	; (8003380 <LL_DMA_ConfigAddresses+0x74>)
 8003364:	5cd3      	ldrb	r3, [r2, r3]
 8003366:	461a      	mov	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4413      	add	r3, r2
 800336c:	461a      	mov	r2, r3
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	60d3      	str	r3, [r2, #12]
}
 8003372:	bf00      	nop
 8003374:	3714      	adds	r7, #20
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	08005178 	.word	0x08005178

08003384 <LL_DMA_SetMemoryAddress>:
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	3b01      	subs	r3, #1
 8003394:	4a06      	ldr	r2, [pc, #24]	; (80033b0 <LL_DMA_SetMemoryAddress+0x2c>)
 8003396:	5cd3      	ldrb	r3, [r2, r3]
 8003398:	461a      	mov	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4413      	add	r3, r2
 800339e:	461a      	mov	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	60d3      	str	r3, [r2, #12]
}
 80033a4:	bf00      	nop
 80033a6:	3714      	adds	r7, #20
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr
 80033b0:	08005178 	.word	0x08005178

080033b4 <LL_DMA_SetPeriphAddress>:
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	3b01      	subs	r3, #1
 80033c4:	4a06      	ldr	r2, [pc, #24]	; (80033e0 <LL_DMA_SetPeriphAddress+0x2c>)
 80033c6:	5cd3      	ldrb	r3, [r2, r3]
 80033c8:	461a      	mov	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	4413      	add	r3, r2
 80033ce:	461a      	mov	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6093      	str	r3, [r2, #8]
}
 80033d4:	bf00      	nop
 80033d6:	3714      	adds	r7, #20
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr
 80033e0:	08005178 	.word	0x08005178

080033e4 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	3b01      	subs	r3, #1
 80033f2:	4a0b      	ldr	r2, [pc, #44]	; (8003420 <LL_DMA_EnableIT_TC+0x3c>)
 80033f4:	5cd3      	ldrb	r3, [r2, r3]
 80033f6:	461a      	mov	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4413      	add	r3, r2
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	3a01      	subs	r2, #1
 8003402:	4907      	ldr	r1, [pc, #28]	; (8003420 <LL_DMA_EnableIT_TC+0x3c>)
 8003404:	5c8a      	ldrb	r2, [r1, r2]
 8003406:	4611      	mov	r1, r2
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	440a      	add	r2, r1
 800340c:	f043 0302 	orr.w	r3, r3, #2
 8003410:	6013      	str	r3, [r2, #0]
}
 8003412:	bf00      	nop
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	08005178 	.word	0x08005178

08003424 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	3b01      	subs	r3, #1
 8003432:	4a0b      	ldr	r2, [pc, #44]	; (8003460 <LL_DMA_EnableIT_TE+0x3c>)
 8003434:	5cd3      	ldrb	r3, [r2, r3]
 8003436:	461a      	mov	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4413      	add	r3, r2
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	3a01      	subs	r2, #1
 8003442:	4907      	ldr	r1, [pc, #28]	; (8003460 <LL_DMA_EnableIT_TE+0x3c>)
 8003444:	5c8a      	ldrb	r2, [r1, r2]
 8003446:	4611      	mov	r1, r2
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	440a      	add	r2, r1
 800344c:	f043 0308 	orr.w	r3, r3, #8
 8003450:	6013      	str	r3, [r2, #0]
}
 8003452:	bf00      	nop
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	08005178 	.word	0x08005178

08003464 <LL_AHB1_GRP1_EnableClock>:
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800346c:	4b08      	ldr	r3, [pc, #32]	; (8003490 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800346e:	695a      	ldr	r2, [r3, #20]
 8003470:	4907      	ldr	r1, [pc, #28]	; (8003490 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4313      	orrs	r3, r2
 8003476:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8003478:	4b05      	ldr	r3, [pc, #20]	; (8003490 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800347a:	695a      	ldr	r2, [r3, #20]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4013      	ands	r3, r2
 8003480:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003482:	68fb      	ldr	r3, [r7, #12]
}
 8003484:	bf00      	nop
 8003486:	3714      	adds	r7, #20
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr
 8003490:	40021000 	.word	0x40021000

08003494 <LL_APB1_GRP1_EnableClock>:
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800349c:	4b08      	ldr	r3, [pc, #32]	; (80034c0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800349e:	69da      	ldr	r2, [r3, #28]
 80034a0:	4907      	ldr	r1, [pc, #28]	; (80034c0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80034a8:	4b05      	ldr	r3, [pc, #20]	; (80034c0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80034aa:	69da      	ldr	r2, [r3, #28]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4013      	ands	r3, r2
 80034b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80034b2:	68fb      	ldr	r3, [r7, #12]
}
 80034b4:	bf00      	nop
 80034b6:	3714      	adds	r7, #20
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr
 80034c0:	40021000 	.word	0x40021000

080034c4 <LL_USART_Enable>:
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f043 0201 	orr.w	r2, r3, #1
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	601a      	str	r2, [r3, #0]
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <LL_USART_ConfigAsyncMode>:
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	609a      	str	r2, [r3, #8]
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	609a      	str	r2, [r3, #8]
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	609a      	str	r2, [r3, #8]
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	609a      	str	r2, [r3, #8]
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx, uint32_t Direction)
{
 8003570:	b490      	push	{r4, r7}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  register uint32_t data_reg_addr = 0U;
 800357a:	2400      	movs	r4, #0

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d103      	bne.n	800358a <LL_USART_DMA_GetRegAddr+0x1a>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	3328      	adds	r3, #40	; 0x28
 8003586:	461c      	mov	r4, r3
 8003588:	e002      	b.n	8003590 <LL_USART_DMA_GetRegAddr+0x20>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	3324      	adds	r3, #36	; 0x24
 800358e:	461c      	mov	r4, r3
  }

  return data_reg_addr;
 8003590:	4623      	mov	r3, r4
}
 8003592:	4618      	mov	r0, r3
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bc90      	pop	{r4, r7}
 800359a:	4770      	bx	lr

0800359c <USART2_RegisterCallback>:
/* Declaration and initialization of callback function */
static void (* USART2_ProcessData)(uint8_t data) = 0;

/* Register callback */
void USART2_RegisterCallback(void *callback)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
	if(callback != 0)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d002      	beq.n	80035b0 <USART2_RegisterCallback+0x14>
	{
		USART2_ProcessData = callback;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a03      	ldr	r2, [pc, #12]	; (80035bc <USART2_RegisterCallback+0x20>)
 80035ae:	6013      	str	r3, [r2, #0]
	}
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr
 80035bc:	20000098 	.word	0x20000098

080035c0 <MX_USART2_UART_Init>:

uint8_t pos;

void MX_USART2_UART_Init(void)
{
 80035c0:	b5b0      	push	{r4, r5, r7, lr}
 80035c2:	b090      	sub	sp, #64	; 0x40
 80035c4:	af02      	add	r7, sp, #8
  LL_USART_InitTypeDef USART_InitStruct = {0};
 80035c6:	f107 031c 	add.w	r3, r7, #28
 80035ca:	2200      	movs	r2, #0
 80035cc:	601a      	str	r2, [r3, #0]
 80035ce:	605a      	str	r2, [r3, #4]
 80035d0:	609a      	str	r2, [r3, #8]
 80035d2:	60da      	str	r2, [r3, #12]
 80035d4:	611a      	str	r2, [r3, #16]
 80035d6:	615a      	str	r2, [r3, #20]
 80035d8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035da:	1d3b      	adds	r3, r7, #4
 80035dc:	2200      	movs	r2, #0
 80035de:	601a      	str	r2, [r3, #0]
 80035e0:	605a      	str	r2, [r3, #4]
 80035e2:	609a      	str	r2, [r3, #8]
 80035e4:	60da      	str	r2, [r3, #12]
 80035e6:	611a      	str	r2, [r3, #16]
 80035e8:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80035ea:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80035ee:	f7ff ff51 	bl	8003494 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80035f2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80035f6:	f7ff ff35 	bl	8003464 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 80035fa:	f248 0304 	movw	r3, #32772	; 0x8004
 80035fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003600:	2302      	movs	r3, #2
 8003602:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8003604:	2303      	movs	r3, #3
 8003606:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003608:	2300      	movs	r3, #0
 800360a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800360c:	2300      	movs	r3, #0
 800360e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8003610:	2307      	movs	r3, #7
 8003612:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003614:	1d3b      	adds	r3, r7, #4
 8003616:	4619      	mov	r1, r3
 8003618:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800361c:	f7fd fc2b 	bl	8000e76 <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_RX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8003620:	2200      	movs	r2, #0
 8003622:	2106      	movs	r1, #6
 8003624:	484f      	ldr	r0, [pc, #316]	; (8003764 <MX_USART2_UART_Init+0x1a4>)
 8003626:	f7ff fd21 	bl	800306c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 800362a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800362e:	2106      	movs	r1, #6
 8003630:	484c      	ldr	r0, [pc, #304]	; (8003764 <MX_USART2_UART_Init+0x1a4>)
 8003632:	f7ff fe0d 	bl	8003250 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 8003636:	2200      	movs	r2, #0
 8003638:	2106      	movs	r1, #6
 800363a:	484a      	ldr	r0, [pc, #296]	; (8003764 <MX_USART2_UART_Init+0x1a4>)
 800363c:	f7ff fd54 	bl	80030e8 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8003640:	2200      	movs	r2, #0
 8003642:	2106      	movs	r1, #6
 8003644:	4847      	ldr	r0, [pc, #284]	; (8003764 <MX_USART2_UART_Init+0x1a4>)
 8003646:	f7ff fd73 	bl	8003130 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 800364a:	2280      	movs	r2, #128	; 0x80
 800364c:	2106      	movs	r1, #6
 800364e:	4845      	ldr	r0, [pc, #276]	; (8003764 <MX_USART2_UART_Init+0x1a4>)
 8003650:	f7ff fd92 	bl	8003178 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8003654:	2200      	movs	r2, #0
 8003656:	2106      	movs	r1, #6
 8003658:	4842      	ldr	r0, [pc, #264]	; (8003764 <MX_USART2_UART_Init+0x1a4>)
 800365a:	f7ff fdb1 	bl	80031c0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 800365e:	2200      	movs	r2, #0
 8003660:	2106      	movs	r1, #6
 8003662:	4840      	ldr	r0, [pc, #256]	; (8003764 <MX_USART2_UART_Init+0x1a4>)
 8003664:	f7ff fdd0 	bl	8003208 <LL_DMA_SetMemorySize>

  LL_DMA_ConfigAddresses(	DMA1, LL_DMA_CHANNEL_6,
 8003668:	2101      	movs	r1, #1
 800366a:	483f      	ldr	r0, [pc, #252]	; (8003768 <MX_USART2_UART_Init+0x1a8>)
 800366c:	f7ff ff80 	bl	8003570 <LL_USART_DMA_GetRegAddr>
 8003670:	4605      	mov	r5, r0
 8003672:	4c3e      	ldr	r4, [pc, #248]	; (800376c <MX_USART2_UART_Init+0x1ac>)
 8003674:	2106      	movs	r1, #6
 8003676:	483b      	ldr	r0, [pc, #236]	; (8003764 <MX_USART2_UART_Init+0x1a4>)
 8003678:	f7ff fd1e 	bl	80030b8 <LL_DMA_GetDataTransferDirection>
 800367c:	4603      	mov	r3, r0
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	4623      	mov	r3, r4
 8003682:	462a      	mov	r2, r5
 8003684:	2106      	movs	r1, #6
 8003686:	4837      	ldr	r0, [pc, #220]	; (8003764 <MX_USART2_UART_Init+0x1a4>)
 8003688:	f7ff fe40 	bl	800330c <LL_DMA_ConfigAddresses>
  				  						 	LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
  				  							(uint32_t)bufferUSART2dma,
  				  							LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));

  				    LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 800368c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003690:	2106      	movs	r1, #6
 8003692:	4834      	ldr	r0, [pc, #208]	; (8003764 <MX_USART2_UART_Init+0x1a4>)
 8003694:	f7ff fe00 	bl	8003298 <LL_DMA_SetDataLength>
  				    LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 8003698:	2106      	movs	r1, #6
 800369a:	4832      	ldr	r0, [pc, #200]	; (8003764 <MX_USART2_UART_Init+0x1a4>)
 800369c:	f7ff fca6 	bl	8002fec <LL_DMA_EnableChannel>
  				    LL_USART_EnableDMAReq_RX(USART2);
 80036a0:	4831      	ldr	r0, [pc, #196]	; (8003768 <MX_USART2_UART_Init+0x1a8>)
 80036a2:	f7ff ff45 	bl	8003530 <LL_USART_EnableDMAReq_RX>

  /* USART2_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80036a6:	2210      	movs	r2, #16
 80036a8:	2107      	movs	r1, #7
 80036aa:	482e      	ldr	r0, [pc, #184]	; (8003764 <MX_USART2_UART_Init+0x1a4>)
 80036ac:	f7ff fcde 	bl	800306c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 80036b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80036b4:	2107      	movs	r1, #7
 80036b6:	482b      	ldr	r0, [pc, #172]	; (8003764 <MX_USART2_UART_Init+0x1a4>)
 80036b8:	f7ff fdca 	bl	8003250 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 80036bc:	2200      	movs	r2, #0
 80036be:	2107      	movs	r1, #7
 80036c0:	4828      	ldr	r0, [pc, #160]	; (8003764 <MX_USART2_UART_Init+0x1a4>)
 80036c2:	f7ff fd11 	bl	80030e8 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 80036c6:	2200      	movs	r2, #0
 80036c8:	2107      	movs	r1, #7
 80036ca:	4826      	ldr	r0, [pc, #152]	; (8003764 <MX_USART2_UART_Init+0x1a4>)
 80036cc:	f7ff fd30 	bl	8003130 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 80036d0:	2280      	movs	r2, #128	; 0x80
 80036d2:	2107      	movs	r1, #7
 80036d4:	4823      	ldr	r0, [pc, #140]	; (8003764 <MX_USART2_UART_Init+0x1a4>)
 80036d6:	f7ff fd4f 	bl	8003178 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 80036da:	2200      	movs	r2, #0
 80036dc:	2107      	movs	r1, #7
 80036de:	4821      	ldr	r0, [pc, #132]	; (8003764 <MX_USART2_UART_Init+0x1a4>)
 80036e0:	f7ff fd6e 	bl	80031c0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 80036e4:	2200      	movs	r2, #0
 80036e6:	2107      	movs	r1, #7
 80036e8:	481e      	ldr	r0, [pc, #120]	; (8003764 <MX_USART2_UART_Init+0x1a4>)
 80036ea:	f7ff fd8d 	bl	8003208 <LL_DMA_SetMemorySize>

  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
 80036ee:	2100      	movs	r1, #0
 80036f0:	481d      	ldr	r0, [pc, #116]	; (8003768 <MX_USART2_UART_Init+0x1a8>)
 80036f2:	f7ff ff3d 	bl	8003570 <LL_USART_DMA_GetRegAddr>
 80036f6:	4603      	mov	r3, r0
 80036f8:	461a      	mov	r2, r3
 80036fa:	2107      	movs	r1, #7
 80036fc:	4819      	ldr	r0, [pc, #100]	; (8003764 <MX_USART2_UART_Init+0x1a4>)
 80036fe:	f7ff fe59 	bl	80033b4 <LL_DMA_SetPeriphAddress>
  LL_USART_EnableDMAReq_TX(USART2);
 8003702:	4819      	ldr	r0, [pc, #100]	; (8003768 <MX_USART2_UART_Init+0x1a8>)
 8003704:	f7ff ff24 	bl	8003550 <LL_USART_EnableDMAReq_TX>

  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 8003708:	2107      	movs	r1, #7
 800370a:	4816      	ldr	r0, [pc, #88]	; (8003764 <MX_USART2_UART_Init+0x1a4>)
 800370c:	f7ff fe8a 	bl	8003424 <LL_DMA_EnableIT_TE>


  NVIC_SetPriority(USART2_IRQn, 0);
 8003710:	2100      	movs	r1, #0
 8003712:	2026      	movs	r0, #38	; 0x26
 8003714:	f7ff fc40 	bl	8002f98 <NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8003718:	2026      	movs	r0, #38	; 0x26
 800371a:	f7ff fc23 	bl	8002f64 <NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 800371e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003722:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003724:	2300      	movs	r3, #0
 8003726:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003728:	2300      	movs	r3, #0
 800372a:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800372c:	2300      	movs	r3, #0
 800372e:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003730:	230c      	movs	r3, #12
 8003732:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003734:	2300      	movs	r3, #0
 8003736:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003738:	2300      	movs	r3, #0
 800373a:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 800373c:	f107 031c 	add.w	r3, r7, #28
 8003740:	4619      	mov	r1, r3
 8003742:	4809      	ldr	r0, [pc, #36]	; (8003768 <MX_USART2_UART_Init+0x1a8>)
 8003744:	f7fe fa24 	bl	8001b90 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 8003748:	4807      	ldr	r0, [pc, #28]	; (8003768 <MX_USART2_UART_Init+0x1a8>)
 800374a:	f7ff fee1 	bl	8003510 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 800374e:	4806      	ldr	r0, [pc, #24]	; (8003768 <MX_USART2_UART_Init+0x1a8>)
 8003750:	f7ff fec8 	bl	80034e4 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8003754:	4804      	ldr	r0, [pc, #16]	; (8003768 <MX_USART2_UART_Init+0x1a8>)
 8003756:	f7ff feb5 	bl	80034c4 <LL_USART_Enable>

}
 800375a:	bf00      	nop
 800375c:	3738      	adds	r7, #56	; 0x38
 800375e:	46bd      	mov	sp, r7
 8003760:	bdb0      	pop	{r4, r5, r7, pc}
 8003762:	bf00      	nop
 8003764:	40020000 	.word	0x40020000
 8003768:	40004400 	.word	0x40004400
 800376c:	200000b0 	.word	0x200000b0

08003770 <USART2_PutBuffer>:

void USART2_PutBuffer(uint8_t *buffer, uint8_t length)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	460b      	mov	r3, r1
 800377a:	70fb      	strb	r3, [r7, #3]
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, (uint32_t)buffer);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	461a      	mov	r2, r3
 8003780:	2107      	movs	r1, #7
 8003782:	480a      	ldr	r0, [pc, #40]	; (80037ac <USART2_PutBuffer+0x3c>)
 8003784:	f7ff fdfe 	bl	8003384 <LL_DMA_SetMemoryAddress>

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, length);
 8003788:	78fb      	ldrb	r3, [r7, #3]
 800378a:	461a      	mov	r2, r3
 800378c:	2107      	movs	r1, #7
 800378e:	4807      	ldr	r0, [pc, #28]	; (80037ac <USART2_PutBuffer+0x3c>)
 8003790:	f7ff fd82 	bl	8003298 <LL_DMA_SetDataLength>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);
 8003794:	2107      	movs	r1, #7
 8003796:	4805      	ldr	r0, [pc, #20]	; (80037ac <USART2_PutBuffer+0x3c>)
 8003798:	f7ff fe24 	bl	80033e4 <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 800379c:	2107      	movs	r1, #7
 800379e:	4803      	ldr	r0, [pc, #12]	; (80037ac <USART2_PutBuffer+0x3c>)
 80037a0:	f7ff fc24 	bl	8002fec <LL_DMA_EnableChannel>
}
 80037a4:	bf00      	nop
 80037a6:	3708      	adds	r7, #8
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	40020000 	.word	0x40020000

080037b0 <USART2_CheckDmaReception>:

void USART2_CheckDmaReception(void)
{
 80037b0:	b5b0      	push	{r4, r5, r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af02      	add	r7, sp, #8
	if(USART2_ProcessData == 0) return;
 80037b6:	4b32      	ldr	r3, [pc, #200]	; (8003880 <USART2_CheckDmaReception+0xd0>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d05c      	beq.n	8003878 <USART2_CheckDmaReception+0xc8>
	static uint8_t old_pos = 0;

		//memset(bufferUSART2dma, 0, strlen(bufferUSART2dma));	//vynuluje buff


		uint8_t num = LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6) % 256;	// 0 - 255
 80037be:	2106      	movs	r1, #6
 80037c0:	4830      	ldr	r0, [pc, #192]	; (8003884 <USART2_CheckDmaReception+0xd4>)
 80037c2:	f7ff fd8d 	bl	80032e0 <LL_DMA_GetDataLength>
 80037c6:	4603      	mov	r3, r0
 80037c8:	70fb      	strb	r3, [r7, #3]

		pos = DMA_USART2_BUFFER_SIZE-num;
 80037ca:	78fb      	ldrb	r3, [r7, #3]
 80037cc:	425b      	negs	r3, r3
 80037ce:	b2da      	uxtb	r2, r3
 80037d0:	4b2d      	ldr	r3, [pc, #180]	; (8003888 <USART2_CheckDmaReception+0xd8>)
 80037d2:	701a      	strb	r2, [r3, #0]

		for (int i = old_pos; i <= pos; i++)
 80037d4:	4b2d      	ldr	r3, [pc, #180]	; (800388c <USART2_CheckDmaReception+0xdc>)
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	607b      	str	r3, [r7, #4]
 80037da:	e00a      	b.n	80037f2 <USART2_CheckDmaReception+0x42>
		{
		USART2_ProcessData(bufferUSART2dma[i]); // zavola funkciu v maine, pricom ukazuje na prvy znak novoprijaty
 80037dc:	4b28      	ldr	r3, [pc, #160]	; (8003880 <USART2_CheckDmaReception+0xd0>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	492b      	ldr	r1, [pc, #172]	; (8003890 <USART2_CheckDmaReception+0xe0>)
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	440a      	add	r2, r1
 80037e6:	7812      	ldrb	r2, [r2, #0]
 80037e8:	4610      	mov	r0, r2
 80037ea:	4798      	blx	r3
		for (int i = old_pos; i <= pos; i++)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3301      	adds	r3, #1
 80037f0:	607b      	str	r3, [r7, #4]
 80037f2:	4b25      	ldr	r3, [pc, #148]	; (8003888 <USART2_CheckDmaReception+0xd8>)
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	461a      	mov	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4293      	cmp	r3, r2
 80037fc:	ddee      	ble.n	80037dc <USART2_CheckDmaReception+0x2c>
		}

		old_pos = pos;
 80037fe:	4b22      	ldr	r3, [pc, #136]	; (8003888 <USART2_CheckDmaReception+0xd8>)
 8003800:	781a      	ldrb	r2, [r3, #0]
 8003802:	4b22      	ldr	r3, [pc, #136]	; (800388c <USART2_CheckDmaReception+0xdc>)
 8003804:	701a      	strb	r2, [r3, #0]

		if (num < 20 && num != 0)
 8003806:	78fb      	ldrb	r3, [r7, #3]
 8003808:	2b13      	cmp	r3, #19
 800380a:	d836      	bhi.n	800387a <USART2_CheckDmaReception+0xca>
 800380c:	78fb      	ldrb	r3, [r7, #3]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d033      	beq.n	800387a <USART2_CheckDmaReception+0xca>
			{
				memset(bufferUSART2dma, 0, strlen(bufferUSART2dma));											//vynuluje buff
 8003812:	481f      	ldr	r0, [pc, #124]	; (8003890 <USART2_CheckDmaReception+0xe0>)
 8003814:	f7fc fcd8 	bl	80001c8 <strlen>
 8003818:	4603      	mov	r3, r0
 800381a:	461a      	mov	r2, r3
 800381c:	2100      	movs	r1, #0
 800381e:	481c      	ldr	r0, [pc, #112]	; (8003890 <USART2_CheckDmaReception+0xe0>)
 8003820:	f000 f8ee 	bl	8003a00 <memset>

				LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_6);													//NAŠA SPÁSA
 8003824:	2106      	movs	r1, #6
 8003826:	4817      	ldr	r0, [pc, #92]	; (8003884 <USART2_CheckDmaReception+0xd4>)
 8003828:	f7ff fc00 	bl	800302c <LL_DMA_DisableChannel>
				LL_DMA_ConfigAddresses(	DMA1, LL_DMA_CHANNEL_6,
 800382c:	2101      	movs	r1, #1
 800382e:	4819      	ldr	r0, [pc, #100]	; (8003894 <USART2_CheckDmaReception+0xe4>)
 8003830:	f7ff fe9e 	bl	8003570 <LL_USART_DMA_GetRegAddr>
 8003834:	4605      	mov	r5, r0
 8003836:	4c16      	ldr	r4, [pc, #88]	; (8003890 <USART2_CheckDmaReception+0xe0>)
 8003838:	2106      	movs	r1, #6
 800383a:	4812      	ldr	r0, [pc, #72]	; (8003884 <USART2_CheckDmaReception+0xd4>)
 800383c:	f7ff fc3c 	bl	80030b8 <LL_DMA_GetDataTransferDirection>
 8003840:	4603      	mov	r3, r0
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	4623      	mov	r3, r4
 8003846:	462a      	mov	r2, r5
 8003848:	2106      	movs	r1, #6
 800384a:	480e      	ldr	r0, [pc, #56]	; (8003884 <USART2_CheckDmaReception+0xd4>)
 800384c:	f7ff fd5e 	bl	800330c <LL_DMA_ConfigAddresses>
				  						 	LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
				  							(uint32_t)bufferUSART2dma,
				  							LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));

				    LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 8003850:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003854:	2106      	movs	r1, #6
 8003856:	480b      	ldr	r0, [pc, #44]	; (8003884 <USART2_CheckDmaReception+0xd4>)
 8003858:	f7ff fd1e 	bl	8003298 <LL_DMA_SetDataLength>
				    LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 800385c:	2106      	movs	r1, #6
 800385e:	4809      	ldr	r0, [pc, #36]	; (8003884 <USART2_CheckDmaReception+0xd4>)
 8003860:	f7ff fbc4 	bl	8002fec <LL_DMA_EnableChannel>
				    LL_USART_EnableDMAReq_RX(USART2);
 8003864:	480b      	ldr	r0, [pc, #44]	; (8003894 <USART2_CheckDmaReception+0xe4>)
 8003866:	f7ff fe63 	bl	8003530 <LL_USART_EnableDMAReq_RX>

			old_pos = 0;
 800386a:	4b08      	ldr	r3, [pc, #32]	; (800388c <USART2_CheckDmaReception+0xdc>)
 800386c:	2200      	movs	r2, #0
 800386e:	701a      	strb	r2, [r3, #0]
			pos = 0;
 8003870:	4b05      	ldr	r3, [pc, #20]	; (8003888 <USART2_CheckDmaReception+0xd8>)
 8003872:	2200      	movs	r2, #0
 8003874:	701a      	strb	r2, [r3, #0]
 8003876:	e000      	b.n	800387a <USART2_CheckDmaReception+0xca>
	if(USART2_ProcessData == 0) return;
 8003878:	bf00      	nop
			}
}
 800387a:	3708      	adds	r7, #8
 800387c:	46bd      	mov	sp, r7
 800387e:	bdb0      	pop	{r4, r5, r7, pc}
 8003880:	20000098 	.word	0x20000098
 8003884:	40020000 	.word	0x40020000
 8003888:	200000ac 	.word	0x200000ac
 800388c:	2000009c 	.word	0x2000009c
 8003890:	200000b0 	.word	0x200000b0
 8003894:	40004400 	.word	0x40004400

08003898 <numOfOccupied>:

int numOfOccupied()
{
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0
return pos;
 800389c:	4b03      	ldr	r3, [pc, #12]	; (80038ac <numOfOccupied+0x14>)
 800389e:	781b      	ldrb	r3, [r3, #0]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	200000ac 	.word	0x200000ac

080038b0 <sizeOfBuff>:

int sizeOfBuff()
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
	int c=256;
 80038b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038ba:	607b      	str	r3, [r7, #4]
	return c;
 80038bc:	687b      	ldr	r3, [r7, #4]
}
 80038be:	4618      	mov	r0, r3
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
	...

080038cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80038cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003904 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80038d0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80038d2:	e003      	b.n	80038dc <LoopCopyDataInit>

080038d4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80038d4:	4b0c      	ldr	r3, [pc, #48]	; (8003908 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80038d6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80038d8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80038da:	3104      	adds	r1, #4

080038dc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80038dc:	480b      	ldr	r0, [pc, #44]	; (800390c <LoopForever+0xa>)
	ldr	r3, =_edata
 80038de:	4b0c      	ldr	r3, [pc, #48]	; (8003910 <LoopForever+0xe>)
	adds	r2, r0, r1
 80038e0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80038e2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80038e4:	d3f6      	bcc.n	80038d4 <CopyDataInit>
	ldr	r2, =_sbss
 80038e6:	4a0b      	ldr	r2, [pc, #44]	; (8003914 <LoopForever+0x12>)
	b	LoopFillZerobss
 80038e8:	e002      	b.n	80038f0 <LoopFillZerobss>

080038ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80038ea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80038ec:	f842 3b04 	str.w	r3, [r2], #4

080038f0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80038f0:	4b09      	ldr	r3, [pc, #36]	; (8003918 <LoopForever+0x16>)
	cmp	r2, r3
 80038f2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80038f4:	d3f9      	bcc.n	80038ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80038f6:	f7ff f8b9 	bl	8002a6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80038fa:	f000 f843 	bl	8003984 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80038fe:	f7fe fdb3 	bl	8002468 <main>

08003902 <LoopForever>:

LoopForever:
    b LoopForever
 8003902:	e7fe      	b.n	8003902 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003904:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8003908:	080052bc 	.word	0x080052bc
	ldr	r0, =_sdata
 800390c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003910:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 8003914:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 8003918:	200001b4 	.word	0x200001b4

0800391c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800391c:	e7fe      	b.n	800391c <ADC1_2_IRQHandler>
	...

08003920 <gcvt>:
 8003920:	b530      	push	{r4, r5, lr}
 8003922:	ed2d 8b02 	vpush	{d8}
 8003926:	eeb0 8a40 	vmov.f32	s16, s0
 800392a:	eef0 8a60 	vmov.f32	s17, s1
 800392e:	460c      	mov	r4, r1
 8003930:	2200      	movs	r2, #0
 8003932:	b083      	sub	sp, #12
 8003934:	4605      	mov	r5, r0
 8003936:	2300      	movs	r3, #0
 8003938:	ec51 0b10 	vmov	r0, r1, d0
 800393c:	f7fd f87a 	bl	8000a34 <__aeabi_dcmplt>
 8003940:	4622      	mov	r2, r4
 8003942:	b118      	cbz	r0, 800394c <gcvt+0x2c>
 8003944:	232d      	movs	r3, #45	; 0x2d
 8003946:	f802 3b01 	strb.w	r3, [r2], #1
 800394a:	3d01      	subs	r5, #1
 800394c:	2300      	movs	r3, #0
 800394e:	4809      	ldr	r0, [pc, #36]	; (8003974 <gcvt+0x54>)
 8003950:	9300      	str	r3, [sp, #0]
 8003952:	4629      	mov	r1, r5
 8003954:	2367      	movs	r3, #103	; 0x67
 8003956:	eeb0 0a48 	vmov.f32	s0, s16
 800395a:	eef0 0a68 	vmov.f32	s1, s17
 800395e:	6800      	ldr	r0, [r0, #0]
 8003960:	f000 f922 	bl	8003ba8 <_gcvt>
 8003964:	2800      	cmp	r0, #0
 8003966:	bf14      	ite	ne
 8003968:	4620      	movne	r0, r4
 800396a:	2000      	moveq	r0, #0
 800396c:	b003      	add	sp, #12
 800396e:	ecbd 8b02 	vpop	{d8}
 8003972:	bd30      	pop	{r4, r5, pc}
 8003974:	20000004 	.word	0x20000004

08003978 <__errno>:
 8003978:	4b01      	ldr	r3, [pc, #4]	; (8003980 <__errno+0x8>)
 800397a:	6818      	ldr	r0, [r3, #0]
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	20000004 	.word	0x20000004

08003984 <__libc_init_array>:
 8003984:	b570      	push	{r4, r5, r6, lr}
 8003986:	4e0d      	ldr	r6, [pc, #52]	; (80039bc <__libc_init_array+0x38>)
 8003988:	4c0d      	ldr	r4, [pc, #52]	; (80039c0 <__libc_init_array+0x3c>)
 800398a:	1ba4      	subs	r4, r4, r6
 800398c:	10a4      	asrs	r4, r4, #2
 800398e:	2500      	movs	r5, #0
 8003990:	42a5      	cmp	r5, r4
 8003992:	d109      	bne.n	80039a8 <__libc_init_array+0x24>
 8003994:	4e0b      	ldr	r6, [pc, #44]	; (80039c4 <__libc_init_array+0x40>)
 8003996:	4c0c      	ldr	r4, [pc, #48]	; (80039c8 <__libc_init_array+0x44>)
 8003998:	f001 fb9c 	bl	80050d4 <_init>
 800399c:	1ba4      	subs	r4, r4, r6
 800399e:	10a4      	asrs	r4, r4, #2
 80039a0:	2500      	movs	r5, #0
 80039a2:	42a5      	cmp	r5, r4
 80039a4:	d105      	bne.n	80039b2 <__libc_init_array+0x2e>
 80039a6:	bd70      	pop	{r4, r5, r6, pc}
 80039a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80039ac:	4798      	blx	r3
 80039ae:	3501      	adds	r5, #1
 80039b0:	e7ee      	b.n	8003990 <__libc_init_array+0xc>
 80039b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80039b6:	4798      	blx	r3
 80039b8:	3501      	adds	r5, #1
 80039ba:	e7f2      	b.n	80039a2 <__libc_init_array+0x1e>
 80039bc:	080052b4 	.word	0x080052b4
 80039c0:	080052b4 	.word	0x080052b4
 80039c4:	080052b4 	.word	0x080052b4
 80039c8:	080052b8 	.word	0x080052b8

080039cc <__itoa>:
 80039cc:	1e93      	subs	r3, r2, #2
 80039ce:	2b22      	cmp	r3, #34	; 0x22
 80039d0:	b510      	push	{r4, lr}
 80039d2:	460c      	mov	r4, r1
 80039d4:	d904      	bls.n	80039e0 <__itoa+0x14>
 80039d6:	2300      	movs	r3, #0
 80039d8:	700b      	strb	r3, [r1, #0]
 80039da:	461c      	mov	r4, r3
 80039dc:	4620      	mov	r0, r4
 80039de:	bd10      	pop	{r4, pc}
 80039e0:	2a0a      	cmp	r2, #10
 80039e2:	d109      	bne.n	80039f8 <__itoa+0x2c>
 80039e4:	2800      	cmp	r0, #0
 80039e6:	da07      	bge.n	80039f8 <__itoa+0x2c>
 80039e8:	232d      	movs	r3, #45	; 0x2d
 80039ea:	700b      	strb	r3, [r1, #0]
 80039ec:	4240      	negs	r0, r0
 80039ee:	2101      	movs	r1, #1
 80039f0:	4421      	add	r1, r4
 80039f2:	f000 f825 	bl	8003a40 <__utoa>
 80039f6:	e7f1      	b.n	80039dc <__itoa+0x10>
 80039f8:	2100      	movs	r1, #0
 80039fa:	e7f9      	b.n	80039f0 <__itoa+0x24>

080039fc <itoa>:
 80039fc:	f7ff bfe6 	b.w	80039cc <__itoa>

08003a00 <memset>:
 8003a00:	4402      	add	r2, r0
 8003a02:	4603      	mov	r3, r0
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d100      	bne.n	8003a0a <memset+0xa>
 8003a08:	4770      	bx	lr
 8003a0a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a0e:	e7f9      	b.n	8003a04 <memset+0x4>

08003a10 <strcat>:
 8003a10:	b510      	push	{r4, lr}
 8003a12:	4603      	mov	r3, r0
 8003a14:	781a      	ldrb	r2, [r3, #0]
 8003a16:	1c5c      	adds	r4, r3, #1
 8003a18:	b93a      	cbnz	r2, 8003a2a <strcat+0x1a>
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a20:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003a24:	2a00      	cmp	r2, #0
 8003a26:	d1f9      	bne.n	8003a1c <strcat+0xc>
 8003a28:	bd10      	pop	{r4, pc}
 8003a2a:	4623      	mov	r3, r4
 8003a2c:	e7f2      	b.n	8003a14 <strcat+0x4>

08003a2e <strcpy>:
 8003a2e:	4603      	mov	r3, r0
 8003a30:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a34:	f803 2b01 	strb.w	r2, [r3], #1
 8003a38:	2a00      	cmp	r2, #0
 8003a3a:	d1f9      	bne.n	8003a30 <strcpy+0x2>
 8003a3c:	4770      	bx	lr
	...

08003a40 <__utoa>:
 8003a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a42:	4b1d      	ldr	r3, [pc, #116]	; (8003ab8 <__utoa+0x78>)
 8003a44:	b08b      	sub	sp, #44	; 0x2c
 8003a46:	4605      	mov	r5, r0
 8003a48:	460c      	mov	r4, r1
 8003a4a:	466e      	mov	r6, sp
 8003a4c:	f103 0c20 	add.w	ip, r3, #32
 8003a50:	6818      	ldr	r0, [r3, #0]
 8003a52:	6859      	ldr	r1, [r3, #4]
 8003a54:	4637      	mov	r7, r6
 8003a56:	c703      	stmia	r7!, {r0, r1}
 8003a58:	3308      	adds	r3, #8
 8003a5a:	4563      	cmp	r3, ip
 8003a5c:	463e      	mov	r6, r7
 8003a5e:	d1f7      	bne.n	8003a50 <__utoa+0x10>
 8003a60:	6818      	ldr	r0, [r3, #0]
 8003a62:	791b      	ldrb	r3, [r3, #4]
 8003a64:	713b      	strb	r3, [r7, #4]
 8003a66:	1e93      	subs	r3, r2, #2
 8003a68:	2b22      	cmp	r3, #34	; 0x22
 8003a6a:	6038      	str	r0, [r7, #0]
 8003a6c:	f04f 0300 	mov.w	r3, #0
 8003a70:	d904      	bls.n	8003a7c <__utoa+0x3c>
 8003a72:	7023      	strb	r3, [r4, #0]
 8003a74:	461c      	mov	r4, r3
 8003a76:	4620      	mov	r0, r4
 8003a78:	b00b      	add	sp, #44	; 0x2c
 8003a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a7c:	1e66      	subs	r6, r4, #1
 8003a7e:	fbb5 f0f2 	udiv	r0, r5, r2
 8003a82:	af0a      	add	r7, sp, #40	; 0x28
 8003a84:	fb02 5510 	mls	r5, r2, r0, r5
 8003a88:	443d      	add	r5, r7
 8003a8a:	1c59      	adds	r1, r3, #1
 8003a8c:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8003a90:	f806 5f01 	strb.w	r5, [r6, #1]!
 8003a94:	4605      	mov	r5, r0
 8003a96:	b968      	cbnz	r0, 8003ab4 <__utoa+0x74>
 8003a98:	5460      	strb	r0, [r4, r1]
 8003a9a:	4423      	add	r3, r4
 8003a9c:	4622      	mov	r2, r4
 8003a9e:	1b19      	subs	r1, r3, r4
 8003aa0:	1b10      	subs	r0, r2, r4
 8003aa2:	4281      	cmp	r1, r0
 8003aa4:	dde7      	ble.n	8003a76 <__utoa+0x36>
 8003aa6:	7811      	ldrb	r1, [r2, #0]
 8003aa8:	7818      	ldrb	r0, [r3, #0]
 8003aaa:	f802 0b01 	strb.w	r0, [r2], #1
 8003aae:	f803 1901 	strb.w	r1, [r3], #-1
 8003ab2:	e7f4      	b.n	8003a9e <__utoa+0x5e>
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	e7e2      	b.n	8003a7e <__utoa+0x3e>
 8003ab8:	0800517f 	.word	0x0800517f

08003abc <print_e>:
 8003abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003abe:	b087      	sub	sp, #28
 8003ac0:	ec43 2b10 	vmov	d0, r2, r3
 8003ac4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8003ac6:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8003aca:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8003acc:	ab04      	add	r3, sp, #16
 8003ace:	9301      	str	r3, [sp, #4]
 8003ad0:	ab03      	add	r3, sp, #12
 8003ad2:	9300      	str	r3, [sp, #0]
 8003ad4:	460f      	mov	r7, r1
 8003ad6:	ab05      	add	r3, sp, #20
 8003ad8:	2102      	movs	r1, #2
 8003ada:	1c62      	adds	r2, r4, #1
 8003adc:	f000 fd2c 	bl	8004538 <_dtoa_r>
 8003ae0:	4601      	mov	r1, r0
 8003ae2:	9805      	ldr	r0, [sp, #20]
 8003ae4:	f242 730f 	movw	r3, #9999	; 0x270f
 8003ae8:	4298      	cmp	r0, r3
 8003aea:	d104      	bne.n	8003af6 <print_e+0x3a>
 8003aec:	4638      	mov	r0, r7
 8003aee:	f7ff ff9e 	bl	8003a2e <strcpy>
 8003af2:	b007      	add	sp, #28
 8003af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003af6:	780b      	ldrb	r3, [r1, #0]
 8003af8:	703b      	strb	r3, [r7, #0]
 8003afa:	2d00      	cmp	r5, #0
 8003afc:	d143      	bne.n	8003b86 <print_e+0xca>
 8003afe:	2c00      	cmp	r4, #0
 8003b00:	d141      	bne.n	8003b86 <print_e+0xca>
 8003b02:	1c7b      	adds	r3, r7, #1
 8003b04:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8003b08:	b10a      	cbz	r2, 8003b0e <print_e+0x52>
 8003b0a:	2c00      	cmp	r4, #0
 8003b0c:	dc3f      	bgt.n	8003b8e <print_e+0xd2>
 8003b0e:	2e67      	cmp	r6, #103	; 0x67
 8003b10:	d044      	beq.n	8003b9c <print_e+0xe0>
 8003b12:	2e47      	cmp	r6, #71	; 0x47
 8003b14:	d044      	beq.n	8003ba0 <print_e+0xe4>
 8003b16:	461a      	mov	r2, r3
 8003b18:	191d      	adds	r5, r3, r4
 8003b1a:	2730      	movs	r7, #48	; 0x30
 8003b1c:	1aa9      	subs	r1, r5, r2
 8003b1e:	2900      	cmp	r1, #0
 8003b20:	dc39      	bgt.n	8003b96 <print_e+0xda>
 8003b22:	2c00      	cmp	r4, #0
 8003b24:	bfa8      	it	ge
 8003b26:	191b      	addge	r3, r3, r4
 8003b28:	1e41      	subs	r1, r0, #1
 8003b2a:	2900      	cmp	r1, #0
 8003b2c:	bfb8      	it	lt
 8003b2e:	f1c0 0001 	rsblt	r0, r0, #1
 8003b32:	9105      	str	r1, [sp, #20]
 8003b34:	bfb8      	it	lt
 8003b36:	9005      	strlt	r0, [sp, #20]
 8003b38:	461a      	mov	r2, r3
 8003b3a:	9805      	ldr	r0, [sp, #20]
 8003b3c:	f802 6b02 	strb.w	r6, [r2], #2
 8003b40:	bfb5      	itete	lt
 8003b42:	212d      	movlt	r1, #45	; 0x2d
 8003b44:	212b      	movge	r1, #43	; 0x2b
 8003b46:	7059      	strblt	r1, [r3, #1]
 8003b48:	7059      	strbge	r1, [r3, #1]
 8003b4a:	2863      	cmp	r0, #99	; 0x63
 8003b4c:	dd0b      	ble.n	8003b66 <print_e+0xaa>
 8003b4e:	2164      	movs	r1, #100	; 0x64
 8003b50:	fb90 f1f1 	sdiv	r1, r0, r1
 8003b54:	f101 0430 	add.w	r4, r1, #48	; 0x30
 8003b58:	1cda      	adds	r2, r3, #3
 8003b5a:	709c      	strb	r4, [r3, #2]
 8003b5c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8003b60:	fb03 0101 	mla	r1, r3, r1, r0
 8003b64:	9105      	str	r1, [sp, #20]
 8003b66:	9905      	ldr	r1, [sp, #20]
 8003b68:	230a      	movs	r3, #10
 8003b6a:	fb91 f3f3 	sdiv	r3, r1, r3
 8003b6e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8003b72:	7010      	strb	r0, [r2, #0]
 8003b74:	f06f 0009 	mvn.w	r0, #9
 8003b78:	fb00 1303 	mla	r3, r0, r3, r1
 8003b7c:	3330      	adds	r3, #48	; 0x30
 8003b7e:	7053      	strb	r3, [r2, #1]
 8003b80:	2300      	movs	r3, #0
 8003b82:	7093      	strb	r3, [r2, #2]
 8003b84:	e7b5      	b.n	8003af2 <print_e+0x36>
 8003b86:	222e      	movs	r2, #46	; 0x2e
 8003b88:	1cbb      	adds	r3, r7, #2
 8003b8a:	707a      	strb	r2, [r7, #1]
 8003b8c:	e7ba      	b.n	8003b04 <print_e+0x48>
 8003b8e:	f803 2b01 	strb.w	r2, [r3], #1
 8003b92:	3c01      	subs	r4, #1
 8003b94:	e7b6      	b.n	8003b04 <print_e+0x48>
 8003b96:	f802 7b01 	strb.w	r7, [r2], #1
 8003b9a:	e7bf      	b.n	8003b1c <print_e+0x60>
 8003b9c:	2665      	movs	r6, #101	; 0x65
 8003b9e:	e7c3      	b.n	8003b28 <print_e+0x6c>
 8003ba0:	2645      	movs	r6, #69	; 0x45
 8003ba2:	e7c1      	b.n	8003b28 <print_e+0x6c>
 8003ba4:	0000      	movs	r0, r0
	...

08003ba8 <_gcvt>:
 8003ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bac:	ec55 4b10 	vmov	r4, r5, d0
 8003bb0:	b088      	sub	sp, #32
 8003bb2:	4681      	mov	r9, r0
 8003bb4:	460f      	mov	r7, r1
 8003bb6:	4616      	mov	r6, r2
 8003bb8:	469a      	mov	sl, r3
 8003bba:	2200      	movs	r2, #0
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	ee10 0a10 	vmov	r0, s0
 8003bc2:	4629      	mov	r1, r5
 8003bc4:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8003bc8:	f7fc ff34 	bl	8000a34 <__aeabi_dcmplt>
 8003bcc:	b110      	cbz	r0, 8003bd4 <_gcvt+0x2c>
 8003bce:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8003bd2:	461d      	mov	r5, r3
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	4620      	mov	r0, r4
 8003bda:	4629      	mov	r1, r5
 8003bdc:	f7fc ff20 	bl	8000a20 <__aeabi_dcmpeq>
 8003be0:	b138      	cbz	r0, 8003bf2 <_gcvt+0x4a>
 8003be2:	2330      	movs	r3, #48	; 0x30
 8003be4:	7033      	strb	r3, [r6, #0]
 8003be6:	2300      	movs	r3, #0
 8003be8:	7073      	strb	r3, [r6, #1]
 8003bea:	4630      	mov	r0, r6
 8003bec:	b008      	add	sp, #32
 8003bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bf2:	a350      	add	r3, pc, #320	; (adr r3, 8003d34 <_gcvt+0x18c>)
 8003bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf8:	4620      	mov	r0, r4
 8003bfa:	4629      	mov	r1, r5
 8003bfc:	f7fc ff24 	bl	8000a48 <__aeabi_dcmple>
 8003c00:	b150      	cbz	r0, 8003c18 <_gcvt+0x70>
 8003c02:	3f01      	subs	r7, #1
 8003c04:	e9cd a801 	strd	sl, r8, [sp, #4]
 8003c08:	9700      	str	r7, [sp, #0]
 8003c0a:	4622      	mov	r2, r4
 8003c0c:	462b      	mov	r3, r5
 8003c0e:	4631      	mov	r1, r6
 8003c10:	4648      	mov	r0, r9
 8003c12:	f7ff ff53 	bl	8003abc <print_e>
 8003c16:	e7e8      	b.n	8003bea <_gcvt+0x42>
 8003c18:	4638      	mov	r0, r7
 8003c1a:	f000 fb6b 	bl	80042f4 <_mprec_log10>
 8003c1e:	4622      	mov	r2, r4
 8003c20:	462b      	mov	r3, r5
 8003c22:	ec51 0b10 	vmov	r0, r1, d0
 8003c26:	f7fc ff0f 	bl	8000a48 <__aeabi_dcmple>
 8003c2a:	2800      	cmp	r0, #0
 8003c2c:	d1e9      	bne.n	8003c02 <_gcvt+0x5a>
 8003c2e:	2200      	movs	r2, #0
 8003c30:	4b3f      	ldr	r3, [pc, #252]	; (8003d30 <_gcvt+0x188>)
 8003c32:	4620      	mov	r0, r4
 8003c34:	4629      	mov	r1, r5
 8003c36:	f7fc fefd 	bl	8000a34 <__aeabi_dcmplt>
 8003c3a:	aa07      	add	r2, sp, #28
 8003c3c:	ab06      	add	r3, sp, #24
 8003c3e:	e9cd 3200 	strd	r3, r2, [sp]
 8003c42:	ab05      	add	r3, sp, #20
 8003c44:	463a      	mov	r2, r7
 8003c46:	b360      	cbz	r0, 8003ca2 <_gcvt+0xfa>
 8003c48:	2103      	movs	r1, #3
 8003c4a:	ec45 4b10 	vmov	d0, r4, r5
 8003c4e:	4648      	mov	r0, r9
 8003c50:	f000 fc72 	bl	8004538 <_dtoa_r>
 8003c54:	9a05      	ldr	r2, [sp, #20]
 8003c56:	f242 730f 	movw	r3, #9999	; 0x270f
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d023      	beq.n	8003ca6 <_gcvt+0xfe>
 8003c5e:	4633      	mov	r3, r6
 8003c60:	4437      	add	r7, r6
 8003c62:	4601      	mov	r1, r0
 8003c64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c68:	9d05      	ldr	r5, [sp, #20]
 8003c6a:	1afc      	subs	r4, r7, r3
 8003c6c:	b32a      	cbz	r2, 8003cba <_gcvt+0x112>
 8003c6e:	2d00      	cmp	r5, #0
 8003c70:	dc1e      	bgt.n	8003cb0 <_gcvt+0x108>
 8003c72:	f1b8 0f00 	cmp.w	r8, #0
 8003c76:	d102      	bne.n	8003c7e <_gcvt+0xd6>
 8003c78:	780a      	ldrb	r2, [r1, #0]
 8003c7a:	2a00      	cmp	r2, #0
 8003c7c:	d045      	beq.n	8003d0a <_gcvt+0x162>
 8003c7e:	429e      	cmp	r6, r3
 8003c80:	bf02      	ittt	eq
 8003c82:	1c73      	addeq	r3, r6, #1
 8003c84:	2230      	moveq	r2, #48	; 0x30
 8003c86:	7032      	strbeq	r2, [r6, #0]
 8003c88:	222e      	movs	r2, #46	; 0x2e
 8003c8a:	701a      	strb	r2, [r3, #0]
 8003c8c:	9a05      	ldr	r2, [sp, #20]
 8003c8e:	3301      	adds	r3, #1
 8003c90:	2000      	movs	r0, #0
 8003c92:	2730      	movs	r7, #48	; 0x30
 8003c94:	2a00      	cmp	r2, #0
 8003c96:	4615      	mov	r5, r2
 8003c98:	db24      	blt.n	8003ce4 <_gcvt+0x13c>
 8003c9a:	b100      	cbz	r0, 8003c9e <_gcvt+0xf6>
 8003c9c:	9205      	str	r2, [sp, #20]
 8003c9e:	1e4a      	subs	r2, r1, #1
 8003ca0:	e02b      	b.n	8003cfa <_gcvt+0x152>
 8003ca2:	2102      	movs	r1, #2
 8003ca4:	e7d1      	b.n	8003c4a <_gcvt+0xa2>
 8003ca6:	4601      	mov	r1, r0
 8003ca8:	4630      	mov	r0, r6
 8003caa:	f7ff fec0 	bl	8003a2e <strcpy>
 8003cae:	e79c      	b.n	8003bea <_gcvt+0x42>
 8003cb0:	3d01      	subs	r5, #1
 8003cb2:	f803 2b01 	strb.w	r2, [r3], #1
 8003cb6:	9505      	str	r5, [sp, #20]
 8003cb8:	e7d3      	b.n	8003c62 <_gcvt+0xba>
 8003cba:	1b2d      	subs	r5, r5, r4
 8003cbc:	2730      	movs	r7, #48	; 0x30
 8003cbe:	e005      	b.n	8003ccc <_gcvt+0x124>
 8003cc0:	2c00      	cmp	r4, #0
 8003cc2:	dd06      	ble.n	8003cd2 <_gcvt+0x12a>
 8003cc4:	f803 7b01 	strb.w	r7, [r3], #1
 8003cc8:	3c01      	subs	r4, #1
 8003cca:	2201      	movs	r2, #1
 8003ccc:	1928      	adds	r0, r5, r4
 8003cce:	2800      	cmp	r0, #0
 8003cd0:	dcf6      	bgt.n	8003cc0 <_gcvt+0x118>
 8003cd2:	2a00      	cmp	r2, #0
 8003cd4:	d0cd      	beq.n	8003c72 <_gcvt+0xca>
 8003cd6:	9005      	str	r0, [sp, #20]
 8003cd8:	e7cb      	b.n	8003c72 <_gcvt+0xca>
 8003cda:	f803 7b01 	strb.w	r7, [r3], #1
 8003cde:	3c01      	subs	r4, #1
 8003ce0:	2001      	movs	r0, #1
 8003ce2:	e7d7      	b.n	8003c94 <_gcvt+0xec>
 8003ce4:	2c00      	cmp	r4, #0
 8003ce6:	f102 0201 	add.w	r2, r2, #1
 8003cea:	dcf6      	bgt.n	8003cda <_gcvt+0x132>
 8003cec:	2800      	cmp	r0, #0
 8003cee:	d0d6      	beq.n	8003c9e <_gcvt+0xf6>
 8003cf0:	9505      	str	r5, [sp, #20]
 8003cf2:	e7d4      	b.n	8003c9e <_gcvt+0xf6>
 8003cf4:	f803 1b01 	strb.w	r1, [r3], #1
 8003cf8:	3c01      	subs	r4, #1
 8003cfa:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8003cfe:	b109      	cbz	r1, 8003d04 <_gcvt+0x15c>
 8003d00:	2c00      	cmp	r4, #0
 8003d02:	dcf7      	bgt.n	8003cf4 <_gcvt+0x14c>
 8003d04:	f1b8 0f00 	cmp.w	r8, #0
 8003d08:	d10b      	bne.n	8003d22 <_gcvt+0x17a>
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	701a      	strb	r2, [r3, #0]
 8003d0e:	e76c      	b.n	8003bea <_gcvt+0x42>
 8003d10:	f802 5b01 	strb.w	r5, [r2], #1
 8003d14:	1a81      	subs	r1, r0, r2
 8003d16:	2900      	cmp	r1, #0
 8003d18:	dcfa      	bgt.n	8003d10 <_gcvt+0x168>
 8003d1a:	2c00      	cmp	r4, #0
 8003d1c:	bfa8      	it	ge
 8003d1e:	191b      	addge	r3, r3, r4
 8003d20:	e7f3      	b.n	8003d0a <_gcvt+0x162>
 8003d22:	461a      	mov	r2, r3
 8003d24:	1918      	adds	r0, r3, r4
 8003d26:	2530      	movs	r5, #48	; 0x30
 8003d28:	e7f4      	b.n	8003d14 <_gcvt+0x16c>
 8003d2a:	bf00      	nop
 8003d2c:	f3af 8000 	nop.w
 8003d30:	3ff00000 	.word	0x3ff00000
 8003d34:	eb1c432d 	.word	0xeb1c432d
 8003d38:	3f1a36e2 	.word	0x3f1a36e2

08003d3c <_Balloc>:
 8003d3c:	b570      	push	{r4, r5, r6, lr}
 8003d3e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003d40:	4604      	mov	r4, r0
 8003d42:	460e      	mov	r6, r1
 8003d44:	b93d      	cbnz	r5, 8003d56 <_Balloc+0x1a>
 8003d46:	2010      	movs	r0, #16
 8003d48:	f001 f9ae 	bl	80050a8 <malloc>
 8003d4c:	6260      	str	r0, [r4, #36]	; 0x24
 8003d4e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003d52:	6005      	str	r5, [r0, #0]
 8003d54:	60c5      	str	r5, [r0, #12]
 8003d56:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003d58:	68eb      	ldr	r3, [r5, #12]
 8003d5a:	b183      	cbz	r3, 8003d7e <_Balloc+0x42>
 8003d5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8003d64:	b9b8      	cbnz	r0, 8003d96 <_Balloc+0x5a>
 8003d66:	2101      	movs	r1, #1
 8003d68:	fa01 f506 	lsl.w	r5, r1, r6
 8003d6c:	1d6a      	adds	r2, r5, #5
 8003d6e:	0092      	lsls	r2, r2, #2
 8003d70:	4620      	mov	r0, r4
 8003d72:	f000 fadd 	bl	8004330 <_calloc_r>
 8003d76:	b160      	cbz	r0, 8003d92 <_Balloc+0x56>
 8003d78:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8003d7c:	e00e      	b.n	8003d9c <_Balloc+0x60>
 8003d7e:	2221      	movs	r2, #33	; 0x21
 8003d80:	2104      	movs	r1, #4
 8003d82:	4620      	mov	r0, r4
 8003d84:	f000 fad4 	bl	8004330 <_calloc_r>
 8003d88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d8a:	60e8      	str	r0, [r5, #12]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1e4      	bne.n	8003d5c <_Balloc+0x20>
 8003d92:	2000      	movs	r0, #0
 8003d94:	bd70      	pop	{r4, r5, r6, pc}
 8003d96:	6802      	ldr	r2, [r0, #0]
 8003d98:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003da2:	e7f7      	b.n	8003d94 <_Balloc+0x58>

08003da4 <_Bfree>:
 8003da4:	b570      	push	{r4, r5, r6, lr}
 8003da6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003da8:	4606      	mov	r6, r0
 8003daa:	460d      	mov	r5, r1
 8003dac:	b93c      	cbnz	r4, 8003dbe <_Bfree+0x1a>
 8003dae:	2010      	movs	r0, #16
 8003db0:	f001 f97a 	bl	80050a8 <malloc>
 8003db4:	6270      	str	r0, [r6, #36]	; 0x24
 8003db6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003dba:	6004      	str	r4, [r0, #0]
 8003dbc:	60c4      	str	r4, [r0, #12]
 8003dbe:	b13d      	cbz	r5, 8003dd0 <_Bfree+0x2c>
 8003dc0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003dc2:	686a      	ldr	r2, [r5, #4]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003dca:	6029      	str	r1, [r5, #0]
 8003dcc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8003dd0:	bd70      	pop	{r4, r5, r6, pc}

08003dd2 <__multadd>:
 8003dd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dd6:	690d      	ldr	r5, [r1, #16]
 8003dd8:	461f      	mov	r7, r3
 8003dda:	4606      	mov	r6, r0
 8003ddc:	460c      	mov	r4, r1
 8003dde:	f101 0c14 	add.w	ip, r1, #20
 8003de2:	2300      	movs	r3, #0
 8003de4:	f8dc 0000 	ldr.w	r0, [ip]
 8003de8:	b281      	uxth	r1, r0
 8003dea:	fb02 7101 	mla	r1, r2, r1, r7
 8003dee:	0c0f      	lsrs	r7, r1, #16
 8003df0:	0c00      	lsrs	r0, r0, #16
 8003df2:	fb02 7000 	mla	r0, r2, r0, r7
 8003df6:	b289      	uxth	r1, r1
 8003df8:	3301      	adds	r3, #1
 8003dfa:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8003dfe:	429d      	cmp	r5, r3
 8003e00:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8003e04:	f84c 1b04 	str.w	r1, [ip], #4
 8003e08:	dcec      	bgt.n	8003de4 <__multadd+0x12>
 8003e0a:	b1d7      	cbz	r7, 8003e42 <__multadd+0x70>
 8003e0c:	68a3      	ldr	r3, [r4, #8]
 8003e0e:	42ab      	cmp	r3, r5
 8003e10:	dc12      	bgt.n	8003e38 <__multadd+0x66>
 8003e12:	6861      	ldr	r1, [r4, #4]
 8003e14:	4630      	mov	r0, r6
 8003e16:	3101      	adds	r1, #1
 8003e18:	f7ff ff90 	bl	8003d3c <_Balloc>
 8003e1c:	6922      	ldr	r2, [r4, #16]
 8003e1e:	3202      	adds	r2, #2
 8003e20:	f104 010c 	add.w	r1, r4, #12
 8003e24:	4680      	mov	r8, r0
 8003e26:	0092      	lsls	r2, r2, #2
 8003e28:	300c      	adds	r0, #12
 8003e2a:	f001 f945 	bl	80050b8 <memcpy>
 8003e2e:	4621      	mov	r1, r4
 8003e30:	4630      	mov	r0, r6
 8003e32:	f7ff ffb7 	bl	8003da4 <_Bfree>
 8003e36:	4644      	mov	r4, r8
 8003e38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003e3c:	3501      	adds	r5, #1
 8003e3e:	615f      	str	r7, [r3, #20]
 8003e40:	6125      	str	r5, [r4, #16]
 8003e42:	4620      	mov	r0, r4
 8003e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003e48 <__hi0bits>:
 8003e48:	0c02      	lsrs	r2, r0, #16
 8003e4a:	0412      	lsls	r2, r2, #16
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	b9b2      	cbnz	r2, 8003e7e <__hi0bits+0x36>
 8003e50:	0403      	lsls	r3, r0, #16
 8003e52:	2010      	movs	r0, #16
 8003e54:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8003e58:	bf04      	itt	eq
 8003e5a:	021b      	lsleq	r3, r3, #8
 8003e5c:	3008      	addeq	r0, #8
 8003e5e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8003e62:	bf04      	itt	eq
 8003e64:	011b      	lsleq	r3, r3, #4
 8003e66:	3004      	addeq	r0, #4
 8003e68:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8003e6c:	bf04      	itt	eq
 8003e6e:	009b      	lsleq	r3, r3, #2
 8003e70:	3002      	addeq	r0, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	db06      	blt.n	8003e84 <__hi0bits+0x3c>
 8003e76:	005b      	lsls	r3, r3, #1
 8003e78:	d503      	bpl.n	8003e82 <__hi0bits+0x3a>
 8003e7a:	3001      	adds	r0, #1
 8003e7c:	4770      	bx	lr
 8003e7e:	2000      	movs	r0, #0
 8003e80:	e7e8      	b.n	8003e54 <__hi0bits+0xc>
 8003e82:	2020      	movs	r0, #32
 8003e84:	4770      	bx	lr

08003e86 <__lo0bits>:
 8003e86:	6803      	ldr	r3, [r0, #0]
 8003e88:	f013 0207 	ands.w	r2, r3, #7
 8003e8c:	4601      	mov	r1, r0
 8003e8e:	d00b      	beq.n	8003ea8 <__lo0bits+0x22>
 8003e90:	07da      	lsls	r2, r3, #31
 8003e92:	d423      	bmi.n	8003edc <__lo0bits+0x56>
 8003e94:	0798      	lsls	r0, r3, #30
 8003e96:	bf49      	itett	mi
 8003e98:	085b      	lsrmi	r3, r3, #1
 8003e9a:	089b      	lsrpl	r3, r3, #2
 8003e9c:	2001      	movmi	r0, #1
 8003e9e:	600b      	strmi	r3, [r1, #0]
 8003ea0:	bf5c      	itt	pl
 8003ea2:	600b      	strpl	r3, [r1, #0]
 8003ea4:	2002      	movpl	r0, #2
 8003ea6:	4770      	bx	lr
 8003ea8:	b298      	uxth	r0, r3
 8003eaa:	b9a8      	cbnz	r0, 8003ed8 <__lo0bits+0x52>
 8003eac:	0c1b      	lsrs	r3, r3, #16
 8003eae:	2010      	movs	r0, #16
 8003eb0:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003eb4:	bf04      	itt	eq
 8003eb6:	0a1b      	lsreq	r3, r3, #8
 8003eb8:	3008      	addeq	r0, #8
 8003eba:	071a      	lsls	r2, r3, #28
 8003ebc:	bf04      	itt	eq
 8003ebe:	091b      	lsreq	r3, r3, #4
 8003ec0:	3004      	addeq	r0, #4
 8003ec2:	079a      	lsls	r2, r3, #30
 8003ec4:	bf04      	itt	eq
 8003ec6:	089b      	lsreq	r3, r3, #2
 8003ec8:	3002      	addeq	r0, #2
 8003eca:	07da      	lsls	r2, r3, #31
 8003ecc:	d402      	bmi.n	8003ed4 <__lo0bits+0x4e>
 8003ece:	085b      	lsrs	r3, r3, #1
 8003ed0:	d006      	beq.n	8003ee0 <__lo0bits+0x5a>
 8003ed2:	3001      	adds	r0, #1
 8003ed4:	600b      	str	r3, [r1, #0]
 8003ed6:	4770      	bx	lr
 8003ed8:	4610      	mov	r0, r2
 8003eda:	e7e9      	b.n	8003eb0 <__lo0bits+0x2a>
 8003edc:	2000      	movs	r0, #0
 8003ede:	4770      	bx	lr
 8003ee0:	2020      	movs	r0, #32
 8003ee2:	4770      	bx	lr

08003ee4 <__i2b>:
 8003ee4:	b510      	push	{r4, lr}
 8003ee6:	460c      	mov	r4, r1
 8003ee8:	2101      	movs	r1, #1
 8003eea:	f7ff ff27 	bl	8003d3c <_Balloc>
 8003eee:	2201      	movs	r2, #1
 8003ef0:	6144      	str	r4, [r0, #20]
 8003ef2:	6102      	str	r2, [r0, #16]
 8003ef4:	bd10      	pop	{r4, pc}

08003ef6 <__multiply>:
 8003ef6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003efa:	4614      	mov	r4, r2
 8003efc:	690a      	ldr	r2, [r1, #16]
 8003efe:	6923      	ldr	r3, [r4, #16]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	bfb8      	it	lt
 8003f04:	460b      	movlt	r3, r1
 8003f06:	4688      	mov	r8, r1
 8003f08:	bfbc      	itt	lt
 8003f0a:	46a0      	movlt	r8, r4
 8003f0c:	461c      	movlt	r4, r3
 8003f0e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8003f12:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8003f16:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8003f1a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8003f1e:	eb07 0609 	add.w	r6, r7, r9
 8003f22:	42b3      	cmp	r3, r6
 8003f24:	bfb8      	it	lt
 8003f26:	3101      	addlt	r1, #1
 8003f28:	f7ff ff08 	bl	8003d3c <_Balloc>
 8003f2c:	f100 0514 	add.w	r5, r0, #20
 8003f30:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8003f34:	462b      	mov	r3, r5
 8003f36:	2200      	movs	r2, #0
 8003f38:	4573      	cmp	r3, lr
 8003f3a:	d316      	bcc.n	8003f6a <__multiply+0x74>
 8003f3c:	f104 0214 	add.w	r2, r4, #20
 8003f40:	f108 0114 	add.w	r1, r8, #20
 8003f44:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8003f48:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8003f4c:	9300      	str	r3, [sp, #0]
 8003f4e:	9b00      	ldr	r3, [sp, #0]
 8003f50:	9201      	str	r2, [sp, #4]
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d80c      	bhi.n	8003f70 <__multiply+0x7a>
 8003f56:	2e00      	cmp	r6, #0
 8003f58:	dd03      	ble.n	8003f62 <__multiply+0x6c>
 8003f5a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d05d      	beq.n	800401e <__multiply+0x128>
 8003f62:	6106      	str	r6, [r0, #16]
 8003f64:	b003      	add	sp, #12
 8003f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f6a:	f843 2b04 	str.w	r2, [r3], #4
 8003f6e:	e7e3      	b.n	8003f38 <__multiply+0x42>
 8003f70:	f8b2 b000 	ldrh.w	fp, [r2]
 8003f74:	f1bb 0f00 	cmp.w	fp, #0
 8003f78:	d023      	beq.n	8003fc2 <__multiply+0xcc>
 8003f7a:	4689      	mov	r9, r1
 8003f7c:	46ac      	mov	ip, r5
 8003f7e:	f04f 0800 	mov.w	r8, #0
 8003f82:	f859 4b04 	ldr.w	r4, [r9], #4
 8003f86:	f8dc a000 	ldr.w	sl, [ip]
 8003f8a:	b2a3      	uxth	r3, r4
 8003f8c:	fa1f fa8a 	uxth.w	sl, sl
 8003f90:	fb0b a303 	mla	r3, fp, r3, sl
 8003f94:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8003f98:	f8dc 4000 	ldr.w	r4, [ip]
 8003f9c:	4443      	add	r3, r8
 8003f9e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8003fa2:	fb0b 840a 	mla	r4, fp, sl, r8
 8003fa6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8003faa:	46e2      	mov	sl, ip
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8003fb2:	454f      	cmp	r7, r9
 8003fb4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8003fb8:	f84a 3b04 	str.w	r3, [sl], #4
 8003fbc:	d82b      	bhi.n	8004016 <__multiply+0x120>
 8003fbe:	f8cc 8004 	str.w	r8, [ip, #4]
 8003fc2:	9b01      	ldr	r3, [sp, #4]
 8003fc4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8003fc8:	3204      	adds	r2, #4
 8003fca:	f1ba 0f00 	cmp.w	sl, #0
 8003fce:	d020      	beq.n	8004012 <__multiply+0x11c>
 8003fd0:	682b      	ldr	r3, [r5, #0]
 8003fd2:	4689      	mov	r9, r1
 8003fd4:	46a8      	mov	r8, r5
 8003fd6:	f04f 0b00 	mov.w	fp, #0
 8003fda:	f8b9 c000 	ldrh.w	ip, [r9]
 8003fde:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8003fe2:	fb0a 440c 	mla	r4, sl, ip, r4
 8003fe6:	445c      	add	r4, fp
 8003fe8:	46c4      	mov	ip, r8
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8003ff0:	f84c 3b04 	str.w	r3, [ip], #4
 8003ff4:	f859 3b04 	ldr.w	r3, [r9], #4
 8003ff8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8003ffc:	0c1b      	lsrs	r3, r3, #16
 8003ffe:	fb0a b303 	mla	r3, sl, r3, fp
 8004002:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8004006:	454f      	cmp	r7, r9
 8004008:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800400c:	d805      	bhi.n	800401a <__multiply+0x124>
 800400e:	f8c8 3004 	str.w	r3, [r8, #4]
 8004012:	3504      	adds	r5, #4
 8004014:	e79b      	b.n	8003f4e <__multiply+0x58>
 8004016:	46d4      	mov	ip, sl
 8004018:	e7b3      	b.n	8003f82 <__multiply+0x8c>
 800401a:	46e0      	mov	r8, ip
 800401c:	e7dd      	b.n	8003fda <__multiply+0xe4>
 800401e:	3e01      	subs	r6, #1
 8004020:	e799      	b.n	8003f56 <__multiply+0x60>
	...

08004024 <__pow5mult>:
 8004024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004028:	4615      	mov	r5, r2
 800402a:	f012 0203 	ands.w	r2, r2, #3
 800402e:	4606      	mov	r6, r0
 8004030:	460f      	mov	r7, r1
 8004032:	d007      	beq.n	8004044 <__pow5mult+0x20>
 8004034:	3a01      	subs	r2, #1
 8004036:	4c21      	ldr	r4, [pc, #132]	; (80040bc <__pow5mult+0x98>)
 8004038:	2300      	movs	r3, #0
 800403a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800403e:	f7ff fec8 	bl	8003dd2 <__multadd>
 8004042:	4607      	mov	r7, r0
 8004044:	10ad      	asrs	r5, r5, #2
 8004046:	d035      	beq.n	80040b4 <__pow5mult+0x90>
 8004048:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800404a:	b93c      	cbnz	r4, 800405c <__pow5mult+0x38>
 800404c:	2010      	movs	r0, #16
 800404e:	f001 f82b 	bl	80050a8 <malloc>
 8004052:	6270      	str	r0, [r6, #36]	; 0x24
 8004054:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004058:	6004      	str	r4, [r0, #0]
 800405a:	60c4      	str	r4, [r0, #12]
 800405c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004060:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004064:	b94c      	cbnz	r4, 800407a <__pow5mult+0x56>
 8004066:	f240 2171 	movw	r1, #625	; 0x271
 800406a:	4630      	mov	r0, r6
 800406c:	f7ff ff3a 	bl	8003ee4 <__i2b>
 8004070:	2300      	movs	r3, #0
 8004072:	f8c8 0008 	str.w	r0, [r8, #8]
 8004076:	4604      	mov	r4, r0
 8004078:	6003      	str	r3, [r0, #0]
 800407a:	f04f 0800 	mov.w	r8, #0
 800407e:	07eb      	lsls	r3, r5, #31
 8004080:	d50a      	bpl.n	8004098 <__pow5mult+0x74>
 8004082:	4639      	mov	r1, r7
 8004084:	4622      	mov	r2, r4
 8004086:	4630      	mov	r0, r6
 8004088:	f7ff ff35 	bl	8003ef6 <__multiply>
 800408c:	4639      	mov	r1, r7
 800408e:	4681      	mov	r9, r0
 8004090:	4630      	mov	r0, r6
 8004092:	f7ff fe87 	bl	8003da4 <_Bfree>
 8004096:	464f      	mov	r7, r9
 8004098:	106d      	asrs	r5, r5, #1
 800409a:	d00b      	beq.n	80040b4 <__pow5mult+0x90>
 800409c:	6820      	ldr	r0, [r4, #0]
 800409e:	b938      	cbnz	r0, 80040b0 <__pow5mult+0x8c>
 80040a0:	4622      	mov	r2, r4
 80040a2:	4621      	mov	r1, r4
 80040a4:	4630      	mov	r0, r6
 80040a6:	f7ff ff26 	bl	8003ef6 <__multiply>
 80040aa:	6020      	str	r0, [r4, #0]
 80040ac:	f8c0 8000 	str.w	r8, [r0]
 80040b0:	4604      	mov	r4, r0
 80040b2:	e7e4      	b.n	800407e <__pow5mult+0x5a>
 80040b4:	4638      	mov	r0, r7
 80040b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040ba:	bf00      	nop
 80040bc:	08005298 	.word	0x08005298

080040c0 <__lshift>:
 80040c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040c4:	460c      	mov	r4, r1
 80040c6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80040ca:	6923      	ldr	r3, [r4, #16]
 80040cc:	6849      	ldr	r1, [r1, #4]
 80040ce:	eb0a 0903 	add.w	r9, sl, r3
 80040d2:	68a3      	ldr	r3, [r4, #8]
 80040d4:	4607      	mov	r7, r0
 80040d6:	4616      	mov	r6, r2
 80040d8:	f109 0501 	add.w	r5, r9, #1
 80040dc:	42ab      	cmp	r3, r5
 80040de:	db32      	blt.n	8004146 <__lshift+0x86>
 80040e0:	4638      	mov	r0, r7
 80040e2:	f7ff fe2b 	bl	8003d3c <_Balloc>
 80040e6:	2300      	movs	r3, #0
 80040e8:	4680      	mov	r8, r0
 80040ea:	f100 0114 	add.w	r1, r0, #20
 80040ee:	461a      	mov	r2, r3
 80040f0:	4553      	cmp	r3, sl
 80040f2:	db2b      	blt.n	800414c <__lshift+0x8c>
 80040f4:	6920      	ldr	r0, [r4, #16]
 80040f6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80040fa:	f104 0314 	add.w	r3, r4, #20
 80040fe:	f016 021f 	ands.w	r2, r6, #31
 8004102:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004106:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800410a:	d025      	beq.n	8004158 <__lshift+0x98>
 800410c:	f1c2 0e20 	rsb	lr, r2, #32
 8004110:	2000      	movs	r0, #0
 8004112:	681e      	ldr	r6, [r3, #0]
 8004114:	468a      	mov	sl, r1
 8004116:	4096      	lsls	r6, r2
 8004118:	4330      	orrs	r0, r6
 800411a:	f84a 0b04 	str.w	r0, [sl], #4
 800411e:	f853 0b04 	ldr.w	r0, [r3], #4
 8004122:	459c      	cmp	ip, r3
 8004124:	fa20 f00e 	lsr.w	r0, r0, lr
 8004128:	d814      	bhi.n	8004154 <__lshift+0x94>
 800412a:	6048      	str	r0, [r1, #4]
 800412c:	b108      	cbz	r0, 8004132 <__lshift+0x72>
 800412e:	f109 0502 	add.w	r5, r9, #2
 8004132:	3d01      	subs	r5, #1
 8004134:	4638      	mov	r0, r7
 8004136:	f8c8 5010 	str.w	r5, [r8, #16]
 800413a:	4621      	mov	r1, r4
 800413c:	f7ff fe32 	bl	8003da4 <_Bfree>
 8004140:	4640      	mov	r0, r8
 8004142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004146:	3101      	adds	r1, #1
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	e7c7      	b.n	80040dc <__lshift+0x1c>
 800414c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004150:	3301      	adds	r3, #1
 8004152:	e7cd      	b.n	80040f0 <__lshift+0x30>
 8004154:	4651      	mov	r1, sl
 8004156:	e7dc      	b.n	8004112 <__lshift+0x52>
 8004158:	3904      	subs	r1, #4
 800415a:	f853 2b04 	ldr.w	r2, [r3], #4
 800415e:	f841 2f04 	str.w	r2, [r1, #4]!
 8004162:	459c      	cmp	ip, r3
 8004164:	d8f9      	bhi.n	800415a <__lshift+0x9a>
 8004166:	e7e4      	b.n	8004132 <__lshift+0x72>

08004168 <__mcmp>:
 8004168:	6903      	ldr	r3, [r0, #16]
 800416a:	690a      	ldr	r2, [r1, #16]
 800416c:	1a9b      	subs	r3, r3, r2
 800416e:	b530      	push	{r4, r5, lr}
 8004170:	d10c      	bne.n	800418c <__mcmp+0x24>
 8004172:	0092      	lsls	r2, r2, #2
 8004174:	3014      	adds	r0, #20
 8004176:	3114      	adds	r1, #20
 8004178:	1884      	adds	r4, r0, r2
 800417a:	4411      	add	r1, r2
 800417c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004180:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004184:	4295      	cmp	r5, r2
 8004186:	d003      	beq.n	8004190 <__mcmp+0x28>
 8004188:	d305      	bcc.n	8004196 <__mcmp+0x2e>
 800418a:	2301      	movs	r3, #1
 800418c:	4618      	mov	r0, r3
 800418e:	bd30      	pop	{r4, r5, pc}
 8004190:	42a0      	cmp	r0, r4
 8004192:	d3f3      	bcc.n	800417c <__mcmp+0x14>
 8004194:	e7fa      	b.n	800418c <__mcmp+0x24>
 8004196:	f04f 33ff 	mov.w	r3, #4294967295
 800419a:	e7f7      	b.n	800418c <__mcmp+0x24>

0800419c <__mdiff>:
 800419c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041a0:	460d      	mov	r5, r1
 80041a2:	4607      	mov	r7, r0
 80041a4:	4611      	mov	r1, r2
 80041a6:	4628      	mov	r0, r5
 80041a8:	4614      	mov	r4, r2
 80041aa:	f7ff ffdd 	bl	8004168 <__mcmp>
 80041ae:	1e06      	subs	r6, r0, #0
 80041b0:	d108      	bne.n	80041c4 <__mdiff+0x28>
 80041b2:	4631      	mov	r1, r6
 80041b4:	4638      	mov	r0, r7
 80041b6:	f7ff fdc1 	bl	8003d3c <_Balloc>
 80041ba:	2301      	movs	r3, #1
 80041bc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80041c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041c4:	bfa4      	itt	ge
 80041c6:	4623      	movge	r3, r4
 80041c8:	462c      	movge	r4, r5
 80041ca:	4638      	mov	r0, r7
 80041cc:	6861      	ldr	r1, [r4, #4]
 80041ce:	bfa6      	itte	ge
 80041d0:	461d      	movge	r5, r3
 80041d2:	2600      	movge	r6, #0
 80041d4:	2601      	movlt	r6, #1
 80041d6:	f7ff fdb1 	bl	8003d3c <_Balloc>
 80041da:	692b      	ldr	r3, [r5, #16]
 80041dc:	60c6      	str	r6, [r0, #12]
 80041de:	6926      	ldr	r6, [r4, #16]
 80041e0:	f105 0914 	add.w	r9, r5, #20
 80041e4:	f104 0214 	add.w	r2, r4, #20
 80041e8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80041ec:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80041f0:	f100 0514 	add.w	r5, r0, #20
 80041f4:	f04f 0e00 	mov.w	lr, #0
 80041f8:	f852 ab04 	ldr.w	sl, [r2], #4
 80041fc:	f859 4b04 	ldr.w	r4, [r9], #4
 8004200:	fa1e f18a 	uxtah	r1, lr, sl
 8004204:	b2a3      	uxth	r3, r4
 8004206:	1ac9      	subs	r1, r1, r3
 8004208:	0c23      	lsrs	r3, r4, #16
 800420a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800420e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004212:	b289      	uxth	r1, r1
 8004214:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8004218:	45c8      	cmp	r8, r9
 800421a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800421e:	4694      	mov	ip, r2
 8004220:	f845 3b04 	str.w	r3, [r5], #4
 8004224:	d8e8      	bhi.n	80041f8 <__mdiff+0x5c>
 8004226:	45bc      	cmp	ip, r7
 8004228:	d304      	bcc.n	8004234 <__mdiff+0x98>
 800422a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800422e:	b183      	cbz	r3, 8004252 <__mdiff+0xb6>
 8004230:	6106      	str	r6, [r0, #16]
 8004232:	e7c5      	b.n	80041c0 <__mdiff+0x24>
 8004234:	f85c 1b04 	ldr.w	r1, [ip], #4
 8004238:	fa1e f381 	uxtah	r3, lr, r1
 800423c:	141a      	asrs	r2, r3, #16
 800423e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004242:	b29b      	uxth	r3, r3
 8004244:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004248:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800424c:	f845 3b04 	str.w	r3, [r5], #4
 8004250:	e7e9      	b.n	8004226 <__mdiff+0x8a>
 8004252:	3e01      	subs	r6, #1
 8004254:	e7e9      	b.n	800422a <__mdiff+0x8e>

08004256 <__d2b>:
 8004256:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800425a:	460e      	mov	r6, r1
 800425c:	2101      	movs	r1, #1
 800425e:	ec59 8b10 	vmov	r8, r9, d0
 8004262:	4615      	mov	r5, r2
 8004264:	f7ff fd6a 	bl	8003d3c <_Balloc>
 8004268:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800426c:	4607      	mov	r7, r0
 800426e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004272:	bb34      	cbnz	r4, 80042c2 <__d2b+0x6c>
 8004274:	9301      	str	r3, [sp, #4]
 8004276:	f1b8 0300 	subs.w	r3, r8, #0
 800427a:	d027      	beq.n	80042cc <__d2b+0x76>
 800427c:	a802      	add	r0, sp, #8
 800427e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8004282:	f7ff fe00 	bl	8003e86 <__lo0bits>
 8004286:	9900      	ldr	r1, [sp, #0]
 8004288:	b1f0      	cbz	r0, 80042c8 <__d2b+0x72>
 800428a:	9a01      	ldr	r2, [sp, #4]
 800428c:	f1c0 0320 	rsb	r3, r0, #32
 8004290:	fa02 f303 	lsl.w	r3, r2, r3
 8004294:	430b      	orrs	r3, r1
 8004296:	40c2      	lsrs	r2, r0
 8004298:	617b      	str	r3, [r7, #20]
 800429a:	9201      	str	r2, [sp, #4]
 800429c:	9b01      	ldr	r3, [sp, #4]
 800429e:	61bb      	str	r3, [r7, #24]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	bf14      	ite	ne
 80042a4:	2102      	movne	r1, #2
 80042a6:	2101      	moveq	r1, #1
 80042a8:	6139      	str	r1, [r7, #16]
 80042aa:	b1c4      	cbz	r4, 80042de <__d2b+0x88>
 80042ac:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80042b0:	4404      	add	r4, r0
 80042b2:	6034      	str	r4, [r6, #0]
 80042b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80042b8:	6028      	str	r0, [r5, #0]
 80042ba:	4638      	mov	r0, r7
 80042bc:	b003      	add	sp, #12
 80042be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80042c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042c6:	e7d5      	b.n	8004274 <__d2b+0x1e>
 80042c8:	6179      	str	r1, [r7, #20]
 80042ca:	e7e7      	b.n	800429c <__d2b+0x46>
 80042cc:	a801      	add	r0, sp, #4
 80042ce:	f7ff fdda 	bl	8003e86 <__lo0bits>
 80042d2:	9b01      	ldr	r3, [sp, #4]
 80042d4:	617b      	str	r3, [r7, #20]
 80042d6:	2101      	movs	r1, #1
 80042d8:	6139      	str	r1, [r7, #16]
 80042da:	3020      	adds	r0, #32
 80042dc:	e7e5      	b.n	80042aa <__d2b+0x54>
 80042de:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80042e2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80042e6:	6030      	str	r0, [r6, #0]
 80042e8:	6918      	ldr	r0, [r3, #16]
 80042ea:	f7ff fdad 	bl	8003e48 <__hi0bits>
 80042ee:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80042f2:	e7e1      	b.n	80042b8 <__d2b+0x62>

080042f4 <_mprec_log10>:
 80042f4:	2817      	cmp	r0, #23
 80042f6:	b5d0      	push	{r4, r6, r7, lr}
 80042f8:	4604      	mov	r4, r0
 80042fa:	dc07      	bgt.n	800430c <_mprec_log10+0x18>
 80042fc:	4b09      	ldr	r3, [pc, #36]	; (8004324 <_mprec_log10+0x30>)
 80042fe:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 8004302:	e9d4 0100 	ldrd	r0, r1, [r4]
 8004306:	ec41 0b10 	vmov	d0, r0, r1
 800430a:	bdd0      	pop	{r4, r6, r7, pc}
 800430c:	4906      	ldr	r1, [pc, #24]	; (8004328 <_mprec_log10+0x34>)
 800430e:	4f07      	ldr	r7, [pc, #28]	; (800432c <_mprec_log10+0x38>)
 8004310:	2000      	movs	r0, #0
 8004312:	2600      	movs	r6, #0
 8004314:	4632      	mov	r2, r6
 8004316:	463b      	mov	r3, r7
 8004318:	f7fc f91a 	bl	8000550 <__aeabi_dmul>
 800431c:	3c01      	subs	r4, #1
 800431e:	d1f9      	bne.n	8004314 <_mprec_log10+0x20>
 8004320:	e7f1      	b.n	8004306 <_mprec_log10+0x12>
 8004322:	bf00      	nop
 8004324:	080051d0 	.word	0x080051d0
 8004328:	3ff00000 	.word	0x3ff00000
 800432c:	40240000 	.word	0x40240000

08004330 <_calloc_r>:
 8004330:	b538      	push	{r3, r4, r5, lr}
 8004332:	fb02 f401 	mul.w	r4, r2, r1
 8004336:	4621      	mov	r1, r4
 8004338:	f000 f808 	bl	800434c <_malloc_r>
 800433c:	4605      	mov	r5, r0
 800433e:	b118      	cbz	r0, 8004348 <_calloc_r+0x18>
 8004340:	4622      	mov	r2, r4
 8004342:	2100      	movs	r1, #0
 8004344:	f7ff fb5c 	bl	8003a00 <memset>
 8004348:	4628      	mov	r0, r5
 800434a:	bd38      	pop	{r3, r4, r5, pc}

0800434c <_malloc_r>:
 800434c:	b570      	push	{r4, r5, r6, lr}
 800434e:	1ccd      	adds	r5, r1, #3
 8004350:	f025 0503 	bic.w	r5, r5, #3
 8004354:	3508      	adds	r5, #8
 8004356:	2d0c      	cmp	r5, #12
 8004358:	bf38      	it	cc
 800435a:	250c      	movcc	r5, #12
 800435c:	2d00      	cmp	r5, #0
 800435e:	4606      	mov	r6, r0
 8004360:	db01      	blt.n	8004366 <_malloc_r+0x1a>
 8004362:	42a9      	cmp	r1, r5
 8004364:	d903      	bls.n	800436e <_malloc_r+0x22>
 8004366:	230c      	movs	r3, #12
 8004368:	6033      	str	r3, [r6, #0]
 800436a:	2000      	movs	r0, #0
 800436c:	bd70      	pop	{r4, r5, r6, pc}
 800436e:	f000 feae 	bl	80050ce <__malloc_lock>
 8004372:	4a21      	ldr	r2, [pc, #132]	; (80043f8 <_malloc_r+0xac>)
 8004374:	6814      	ldr	r4, [r2, #0]
 8004376:	4621      	mov	r1, r4
 8004378:	b991      	cbnz	r1, 80043a0 <_malloc_r+0x54>
 800437a:	4c20      	ldr	r4, [pc, #128]	; (80043fc <_malloc_r+0xb0>)
 800437c:	6823      	ldr	r3, [r4, #0]
 800437e:	b91b      	cbnz	r3, 8004388 <_malloc_r+0x3c>
 8004380:	4630      	mov	r0, r6
 8004382:	f000 f83d 	bl	8004400 <_sbrk_r>
 8004386:	6020      	str	r0, [r4, #0]
 8004388:	4629      	mov	r1, r5
 800438a:	4630      	mov	r0, r6
 800438c:	f000 f838 	bl	8004400 <_sbrk_r>
 8004390:	1c43      	adds	r3, r0, #1
 8004392:	d124      	bne.n	80043de <_malloc_r+0x92>
 8004394:	230c      	movs	r3, #12
 8004396:	6033      	str	r3, [r6, #0]
 8004398:	4630      	mov	r0, r6
 800439a:	f000 fe99 	bl	80050d0 <__malloc_unlock>
 800439e:	e7e4      	b.n	800436a <_malloc_r+0x1e>
 80043a0:	680b      	ldr	r3, [r1, #0]
 80043a2:	1b5b      	subs	r3, r3, r5
 80043a4:	d418      	bmi.n	80043d8 <_malloc_r+0x8c>
 80043a6:	2b0b      	cmp	r3, #11
 80043a8:	d90f      	bls.n	80043ca <_malloc_r+0x7e>
 80043aa:	600b      	str	r3, [r1, #0]
 80043ac:	50cd      	str	r5, [r1, r3]
 80043ae:	18cc      	adds	r4, r1, r3
 80043b0:	4630      	mov	r0, r6
 80043b2:	f000 fe8d 	bl	80050d0 <__malloc_unlock>
 80043b6:	f104 000b 	add.w	r0, r4, #11
 80043ba:	1d23      	adds	r3, r4, #4
 80043bc:	f020 0007 	bic.w	r0, r0, #7
 80043c0:	1ac3      	subs	r3, r0, r3
 80043c2:	d0d3      	beq.n	800436c <_malloc_r+0x20>
 80043c4:	425a      	negs	r2, r3
 80043c6:	50e2      	str	r2, [r4, r3]
 80043c8:	e7d0      	b.n	800436c <_malloc_r+0x20>
 80043ca:	428c      	cmp	r4, r1
 80043cc:	684b      	ldr	r3, [r1, #4]
 80043ce:	bf16      	itet	ne
 80043d0:	6063      	strne	r3, [r4, #4]
 80043d2:	6013      	streq	r3, [r2, #0]
 80043d4:	460c      	movne	r4, r1
 80043d6:	e7eb      	b.n	80043b0 <_malloc_r+0x64>
 80043d8:	460c      	mov	r4, r1
 80043da:	6849      	ldr	r1, [r1, #4]
 80043dc:	e7cc      	b.n	8004378 <_malloc_r+0x2c>
 80043de:	1cc4      	adds	r4, r0, #3
 80043e0:	f024 0403 	bic.w	r4, r4, #3
 80043e4:	42a0      	cmp	r0, r4
 80043e6:	d005      	beq.n	80043f4 <_malloc_r+0xa8>
 80043e8:	1a21      	subs	r1, r4, r0
 80043ea:	4630      	mov	r0, r6
 80043ec:	f000 f808 	bl	8004400 <_sbrk_r>
 80043f0:	3001      	adds	r0, #1
 80043f2:	d0cf      	beq.n	8004394 <_malloc_r+0x48>
 80043f4:	6025      	str	r5, [r4, #0]
 80043f6:	e7db      	b.n	80043b0 <_malloc_r+0x64>
 80043f8:	200000a0 	.word	0x200000a0
 80043fc:	200000a4 	.word	0x200000a4

08004400 <_sbrk_r>:
 8004400:	b538      	push	{r3, r4, r5, lr}
 8004402:	4c06      	ldr	r4, [pc, #24]	; (800441c <_sbrk_r+0x1c>)
 8004404:	2300      	movs	r3, #0
 8004406:	4605      	mov	r5, r0
 8004408:	4608      	mov	r0, r1
 800440a:	6023      	str	r3, [r4, #0]
 800440c:	f7fe fb02 	bl	8002a14 <_sbrk>
 8004410:	1c43      	adds	r3, r0, #1
 8004412:	d102      	bne.n	800441a <_sbrk_r+0x1a>
 8004414:	6823      	ldr	r3, [r4, #0]
 8004416:	b103      	cbz	r3, 800441a <_sbrk_r+0x1a>
 8004418:	602b      	str	r3, [r5, #0]
 800441a:	bd38      	pop	{r3, r4, r5, pc}
 800441c:	200001b0 	.word	0x200001b0

08004420 <quorem>:
 8004420:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004424:	6903      	ldr	r3, [r0, #16]
 8004426:	690c      	ldr	r4, [r1, #16]
 8004428:	42a3      	cmp	r3, r4
 800442a:	4680      	mov	r8, r0
 800442c:	f2c0 8082 	blt.w	8004534 <quorem+0x114>
 8004430:	3c01      	subs	r4, #1
 8004432:	f101 0714 	add.w	r7, r1, #20
 8004436:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800443a:	f100 0614 	add.w	r6, r0, #20
 800443e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004442:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004446:	eb06 030c 	add.w	r3, r6, ip
 800444a:	3501      	adds	r5, #1
 800444c:	eb07 090c 	add.w	r9, r7, ip
 8004450:	9301      	str	r3, [sp, #4]
 8004452:	fbb0 f5f5 	udiv	r5, r0, r5
 8004456:	b395      	cbz	r5, 80044be <quorem+0x9e>
 8004458:	f04f 0a00 	mov.w	sl, #0
 800445c:	4638      	mov	r0, r7
 800445e:	46b6      	mov	lr, r6
 8004460:	46d3      	mov	fp, sl
 8004462:	f850 2b04 	ldr.w	r2, [r0], #4
 8004466:	b293      	uxth	r3, r2
 8004468:	fb05 a303 	mla	r3, r5, r3, sl
 800446c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004470:	b29b      	uxth	r3, r3
 8004472:	ebab 0303 	sub.w	r3, fp, r3
 8004476:	0c12      	lsrs	r2, r2, #16
 8004478:	f8de b000 	ldr.w	fp, [lr]
 800447c:	fb05 a202 	mla	r2, r5, r2, sl
 8004480:	fa13 f38b 	uxtah	r3, r3, fp
 8004484:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004488:	fa1f fb82 	uxth.w	fp, r2
 800448c:	f8de 2000 	ldr.w	r2, [lr]
 8004490:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004494:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004498:	b29b      	uxth	r3, r3
 800449a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800449e:	4581      	cmp	r9, r0
 80044a0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80044a4:	f84e 3b04 	str.w	r3, [lr], #4
 80044a8:	d2db      	bcs.n	8004462 <quorem+0x42>
 80044aa:	f856 300c 	ldr.w	r3, [r6, ip]
 80044ae:	b933      	cbnz	r3, 80044be <quorem+0x9e>
 80044b0:	9b01      	ldr	r3, [sp, #4]
 80044b2:	3b04      	subs	r3, #4
 80044b4:	429e      	cmp	r6, r3
 80044b6:	461a      	mov	r2, r3
 80044b8:	d330      	bcc.n	800451c <quorem+0xfc>
 80044ba:	f8c8 4010 	str.w	r4, [r8, #16]
 80044be:	4640      	mov	r0, r8
 80044c0:	f7ff fe52 	bl	8004168 <__mcmp>
 80044c4:	2800      	cmp	r0, #0
 80044c6:	db25      	blt.n	8004514 <quorem+0xf4>
 80044c8:	3501      	adds	r5, #1
 80044ca:	4630      	mov	r0, r6
 80044cc:	f04f 0c00 	mov.w	ip, #0
 80044d0:	f857 2b04 	ldr.w	r2, [r7], #4
 80044d4:	f8d0 e000 	ldr.w	lr, [r0]
 80044d8:	b293      	uxth	r3, r2
 80044da:	ebac 0303 	sub.w	r3, ip, r3
 80044de:	0c12      	lsrs	r2, r2, #16
 80044e0:	fa13 f38e 	uxtah	r3, r3, lr
 80044e4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80044e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80044f2:	45b9      	cmp	r9, r7
 80044f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80044f8:	f840 3b04 	str.w	r3, [r0], #4
 80044fc:	d2e8      	bcs.n	80044d0 <quorem+0xb0>
 80044fe:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004502:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004506:	b92a      	cbnz	r2, 8004514 <quorem+0xf4>
 8004508:	3b04      	subs	r3, #4
 800450a:	429e      	cmp	r6, r3
 800450c:	461a      	mov	r2, r3
 800450e:	d30b      	bcc.n	8004528 <quorem+0x108>
 8004510:	f8c8 4010 	str.w	r4, [r8, #16]
 8004514:	4628      	mov	r0, r5
 8004516:	b003      	add	sp, #12
 8004518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800451c:	6812      	ldr	r2, [r2, #0]
 800451e:	3b04      	subs	r3, #4
 8004520:	2a00      	cmp	r2, #0
 8004522:	d1ca      	bne.n	80044ba <quorem+0x9a>
 8004524:	3c01      	subs	r4, #1
 8004526:	e7c5      	b.n	80044b4 <quorem+0x94>
 8004528:	6812      	ldr	r2, [r2, #0]
 800452a:	3b04      	subs	r3, #4
 800452c:	2a00      	cmp	r2, #0
 800452e:	d1ef      	bne.n	8004510 <quorem+0xf0>
 8004530:	3c01      	subs	r4, #1
 8004532:	e7ea      	b.n	800450a <quorem+0xea>
 8004534:	2000      	movs	r0, #0
 8004536:	e7ee      	b.n	8004516 <quorem+0xf6>

08004538 <_dtoa_r>:
 8004538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800453c:	ec57 6b10 	vmov	r6, r7, d0
 8004540:	b097      	sub	sp, #92	; 0x5c
 8004542:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004544:	9106      	str	r1, [sp, #24]
 8004546:	4604      	mov	r4, r0
 8004548:	920b      	str	r2, [sp, #44]	; 0x2c
 800454a:	9312      	str	r3, [sp, #72]	; 0x48
 800454c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004550:	e9cd 6700 	strd	r6, r7, [sp]
 8004554:	b93d      	cbnz	r5, 8004566 <_dtoa_r+0x2e>
 8004556:	2010      	movs	r0, #16
 8004558:	f000 fda6 	bl	80050a8 <malloc>
 800455c:	6260      	str	r0, [r4, #36]	; 0x24
 800455e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004562:	6005      	str	r5, [r0, #0]
 8004564:	60c5      	str	r5, [r0, #12]
 8004566:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004568:	6819      	ldr	r1, [r3, #0]
 800456a:	b151      	cbz	r1, 8004582 <_dtoa_r+0x4a>
 800456c:	685a      	ldr	r2, [r3, #4]
 800456e:	604a      	str	r2, [r1, #4]
 8004570:	2301      	movs	r3, #1
 8004572:	4093      	lsls	r3, r2
 8004574:	608b      	str	r3, [r1, #8]
 8004576:	4620      	mov	r0, r4
 8004578:	f7ff fc14 	bl	8003da4 <_Bfree>
 800457c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800457e:	2200      	movs	r2, #0
 8004580:	601a      	str	r2, [r3, #0]
 8004582:	1e3b      	subs	r3, r7, #0
 8004584:	bfbb      	ittet	lt
 8004586:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800458a:	9301      	strlt	r3, [sp, #4]
 800458c:	2300      	movge	r3, #0
 800458e:	2201      	movlt	r2, #1
 8004590:	bfac      	ite	ge
 8004592:	f8c8 3000 	strge.w	r3, [r8]
 8004596:	f8c8 2000 	strlt.w	r2, [r8]
 800459a:	4baf      	ldr	r3, [pc, #700]	; (8004858 <_dtoa_r+0x320>)
 800459c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80045a0:	ea33 0308 	bics.w	r3, r3, r8
 80045a4:	d114      	bne.n	80045d0 <_dtoa_r+0x98>
 80045a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80045a8:	f242 730f 	movw	r3, #9999	; 0x270f
 80045ac:	6013      	str	r3, [r2, #0]
 80045ae:	9b00      	ldr	r3, [sp, #0]
 80045b0:	b923      	cbnz	r3, 80045bc <_dtoa_r+0x84>
 80045b2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80045b6:	2800      	cmp	r0, #0
 80045b8:	f000 8542 	beq.w	8005040 <_dtoa_r+0xb08>
 80045bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80045be:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800486c <_dtoa_r+0x334>
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f000 8544 	beq.w	8005050 <_dtoa_r+0xb18>
 80045c8:	f10b 0303 	add.w	r3, fp, #3
 80045cc:	f000 bd3e 	b.w	800504c <_dtoa_r+0xb14>
 80045d0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80045d4:	2200      	movs	r2, #0
 80045d6:	2300      	movs	r3, #0
 80045d8:	4630      	mov	r0, r6
 80045da:	4639      	mov	r1, r7
 80045dc:	f7fc fa20 	bl	8000a20 <__aeabi_dcmpeq>
 80045e0:	4681      	mov	r9, r0
 80045e2:	b168      	cbz	r0, 8004600 <_dtoa_r+0xc8>
 80045e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80045e6:	2301      	movs	r3, #1
 80045e8:	6013      	str	r3, [r2, #0]
 80045ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f000 8524 	beq.w	800503a <_dtoa_r+0xb02>
 80045f2:	4b9a      	ldr	r3, [pc, #616]	; (800485c <_dtoa_r+0x324>)
 80045f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80045f6:	f103 3bff 	add.w	fp, r3, #4294967295
 80045fa:	6013      	str	r3, [r2, #0]
 80045fc:	f000 bd28 	b.w	8005050 <_dtoa_r+0xb18>
 8004600:	aa14      	add	r2, sp, #80	; 0x50
 8004602:	a915      	add	r1, sp, #84	; 0x54
 8004604:	ec47 6b10 	vmov	d0, r6, r7
 8004608:	4620      	mov	r0, r4
 800460a:	f7ff fe24 	bl	8004256 <__d2b>
 800460e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004612:	9004      	str	r0, [sp, #16]
 8004614:	2d00      	cmp	r5, #0
 8004616:	d07c      	beq.n	8004712 <_dtoa_r+0x1da>
 8004618:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800461c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8004620:	46b2      	mov	sl, r6
 8004622:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8004626:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800462a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800462e:	2200      	movs	r2, #0
 8004630:	4b8b      	ldr	r3, [pc, #556]	; (8004860 <_dtoa_r+0x328>)
 8004632:	4650      	mov	r0, sl
 8004634:	4659      	mov	r1, fp
 8004636:	f7fb fdd3 	bl	80001e0 <__aeabi_dsub>
 800463a:	a381      	add	r3, pc, #516	; (adr r3, 8004840 <_dtoa_r+0x308>)
 800463c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004640:	f7fb ff86 	bl	8000550 <__aeabi_dmul>
 8004644:	a380      	add	r3, pc, #512	; (adr r3, 8004848 <_dtoa_r+0x310>)
 8004646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464a:	f7fb fdcb 	bl	80001e4 <__adddf3>
 800464e:	4606      	mov	r6, r0
 8004650:	4628      	mov	r0, r5
 8004652:	460f      	mov	r7, r1
 8004654:	f7fb ff12 	bl	800047c <__aeabi_i2d>
 8004658:	a37d      	add	r3, pc, #500	; (adr r3, 8004850 <_dtoa_r+0x318>)
 800465a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465e:	f7fb ff77 	bl	8000550 <__aeabi_dmul>
 8004662:	4602      	mov	r2, r0
 8004664:	460b      	mov	r3, r1
 8004666:	4630      	mov	r0, r6
 8004668:	4639      	mov	r1, r7
 800466a:	f7fb fdbb 	bl	80001e4 <__adddf3>
 800466e:	4606      	mov	r6, r0
 8004670:	460f      	mov	r7, r1
 8004672:	f7fc fa07 	bl	8000a84 <__aeabi_d2iz>
 8004676:	2200      	movs	r2, #0
 8004678:	4682      	mov	sl, r0
 800467a:	2300      	movs	r3, #0
 800467c:	4630      	mov	r0, r6
 800467e:	4639      	mov	r1, r7
 8004680:	f7fc f9d8 	bl	8000a34 <__aeabi_dcmplt>
 8004684:	b148      	cbz	r0, 800469a <_dtoa_r+0x162>
 8004686:	4650      	mov	r0, sl
 8004688:	f7fb fef8 	bl	800047c <__aeabi_i2d>
 800468c:	4632      	mov	r2, r6
 800468e:	463b      	mov	r3, r7
 8004690:	f7fc f9c6 	bl	8000a20 <__aeabi_dcmpeq>
 8004694:	b908      	cbnz	r0, 800469a <_dtoa_r+0x162>
 8004696:	f10a 3aff 	add.w	sl, sl, #4294967295
 800469a:	f1ba 0f16 	cmp.w	sl, #22
 800469e:	d859      	bhi.n	8004754 <_dtoa_r+0x21c>
 80046a0:	4970      	ldr	r1, [pc, #448]	; (8004864 <_dtoa_r+0x32c>)
 80046a2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80046a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80046aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80046ae:	f7fc f9df 	bl	8000a70 <__aeabi_dcmpgt>
 80046b2:	2800      	cmp	r0, #0
 80046b4:	d050      	beq.n	8004758 <_dtoa_r+0x220>
 80046b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80046ba:	2300      	movs	r3, #0
 80046bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80046be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80046c0:	1b5d      	subs	r5, r3, r5
 80046c2:	f1b5 0801 	subs.w	r8, r5, #1
 80046c6:	bf49      	itett	mi
 80046c8:	f1c5 0301 	rsbmi	r3, r5, #1
 80046cc:	2300      	movpl	r3, #0
 80046ce:	9305      	strmi	r3, [sp, #20]
 80046d0:	f04f 0800 	movmi.w	r8, #0
 80046d4:	bf58      	it	pl
 80046d6:	9305      	strpl	r3, [sp, #20]
 80046d8:	f1ba 0f00 	cmp.w	sl, #0
 80046dc:	db3e      	blt.n	800475c <_dtoa_r+0x224>
 80046de:	2300      	movs	r3, #0
 80046e0:	44d0      	add	r8, sl
 80046e2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80046e6:	9307      	str	r3, [sp, #28]
 80046e8:	9b06      	ldr	r3, [sp, #24]
 80046ea:	2b09      	cmp	r3, #9
 80046ec:	f200 8090 	bhi.w	8004810 <_dtoa_r+0x2d8>
 80046f0:	2b05      	cmp	r3, #5
 80046f2:	bfc4      	itt	gt
 80046f4:	3b04      	subgt	r3, #4
 80046f6:	9306      	strgt	r3, [sp, #24]
 80046f8:	9b06      	ldr	r3, [sp, #24]
 80046fa:	f1a3 0302 	sub.w	r3, r3, #2
 80046fe:	bfcc      	ite	gt
 8004700:	2500      	movgt	r5, #0
 8004702:	2501      	movle	r5, #1
 8004704:	2b03      	cmp	r3, #3
 8004706:	f200 808f 	bhi.w	8004828 <_dtoa_r+0x2f0>
 800470a:	e8df f003 	tbb	[pc, r3]
 800470e:	7f7d      	.short	0x7f7d
 8004710:	7131      	.short	0x7131
 8004712:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8004716:	441d      	add	r5, r3
 8004718:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800471c:	2820      	cmp	r0, #32
 800471e:	dd13      	ble.n	8004748 <_dtoa_r+0x210>
 8004720:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004724:	9b00      	ldr	r3, [sp, #0]
 8004726:	fa08 f800 	lsl.w	r8, r8, r0
 800472a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800472e:	fa23 f000 	lsr.w	r0, r3, r0
 8004732:	ea48 0000 	orr.w	r0, r8, r0
 8004736:	f7fb fe91 	bl	800045c <__aeabi_ui2d>
 800473a:	2301      	movs	r3, #1
 800473c:	4682      	mov	sl, r0
 800473e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8004742:	3d01      	subs	r5, #1
 8004744:	9313      	str	r3, [sp, #76]	; 0x4c
 8004746:	e772      	b.n	800462e <_dtoa_r+0xf6>
 8004748:	9b00      	ldr	r3, [sp, #0]
 800474a:	f1c0 0020 	rsb	r0, r0, #32
 800474e:	fa03 f000 	lsl.w	r0, r3, r0
 8004752:	e7f0      	b.n	8004736 <_dtoa_r+0x1fe>
 8004754:	2301      	movs	r3, #1
 8004756:	e7b1      	b.n	80046bc <_dtoa_r+0x184>
 8004758:	900f      	str	r0, [sp, #60]	; 0x3c
 800475a:	e7b0      	b.n	80046be <_dtoa_r+0x186>
 800475c:	9b05      	ldr	r3, [sp, #20]
 800475e:	eba3 030a 	sub.w	r3, r3, sl
 8004762:	9305      	str	r3, [sp, #20]
 8004764:	f1ca 0300 	rsb	r3, sl, #0
 8004768:	9307      	str	r3, [sp, #28]
 800476a:	2300      	movs	r3, #0
 800476c:	930e      	str	r3, [sp, #56]	; 0x38
 800476e:	e7bb      	b.n	80046e8 <_dtoa_r+0x1b0>
 8004770:	2301      	movs	r3, #1
 8004772:	930a      	str	r3, [sp, #40]	; 0x28
 8004774:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004776:	2b00      	cmp	r3, #0
 8004778:	dd59      	ble.n	800482e <_dtoa_r+0x2f6>
 800477a:	9302      	str	r3, [sp, #8]
 800477c:	4699      	mov	r9, r3
 800477e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004780:	2200      	movs	r2, #0
 8004782:	6072      	str	r2, [r6, #4]
 8004784:	2204      	movs	r2, #4
 8004786:	f102 0014 	add.w	r0, r2, #20
 800478a:	4298      	cmp	r0, r3
 800478c:	6871      	ldr	r1, [r6, #4]
 800478e:	d953      	bls.n	8004838 <_dtoa_r+0x300>
 8004790:	4620      	mov	r0, r4
 8004792:	f7ff fad3 	bl	8003d3c <_Balloc>
 8004796:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004798:	6030      	str	r0, [r6, #0]
 800479a:	f1b9 0f0e 	cmp.w	r9, #14
 800479e:	f8d3 b000 	ldr.w	fp, [r3]
 80047a2:	f200 80e6 	bhi.w	8004972 <_dtoa_r+0x43a>
 80047a6:	2d00      	cmp	r5, #0
 80047a8:	f000 80e3 	beq.w	8004972 <_dtoa_r+0x43a>
 80047ac:	ed9d 7b00 	vldr	d7, [sp]
 80047b0:	f1ba 0f00 	cmp.w	sl, #0
 80047b4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80047b8:	dd74      	ble.n	80048a4 <_dtoa_r+0x36c>
 80047ba:	4a2a      	ldr	r2, [pc, #168]	; (8004864 <_dtoa_r+0x32c>)
 80047bc:	f00a 030f 	and.w	r3, sl, #15
 80047c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80047c4:	ed93 7b00 	vldr	d7, [r3]
 80047c8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80047cc:	06f0      	lsls	r0, r6, #27
 80047ce:	ed8d 7b08 	vstr	d7, [sp, #32]
 80047d2:	d565      	bpl.n	80048a0 <_dtoa_r+0x368>
 80047d4:	4b24      	ldr	r3, [pc, #144]	; (8004868 <_dtoa_r+0x330>)
 80047d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80047da:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80047de:	f7fb ffe1 	bl	80007a4 <__aeabi_ddiv>
 80047e2:	e9cd 0100 	strd	r0, r1, [sp]
 80047e6:	f006 060f 	and.w	r6, r6, #15
 80047ea:	2503      	movs	r5, #3
 80047ec:	4f1e      	ldr	r7, [pc, #120]	; (8004868 <_dtoa_r+0x330>)
 80047ee:	e04c      	b.n	800488a <_dtoa_r+0x352>
 80047f0:	2301      	movs	r3, #1
 80047f2:	930a      	str	r3, [sp, #40]	; 0x28
 80047f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80047f6:	4453      	add	r3, sl
 80047f8:	f103 0901 	add.w	r9, r3, #1
 80047fc:	9302      	str	r3, [sp, #8]
 80047fe:	464b      	mov	r3, r9
 8004800:	2b01      	cmp	r3, #1
 8004802:	bfb8      	it	lt
 8004804:	2301      	movlt	r3, #1
 8004806:	e7ba      	b.n	800477e <_dtoa_r+0x246>
 8004808:	2300      	movs	r3, #0
 800480a:	e7b2      	b.n	8004772 <_dtoa_r+0x23a>
 800480c:	2300      	movs	r3, #0
 800480e:	e7f0      	b.n	80047f2 <_dtoa_r+0x2ba>
 8004810:	2501      	movs	r5, #1
 8004812:	2300      	movs	r3, #0
 8004814:	9306      	str	r3, [sp, #24]
 8004816:	950a      	str	r5, [sp, #40]	; 0x28
 8004818:	f04f 33ff 	mov.w	r3, #4294967295
 800481c:	9302      	str	r3, [sp, #8]
 800481e:	4699      	mov	r9, r3
 8004820:	2200      	movs	r2, #0
 8004822:	2312      	movs	r3, #18
 8004824:	920b      	str	r2, [sp, #44]	; 0x2c
 8004826:	e7aa      	b.n	800477e <_dtoa_r+0x246>
 8004828:	2301      	movs	r3, #1
 800482a:	930a      	str	r3, [sp, #40]	; 0x28
 800482c:	e7f4      	b.n	8004818 <_dtoa_r+0x2e0>
 800482e:	2301      	movs	r3, #1
 8004830:	9302      	str	r3, [sp, #8]
 8004832:	4699      	mov	r9, r3
 8004834:	461a      	mov	r2, r3
 8004836:	e7f5      	b.n	8004824 <_dtoa_r+0x2ec>
 8004838:	3101      	adds	r1, #1
 800483a:	6071      	str	r1, [r6, #4]
 800483c:	0052      	lsls	r2, r2, #1
 800483e:	e7a2      	b.n	8004786 <_dtoa_r+0x24e>
 8004840:	636f4361 	.word	0x636f4361
 8004844:	3fd287a7 	.word	0x3fd287a7
 8004848:	8b60c8b3 	.word	0x8b60c8b3
 800484c:	3fc68a28 	.word	0x3fc68a28
 8004850:	509f79fb 	.word	0x509f79fb
 8004854:	3fd34413 	.word	0x3fd34413
 8004858:	7ff00000 	.word	0x7ff00000
 800485c:	080052b2 	.word	0x080052b2
 8004860:	3ff80000 	.word	0x3ff80000
 8004864:	080051d0 	.word	0x080051d0
 8004868:	080051a8 	.word	0x080051a8
 800486c:	080052ad 	.word	0x080052ad
 8004870:	07f1      	lsls	r1, r6, #31
 8004872:	d508      	bpl.n	8004886 <_dtoa_r+0x34e>
 8004874:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004878:	e9d7 2300 	ldrd	r2, r3, [r7]
 800487c:	f7fb fe68 	bl	8000550 <__aeabi_dmul>
 8004880:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004884:	3501      	adds	r5, #1
 8004886:	1076      	asrs	r6, r6, #1
 8004888:	3708      	adds	r7, #8
 800488a:	2e00      	cmp	r6, #0
 800488c:	d1f0      	bne.n	8004870 <_dtoa_r+0x338>
 800488e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004892:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004896:	f7fb ff85 	bl	80007a4 <__aeabi_ddiv>
 800489a:	e9cd 0100 	strd	r0, r1, [sp]
 800489e:	e01a      	b.n	80048d6 <_dtoa_r+0x39e>
 80048a0:	2502      	movs	r5, #2
 80048a2:	e7a3      	b.n	80047ec <_dtoa_r+0x2b4>
 80048a4:	f000 80a0 	beq.w	80049e8 <_dtoa_r+0x4b0>
 80048a8:	f1ca 0600 	rsb	r6, sl, #0
 80048ac:	4b9f      	ldr	r3, [pc, #636]	; (8004b2c <_dtoa_r+0x5f4>)
 80048ae:	4fa0      	ldr	r7, [pc, #640]	; (8004b30 <_dtoa_r+0x5f8>)
 80048b0:	f006 020f 	and.w	r2, r6, #15
 80048b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80048b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80048c0:	f7fb fe46 	bl	8000550 <__aeabi_dmul>
 80048c4:	e9cd 0100 	strd	r0, r1, [sp]
 80048c8:	1136      	asrs	r6, r6, #4
 80048ca:	2300      	movs	r3, #0
 80048cc:	2502      	movs	r5, #2
 80048ce:	2e00      	cmp	r6, #0
 80048d0:	d17f      	bne.n	80049d2 <_dtoa_r+0x49a>
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1e1      	bne.n	800489a <_dtoa_r+0x362>
 80048d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f000 8087 	beq.w	80049ec <_dtoa_r+0x4b4>
 80048de:	e9dd 6700 	ldrd	r6, r7, [sp]
 80048e2:	2200      	movs	r2, #0
 80048e4:	4b93      	ldr	r3, [pc, #588]	; (8004b34 <_dtoa_r+0x5fc>)
 80048e6:	4630      	mov	r0, r6
 80048e8:	4639      	mov	r1, r7
 80048ea:	f7fc f8a3 	bl	8000a34 <__aeabi_dcmplt>
 80048ee:	2800      	cmp	r0, #0
 80048f0:	d07c      	beq.n	80049ec <_dtoa_r+0x4b4>
 80048f2:	f1b9 0f00 	cmp.w	r9, #0
 80048f6:	d079      	beq.n	80049ec <_dtoa_r+0x4b4>
 80048f8:	9b02      	ldr	r3, [sp, #8]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	dd35      	ble.n	800496a <_dtoa_r+0x432>
 80048fe:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004902:	9308      	str	r3, [sp, #32]
 8004904:	4639      	mov	r1, r7
 8004906:	2200      	movs	r2, #0
 8004908:	4b8b      	ldr	r3, [pc, #556]	; (8004b38 <_dtoa_r+0x600>)
 800490a:	4630      	mov	r0, r6
 800490c:	f7fb fe20 	bl	8000550 <__aeabi_dmul>
 8004910:	e9cd 0100 	strd	r0, r1, [sp]
 8004914:	9f02      	ldr	r7, [sp, #8]
 8004916:	3501      	adds	r5, #1
 8004918:	4628      	mov	r0, r5
 800491a:	f7fb fdaf 	bl	800047c <__aeabi_i2d>
 800491e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004922:	f7fb fe15 	bl	8000550 <__aeabi_dmul>
 8004926:	2200      	movs	r2, #0
 8004928:	4b84      	ldr	r3, [pc, #528]	; (8004b3c <_dtoa_r+0x604>)
 800492a:	f7fb fc5b 	bl	80001e4 <__adddf3>
 800492e:	4605      	mov	r5, r0
 8004930:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004934:	2f00      	cmp	r7, #0
 8004936:	d15d      	bne.n	80049f4 <_dtoa_r+0x4bc>
 8004938:	2200      	movs	r2, #0
 800493a:	4b81      	ldr	r3, [pc, #516]	; (8004b40 <_dtoa_r+0x608>)
 800493c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004940:	f7fb fc4e 	bl	80001e0 <__aeabi_dsub>
 8004944:	462a      	mov	r2, r5
 8004946:	4633      	mov	r3, r6
 8004948:	e9cd 0100 	strd	r0, r1, [sp]
 800494c:	f7fc f890 	bl	8000a70 <__aeabi_dcmpgt>
 8004950:	2800      	cmp	r0, #0
 8004952:	f040 8288 	bne.w	8004e66 <_dtoa_r+0x92e>
 8004956:	462a      	mov	r2, r5
 8004958:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800495c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004960:	f7fc f868 	bl	8000a34 <__aeabi_dcmplt>
 8004964:	2800      	cmp	r0, #0
 8004966:	f040 827c 	bne.w	8004e62 <_dtoa_r+0x92a>
 800496a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800496e:	e9cd 2300 	strd	r2, r3, [sp]
 8004972:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004974:	2b00      	cmp	r3, #0
 8004976:	f2c0 8150 	blt.w	8004c1a <_dtoa_r+0x6e2>
 800497a:	f1ba 0f0e 	cmp.w	sl, #14
 800497e:	f300 814c 	bgt.w	8004c1a <_dtoa_r+0x6e2>
 8004982:	4b6a      	ldr	r3, [pc, #424]	; (8004b2c <_dtoa_r+0x5f4>)
 8004984:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004988:	ed93 7b00 	vldr	d7, [r3]
 800498c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800498e:	2b00      	cmp	r3, #0
 8004990:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004994:	f280 80d8 	bge.w	8004b48 <_dtoa_r+0x610>
 8004998:	f1b9 0f00 	cmp.w	r9, #0
 800499c:	f300 80d4 	bgt.w	8004b48 <_dtoa_r+0x610>
 80049a0:	f040 825e 	bne.w	8004e60 <_dtoa_r+0x928>
 80049a4:	2200      	movs	r2, #0
 80049a6:	4b66      	ldr	r3, [pc, #408]	; (8004b40 <_dtoa_r+0x608>)
 80049a8:	ec51 0b17 	vmov	r0, r1, d7
 80049ac:	f7fb fdd0 	bl	8000550 <__aeabi_dmul>
 80049b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80049b4:	f7fc f852 	bl	8000a5c <__aeabi_dcmpge>
 80049b8:	464f      	mov	r7, r9
 80049ba:	464e      	mov	r6, r9
 80049bc:	2800      	cmp	r0, #0
 80049be:	f040 8234 	bne.w	8004e2a <_dtoa_r+0x8f2>
 80049c2:	2331      	movs	r3, #49	; 0x31
 80049c4:	f10b 0501 	add.w	r5, fp, #1
 80049c8:	f88b 3000 	strb.w	r3, [fp]
 80049cc:	f10a 0a01 	add.w	sl, sl, #1
 80049d0:	e22f      	b.n	8004e32 <_dtoa_r+0x8fa>
 80049d2:	07f2      	lsls	r2, r6, #31
 80049d4:	d505      	bpl.n	80049e2 <_dtoa_r+0x4aa>
 80049d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049da:	f7fb fdb9 	bl	8000550 <__aeabi_dmul>
 80049de:	3501      	adds	r5, #1
 80049e0:	2301      	movs	r3, #1
 80049e2:	1076      	asrs	r6, r6, #1
 80049e4:	3708      	adds	r7, #8
 80049e6:	e772      	b.n	80048ce <_dtoa_r+0x396>
 80049e8:	2502      	movs	r5, #2
 80049ea:	e774      	b.n	80048d6 <_dtoa_r+0x39e>
 80049ec:	f8cd a020 	str.w	sl, [sp, #32]
 80049f0:	464f      	mov	r7, r9
 80049f2:	e791      	b.n	8004918 <_dtoa_r+0x3e0>
 80049f4:	4b4d      	ldr	r3, [pc, #308]	; (8004b2c <_dtoa_r+0x5f4>)
 80049f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80049fa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80049fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d047      	beq.n	8004a94 <_dtoa_r+0x55c>
 8004a04:	4602      	mov	r2, r0
 8004a06:	460b      	mov	r3, r1
 8004a08:	2000      	movs	r0, #0
 8004a0a:	494e      	ldr	r1, [pc, #312]	; (8004b44 <_dtoa_r+0x60c>)
 8004a0c:	f7fb feca 	bl	80007a4 <__aeabi_ddiv>
 8004a10:	462a      	mov	r2, r5
 8004a12:	4633      	mov	r3, r6
 8004a14:	f7fb fbe4 	bl	80001e0 <__aeabi_dsub>
 8004a18:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004a1c:	465d      	mov	r5, fp
 8004a1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004a22:	f7fc f82f 	bl	8000a84 <__aeabi_d2iz>
 8004a26:	4606      	mov	r6, r0
 8004a28:	f7fb fd28 	bl	800047c <__aeabi_i2d>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	460b      	mov	r3, r1
 8004a30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004a34:	f7fb fbd4 	bl	80001e0 <__aeabi_dsub>
 8004a38:	3630      	adds	r6, #48	; 0x30
 8004a3a:	f805 6b01 	strb.w	r6, [r5], #1
 8004a3e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004a42:	e9cd 0100 	strd	r0, r1, [sp]
 8004a46:	f7fb fff5 	bl	8000a34 <__aeabi_dcmplt>
 8004a4a:	2800      	cmp	r0, #0
 8004a4c:	d163      	bne.n	8004b16 <_dtoa_r+0x5de>
 8004a4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a52:	2000      	movs	r0, #0
 8004a54:	4937      	ldr	r1, [pc, #220]	; (8004b34 <_dtoa_r+0x5fc>)
 8004a56:	f7fb fbc3 	bl	80001e0 <__aeabi_dsub>
 8004a5a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004a5e:	f7fb ffe9 	bl	8000a34 <__aeabi_dcmplt>
 8004a62:	2800      	cmp	r0, #0
 8004a64:	f040 80b7 	bne.w	8004bd6 <_dtoa_r+0x69e>
 8004a68:	eba5 030b 	sub.w	r3, r5, fp
 8004a6c:	429f      	cmp	r7, r3
 8004a6e:	f77f af7c 	ble.w	800496a <_dtoa_r+0x432>
 8004a72:	2200      	movs	r2, #0
 8004a74:	4b30      	ldr	r3, [pc, #192]	; (8004b38 <_dtoa_r+0x600>)
 8004a76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004a7a:	f7fb fd69 	bl	8000550 <__aeabi_dmul>
 8004a7e:	2200      	movs	r2, #0
 8004a80:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004a84:	4b2c      	ldr	r3, [pc, #176]	; (8004b38 <_dtoa_r+0x600>)
 8004a86:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004a8a:	f7fb fd61 	bl	8000550 <__aeabi_dmul>
 8004a8e:	e9cd 0100 	strd	r0, r1, [sp]
 8004a92:	e7c4      	b.n	8004a1e <_dtoa_r+0x4e6>
 8004a94:	462a      	mov	r2, r5
 8004a96:	4633      	mov	r3, r6
 8004a98:	f7fb fd5a 	bl	8000550 <__aeabi_dmul>
 8004a9c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004aa0:	eb0b 0507 	add.w	r5, fp, r7
 8004aa4:	465e      	mov	r6, fp
 8004aa6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004aaa:	f7fb ffeb 	bl	8000a84 <__aeabi_d2iz>
 8004aae:	4607      	mov	r7, r0
 8004ab0:	f7fb fce4 	bl	800047c <__aeabi_i2d>
 8004ab4:	3730      	adds	r7, #48	; 0x30
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	460b      	mov	r3, r1
 8004aba:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004abe:	f7fb fb8f 	bl	80001e0 <__aeabi_dsub>
 8004ac2:	f806 7b01 	strb.w	r7, [r6], #1
 8004ac6:	42ae      	cmp	r6, r5
 8004ac8:	e9cd 0100 	strd	r0, r1, [sp]
 8004acc:	f04f 0200 	mov.w	r2, #0
 8004ad0:	d126      	bne.n	8004b20 <_dtoa_r+0x5e8>
 8004ad2:	4b1c      	ldr	r3, [pc, #112]	; (8004b44 <_dtoa_r+0x60c>)
 8004ad4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004ad8:	f7fb fb84 	bl	80001e4 <__adddf3>
 8004adc:	4602      	mov	r2, r0
 8004ade:	460b      	mov	r3, r1
 8004ae0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ae4:	f7fb ffc4 	bl	8000a70 <__aeabi_dcmpgt>
 8004ae8:	2800      	cmp	r0, #0
 8004aea:	d174      	bne.n	8004bd6 <_dtoa_r+0x69e>
 8004aec:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004af0:	2000      	movs	r0, #0
 8004af2:	4914      	ldr	r1, [pc, #80]	; (8004b44 <_dtoa_r+0x60c>)
 8004af4:	f7fb fb74 	bl	80001e0 <__aeabi_dsub>
 8004af8:	4602      	mov	r2, r0
 8004afa:	460b      	mov	r3, r1
 8004afc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004b00:	f7fb ff98 	bl	8000a34 <__aeabi_dcmplt>
 8004b04:	2800      	cmp	r0, #0
 8004b06:	f43f af30 	beq.w	800496a <_dtoa_r+0x432>
 8004b0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004b0e:	2b30      	cmp	r3, #48	; 0x30
 8004b10:	f105 32ff 	add.w	r2, r5, #4294967295
 8004b14:	d002      	beq.n	8004b1c <_dtoa_r+0x5e4>
 8004b16:	f8dd a020 	ldr.w	sl, [sp, #32]
 8004b1a:	e04a      	b.n	8004bb2 <_dtoa_r+0x67a>
 8004b1c:	4615      	mov	r5, r2
 8004b1e:	e7f4      	b.n	8004b0a <_dtoa_r+0x5d2>
 8004b20:	4b05      	ldr	r3, [pc, #20]	; (8004b38 <_dtoa_r+0x600>)
 8004b22:	f7fb fd15 	bl	8000550 <__aeabi_dmul>
 8004b26:	e9cd 0100 	strd	r0, r1, [sp]
 8004b2a:	e7bc      	b.n	8004aa6 <_dtoa_r+0x56e>
 8004b2c:	080051d0 	.word	0x080051d0
 8004b30:	080051a8 	.word	0x080051a8
 8004b34:	3ff00000 	.word	0x3ff00000
 8004b38:	40240000 	.word	0x40240000
 8004b3c:	401c0000 	.word	0x401c0000
 8004b40:	40140000 	.word	0x40140000
 8004b44:	3fe00000 	.word	0x3fe00000
 8004b48:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004b4c:	465d      	mov	r5, fp
 8004b4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004b52:	4630      	mov	r0, r6
 8004b54:	4639      	mov	r1, r7
 8004b56:	f7fb fe25 	bl	80007a4 <__aeabi_ddiv>
 8004b5a:	f7fb ff93 	bl	8000a84 <__aeabi_d2iz>
 8004b5e:	4680      	mov	r8, r0
 8004b60:	f7fb fc8c 	bl	800047c <__aeabi_i2d>
 8004b64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004b68:	f7fb fcf2 	bl	8000550 <__aeabi_dmul>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	460b      	mov	r3, r1
 8004b70:	4630      	mov	r0, r6
 8004b72:	4639      	mov	r1, r7
 8004b74:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8004b78:	f7fb fb32 	bl	80001e0 <__aeabi_dsub>
 8004b7c:	f805 6b01 	strb.w	r6, [r5], #1
 8004b80:	eba5 060b 	sub.w	r6, r5, fp
 8004b84:	45b1      	cmp	r9, r6
 8004b86:	4602      	mov	r2, r0
 8004b88:	460b      	mov	r3, r1
 8004b8a:	d139      	bne.n	8004c00 <_dtoa_r+0x6c8>
 8004b8c:	f7fb fb2a 	bl	80001e4 <__adddf3>
 8004b90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004b94:	4606      	mov	r6, r0
 8004b96:	460f      	mov	r7, r1
 8004b98:	f7fb ff6a 	bl	8000a70 <__aeabi_dcmpgt>
 8004b9c:	b9c8      	cbnz	r0, 8004bd2 <_dtoa_r+0x69a>
 8004b9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ba2:	4630      	mov	r0, r6
 8004ba4:	4639      	mov	r1, r7
 8004ba6:	f7fb ff3b 	bl	8000a20 <__aeabi_dcmpeq>
 8004baa:	b110      	cbz	r0, 8004bb2 <_dtoa_r+0x67a>
 8004bac:	f018 0f01 	tst.w	r8, #1
 8004bb0:	d10f      	bne.n	8004bd2 <_dtoa_r+0x69a>
 8004bb2:	9904      	ldr	r1, [sp, #16]
 8004bb4:	4620      	mov	r0, r4
 8004bb6:	f7ff f8f5 	bl	8003da4 <_Bfree>
 8004bba:	2300      	movs	r3, #0
 8004bbc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004bbe:	702b      	strb	r3, [r5, #0]
 8004bc0:	f10a 0301 	add.w	r3, sl, #1
 8004bc4:	6013      	str	r3, [r2, #0]
 8004bc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f000 8241 	beq.w	8005050 <_dtoa_r+0xb18>
 8004bce:	601d      	str	r5, [r3, #0]
 8004bd0:	e23e      	b.n	8005050 <_dtoa_r+0xb18>
 8004bd2:	f8cd a020 	str.w	sl, [sp, #32]
 8004bd6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004bda:	2a39      	cmp	r2, #57	; 0x39
 8004bdc:	f105 33ff 	add.w	r3, r5, #4294967295
 8004be0:	d108      	bne.n	8004bf4 <_dtoa_r+0x6bc>
 8004be2:	459b      	cmp	fp, r3
 8004be4:	d10a      	bne.n	8004bfc <_dtoa_r+0x6c4>
 8004be6:	9b08      	ldr	r3, [sp, #32]
 8004be8:	3301      	adds	r3, #1
 8004bea:	9308      	str	r3, [sp, #32]
 8004bec:	2330      	movs	r3, #48	; 0x30
 8004bee:	f88b 3000 	strb.w	r3, [fp]
 8004bf2:	465b      	mov	r3, fp
 8004bf4:	781a      	ldrb	r2, [r3, #0]
 8004bf6:	3201      	adds	r2, #1
 8004bf8:	701a      	strb	r2, [r3, #0]
 8004bfa:	e78c      	b.n	8004b16 <_dtoa_r+0x5de>
 8004bfc:	461d      	mov	r5, r3
 8004bfe:	e7ea      	b.n	8004bd6 <_dtoa_r+0x69e>
 8004c00:	2200      	movs	r2, #0
 8004c02:	4b9b      	ldr	r3, [pc, #620]	; (8004e70 <_dtoa_r+0x938>)
 8004c04:	f7fb fca4 	bl	8000550 <__aeabi_dmul>
 8004c08:	2200      	movs	r2, #0
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	4606      	mov	r6, r0
 8004c0e:	460f      	mov	r7, r1
 8004c10:	f7fb ff06 	bl	8000a20 <__aeabi_dcmpeq>
 8004c14:	2800      	cmp	r0, #0
 8004c16:	d09a      	beq.n	8004b4e <_dtoa_r+0x616>
 8004c18:	e7cb      	b.n	8004bb2 <_dtoa_r+0x67a>
 8004c1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c1c:	2a00      	cmp	r2, #0
 8004c1e:	f000 808b 	beq.w	8004d38 <_dtoa_r+0x800>
 8004c22:	9a06      	ldr	r2, [sp, #24]
 8004c24:	2a01      	cmp	r2, #1
 8004c26:	dc6e      	bgt.n	8004d06 <_dtoa_r+0x7ce>
 8004c28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004c2a:	2a00      	cmp	r2, #0
 8004c2c:	d067      	beq.n	8004cfe <_dtoa_r+0x7c6>
 8004c2e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004c32:	9f07      	ldr	r7, [sp, #28]
 8004c34:	9d05      	ldr	r5, [sp, #20]
 8004c36:	9a05      	ldr	r2, [sp, #20]
 8004c38:	2101      	movs	r1, #1
 8004c3a:	441a      	add	r2, r3
 8004c3c:	4620      	mov	r0, r4
 8004c3e:	9205      	str	r2, [sp, #20]
 8004c40:	4498      	add	r8, r3
 8004c42:	f7ff f94f 	bl	8003ee4 <__i2b>
 8004c46:	4606      	mov	r6, r0
 8004c48:	2d00      	cmp	r5, #0
 8004c4a:	dd0c      	ble.n	8004c66 <_dtoa_r+0x72e>
 8004c4c:	f1b8 0f00 	cmp.w	r8, #0
 8004c50:	dd09      	ble.n	8004c66 <_dtoa_r+0x72e>
 8004c52:	4545      	cmp	r5, r8
 8004c54:	9a05      	ldr	r2, [sp, #20]
 8004c56:	462b      	mov	r3, r5
 8004c58:	bfa8      	it	ge
 8004c5a:	4643      	movge	r3, r8
 8004c5c:	1ad2      	subs	r2, r2, r3
 8004c5e:	9205      	str	r2, [sp, #20]
 8004c60:	1aed      	subs	r5, r5, r3
 8004c62:	eba8 0803 	sub.w	r8, r8, r3
 8004c66:	9b07      	ldr	r3, [sp, #28]
 8004c68:	b1eb      	cbz	r3, 8004ca6 <_dtoa_r+0x76e>
 8004c6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d067      	beq.n	8004d40 <_dtoa_r+0x808>
 8004c70:	b18f      	cbz	r7, 8004c96 <_dtoa_r+0x75e>
 8004c72:	4631      	mov	r1, r6
 8004c74:	463a      	mov	r2, r7
 8004c76:	4620      	mov	r0, r4
 8004c78:	f7ff f9d4 	bl	8004024 <__pow5mult>
 8004c7c:	9a04      	ldr	r2, [sp, #16]
 8004c7e:	4601      	mov	r1, r0
 8004c80:	4606      	mov	r6, r0
 8004c82:	4620      	mov	r0, r4
 8004c84:	f7ff f937 	bl	8003ef6 <__multiply>
 8004c88:	9904      	ldr	r1, [sp, #16]
 8004c8a:	9008      	str	r0, [sp, #32]
 8004c8c:	4620      	mov	r0, r4
 8004c8e:	f7ff f889 	bl	8003da4 <_Bfree>
 8004c92:	9b08      	ldr	r3, [sp, #32]
 8004c94:	9304      	str	r3, [sp, #16]
 8004c96:	9b07      	ldr	r3, [sp, #28]
 8004c98:	1bda      	subs	r2, r3, r7
 8004c9a:	d004      	beq.n	8004ca6 <_dtoa_r+0x76e>
 8004c9c:	9904      	ldr	r1, [sp, #16]
 8004c9e:	4620      	mov	r0, r4
 8004ca0:	f7ff f9c0 	bl	8004024 <__pow5mult>
 8004ca4:	9004      	str	r0, [sp, #16]
 8004ca6:	2101      	movs	r1, #1
 8004ca8:	4620      	mov	r0, r4
 8004caa:	f7ff f91b 	bl	8003ee4 <__i2b>
 8004cae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004cb0:	4607      	mov	r7, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f000 81d0 	beq.w	8005058 <_dtoa_r+0xb20>
 8004cb8:	461a      	mov	r2, r3
 8004cba:	4601      	mov	r1, r0
 8004cbc:	4620      	mov	r0, r4
 8004cbe:	f7ff f9b1 	bl	8004024 <__pow5mult>
 8004cc2:	9b06      	ldr	r3, [sp, #24]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	4607      	mov	r7, r0
 8004cc8:	dc40      	bgt.n	8004d4c <_dtoa_r+0x814>
 8004cca:	9b00      	ldr	r3, [sp, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d139      	bne.n	8004d44 <_dtoa_r+0x80c>
 8004cd0:	9b01      	ldr	r3, [sp, #4]
 8004cd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d136      	bne.n	8004d48 <_dtoa_r+0x810>
 8004cda:	9b01      	ldr	r3, [sp, #4]
 8004cdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ce0:	0d1b      	lsrs	r3, r3, #20
 8004ce2:	051b      	lsls	r3, r3, #20
 8004ce4:	b12b      	cbz	r3, 8004cf2 <_dtoa_r+0x7ba>
 8004ce6:	9b05      	ldr	r3, [sp, #20]
 8004ce8:	3301      	adds	r3, #1
 8004cea:	9305      	str	r3, [sp, #20]
 8004cec:	f108 0801 	add.w	r8, r8, #1
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	9307      	str	r3, [sp, #28]
 8004cf4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d12a      	bne.n	8004d50 <_dtoa_r+0x818>
 8004cfa:	2001      	movs	r0, #1
 8004cfc:	e030      	b.n	8004d60 <_dtoa_r+0x828>
 8004cfe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004d00:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004d04:	e795      	b.n	8004c32 <_dtoa_r+0x6fa>
 8004d06:	9b07      	ldr	r3, [sp, #28]
 8004d08:	f109 37ff 	add.w	r7, r9, #4294967295
 8004d0c:	42bb      	cmp	r3, r7
 8004d0e:	bfbf      	itttt	lt
 8004d10:	9b07      	ldrlt	r3, [sp, #28]
 8004d12:	9707      	strlt	r7, [sp, #28]
 8004d14:	1afa      	sublt	r2, r7, r3
 8004d16:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004d18:	bfbb      	ittet	lt
 8004d1a:	189b      	addlt	r3, r3, r2
 8004d1c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004d1e:	1bdf      	subge	r7, r3, r7
 8004d20:	2700      	movlt	r7, #0
 8004d22:	f1b9 0f00 	cmp.w	r9, #0
 8004d26:	bfb5      	itete	lt
 8004d28:	9b05      	ldrlt	r3, [sp, #20]
 8004d2a:	9d05      	ldrge	r5, [sp, #20]
 8004d2c:	eba3 0509 	sublt.w	r5, r3, r9
 8004d30:	464b      	movge	r3, r9
 8004d32:	bfb8      	it	lt
 8004d34:	2300      	movlt	r3, #0
 8004d36:	e77e      	b.n	8004c36 <_dtoa_r+0x6fe>
 8004d38:	9f07      	ldr	r7, [sp, #28]
 8004d3a:	9d05      	ldr	r5, [sp, #20]
 8004d3c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8004d3e:	e783      	b.n	8004c48 <_dtoa_r+0x710>
 8004d40:	9a07      	ldr	r2, [sp, #28]
 8004d42:	e7ab      	b.n	8004c9c <_dtoa_r+0x764>
 8004d44:	2300      	movs	r3, #0
 8004d46:	e7d4      	b.n	8004cf2 <_dtoa_r+0x7ba>
 8004d48:	9b00      	ldr	r3, [sp, #0]
 8004d4a:	e7d2      	b.n	8004cf2 <_dtoa_r+0x7ba>
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	9307      	str	r3, [sp, #28]
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8004d56:	6918      	ldr	r0, [r3, #16]
 8004d58:	f7ff f876 	bl	8003e48 <__hi0bits>
 8004d5c:	f1c0 0020 	rsb	r0, r0, #32
 8004d60:	4440      	add	r0, r8
 8004d62:	f010 001f 	ands.w	r0, r0, #31
 8004d66:	d047      	beq.n	8004df8 <_dtoa_r+0x8c0>
 8004d68:	f1c0 0320 	rsb	r3, r0, #32
 8004d6c:	2b04      	cmp	r3, #4
 8004d6e:	dd3b      	ble.n	8004de8 <_dtoa_r+0x8b0>
 8004d70:	9b05      	ldr	r3, [sp, #20]
 8004d72:	f1c0 001c 	rsb	r0, r0, #28
 8004d76:	4403      	add	r3, r0
 8004d78:	9305      	str	r3, [sp, #20]
 8004d7a:	4405      	add	r5, r0
 8004d7c:	4480      	add	r8, r0
 8004d7e:	9b05      	ldr	r3, [sp, #20]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	dd05      	ble.n	8004d90 <_dtoa_r+0x858>
 8004d84:	461a      	mov	r2, r3
 8004d86:	9904      	ldr	r1, [sp, #16]
 8004d88:	4620      	mov	r0, r4
 8004d8a:	f7ff f999 	bl	80040c0 <__lshift>
 8004d8e:	9004      	str	r0, [sp, #16]
 8004d90:	f1b8 0f00 	cmp.w	r8, #0
 8004d94:	dd05      	ble.n	8004da2 <_dtoa_r+0x86a>
 8004d96:	4639      	mov	r1, r7
 8004d98:	4642      	mov	r2, r8
 8004d9a:	4620      	mov	r0, r4
 8004d9c:	f7ff f990 	bl	80040c0 <__lshift>
 8004da0:	4607      	mov	r7, r0
 8004da2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004da4:	b353      	cbz	r3, 8004dfc <_dtoa_r+0x8c4>
 8004da6:	4639      	mov	r1, r7
 8004da8:	9804      	ldr	r0, [sp, #16]
 8004daa:	f7ff f9dd 	bl	8004168 <__mcmp>
 8004dae:	2800      	cmp	r0, #0
 8004db0:	da24      	bge.n	8004dfc <_dtoa_r+0x8c4>
 8004db2:	2300      	movs	r3, #0
 8004db4:	220a      	movs	r2, #10
 8004db6:	9904      	ldr	r1, [sp, #16]
 8004db8:	4620      	mov	r0, r4
 8004dba:	f7ff f80a 	bl	8003dd2 <__multadd>
 8004dbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dc0:	9004      	str	r0, [sp, #16]
 8004dc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	f000 814d 	beq.w	8005066 <_dtoa_r+0xb2e>
 8004dcc:	2300      	movs	r3, #0
 8004dce:	4631      	mov	r1, r6
 8004dd0:	220a      	movs	r2, #10
 8004dd2:	4620      	mov	r0, r4
 8004dd4:	f7fe fffd 	bl	8003dd2 <__multadd>
 8004dd8:	9b02      	ldr	r3, [sp, #8]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	4606      	mov	r6, r0
 8004dde:	dc4f      	bgt.n	8004e80 <_dtoa_r+0x948>
 8004de0:	9b06      	ldr	r3, [sp, #24]
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	dd4c      	ble.n	8004e80 <_dtoa_r+0x948>
 8004de6:	e011      	b.n	8004e0c <_dtoa_r+0x8d4>
 8004de8:	d0c9      	beq.n	8004d7e <_dtoa_r+0x846>
 8004dea:	9a05      	ldr	r2, [sp, #20]
 8004dec:	331c      	adds	r3, #28
 8004dee:	441a      	add	r2, r3
 8004df0:	9205      	str	r2, [sp, #20]
 8004df2:	441d      	add	r5, r3
 8004df4:	4498      	add	r8, r3
 8004df6:	e7c2      	b.n	8004d7e <_dtoa_r+0x846>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	e7f6      	b.n	8004dea <_dtoa_r+0x8b2>
 8004dfc:	f1b9 0f00 	cmp.w	r9, #0
 8004e00:	dc38      	bgt.n	8004e74 <_dtoa_r+0x93c>
 8004e02:	9b06      	ldr	r3, [sp, #24]
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	dd35      	ble.n	8004e74 <_dtoa_r+0x93c>
 8004e08:	f8cd 9008 	str.w	r9, [sp, #8]
 8004e0c:	9b02      	ldr	r3, [sp, #8]
 8004e0e:	b963      	cbnz	r3, 8004e2a <_dtoa_r+0x8f2>
 8004e10:	4639      	mov	r1, r7
 8004e12:	2205      	movs	r2, #5
 8004e14:	4620      	mov	r0, r4
 8004e16:	f7fe ffdc 	bl	8003dd2 <__multadd>
 8004e1a:	4601      	mov	r1, r0
 8004e1c:	4607      	mov	r7, r0
 8004e1e:	9804      	ldr	r0, [sp, #16]
 8004e20:	f7ff f9a2 	bl	8004168 <__mcmp>
 8004e24:	2800      	cmp	r0, #0
 8004e26:	f73f adcc 	bgt.w	80049c2 <_dtoa_r+0x48a>
 8004e2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e2c:	465d      	mov	r5, fp
 8004e2e:	ea6f 0a03 	mvn.w	sl, r3
 8004e32:	f04f 0900 	mov.w	r9, #0
 8004e36:	4639      	mov	r1, r7
 8004e38:	4620      	mov	r0, r4
 8004e3a:	f7fe ffb3 	bl	8003da4 <_Bfree>
 8004e3e:	2e00      	cmp	r6, #0
 8004e40:	f43f aeb7 	beq.w	8004bb2 <_dtoa_r+0x67a>
 8004e44:	f1b9 0f00 	cmp.w	r9, #0
 8004e48:	d005      	beq.n	8004e56 <_dtoa_r+0x91e>
 8004e4a:	45b1      	cmp	r9, r6
 8004e4c:	d003      	beq.n	8004e56 <_dtoa_r+0x91e>
 8004e4e:	4649      	mov	r1, r9
 8004e50:	4620      	mov	r0, r4
 8004e52:	f7fe ffa7 	bl	8003da4 <_Bfree>
 8004e56:	4631      	mov	r1, r6
 8004e58:	4620      	mov	r0, r4
 8004e5a:	f7fe ffa3 	bl	8003da4 <_Bfree>
 8004e5e:	e6a8      	b.n	8004bb2 <_dtoa_r+0x67a>
 8004e60:	2700      	movs	r7, #0
 8004e62:	463e      	mov	r6, r7
 8004e64:	e7e1      	b.n	8004e2a <_dtoa_r+0x8f2>
 8004e66:	f8dd a020 	ldr.w	sl, [sp, #32]
 8004e6a:	463e      	mov	r6, r7
 8004e6c:	e5a9      	b.n	80049c2 <_dtoa_r+0x48a>
 8004e6e:	bf00      	nop
 8004e70:	40240000 	.word	0x40240000
 8004e74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e76:	f8cd 9008 	str.w	r9, [sp, #8]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	f000 80fa 	beq.w	8005074 <_dtoa_r+0xb3c>
 8004e80:	2d00      	cmp	r5, #0
 8004e82:	dd05      	ble.n	8004e90 <_dtoa_r+0x958>
 8004e84:	4631      	mov	r1, r6
 8004e86:	462a      	mov	r2, r5
 8004e88:	4620      	mov	r0, r4
 8004e8a:	f7ff f919 	bl	80040c0 <__lshift>
 8004e8e:	4606      	mov	r6, r0
 8004e90:	9b07      	ldr	r3, [sp, #28]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d04c      	beq.n	8004f30 <_dtoa_r+0x9f8>
 8004e96:	6871      	ldr	r1, [r6, #4]
 8004e98:	4620      	mov	r0, r4
 8004e9a:	f7fe ff4f 	bl	8003d3c <_Balloc>
 8004e9e:	6932      	ldr	r2, [r6, #16]
 8004ea0:	3202      	adds	r2, #2
 8004ea2:	4605      	mov	r5, r0
 8004ea4:	0092      	lsls	r2, r2, #2
 8004ea6:	f106 010c 	add.w	r1, r6, #12
 8004eaa:	300c      	adds	r0, #12
 8004eac:	f000 f904 	bl	80050b8 <memcpy>
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	4629      	mov	r1, r5
 8004eb4:	4620      	mov	r0, r4
 8004eb6:	f7ff f903 	bl	80040c0 <__lshift>
 8004eba:	9b00      	ldr	r3, [sp, #0]
 8004ebc:	f8cd b014 	str.w	fp, [sp, #20]
 8004ec0:	f003 0301 	and.w	r3, r3, #1
 8004ec4:	46b1      	mov	r9, r6
 8004ec6:	9307      	str	r3, [sp, #28]
 8004ec8:	4606      	mov	r6, r0
 8004eca:	4639      	mov	r1, r7
 8004ecc:	9804      	ldr	r0, [sp, #16]
 8004ece:	f7ff faa7 	bl	8004420 <quorem>
 8004ed2:	4649      	mov	r1, r9
 8004ed4:	4605      	mov	r5, r0
 8004ed6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004eda:	9804      	ldr	r0, [sp, #16]
 8004edc:	f7ff f944 	bl	8004168 <__mcmp>
 8004ee0:	4632      	mov	r2, r6
 8004ee2:	9000      	str	r0, [sp, #0]
 8004ee4:	4639      	mov	r1, r7
 8004ee6:	4620      	mov	r0, r4
 8004ee8:	f7ff f958 	bl	800419c <__mdiff>
 8004eec:	68c3      	ldr	r3, [r0, #12]
 8004eee:	4602      	mov	r2, r0
 8004ef0:	bb03      	cbnz	r3, 8004f34 <_dtoa_r+0x9fc>
 8004ef2:	4601      	mov	r1, r0
 8004ef4:	9008      	str	r0, [sp, #32]
 8004ef6:	9804      	ldr	r0, [sp, #16]
 8004ef8:	f7ff f936 	bl	8004168 <__mcmp>
 8004efc:	9a08      	ldr	r2, [sp, #32]
 8004efe:	4603      	mov	r3, r0
 8004f00:	4611      	mov	r1, r2
 8004f02:	4620      	mov	r0, r4
 8004f04:	9308      	str	r3, [sp, #32]
 8004f06:	f7fe ff4d 	bl	8003da4 <_Bfree>
 8004f0a:	9b08      	ldr	r3, [sp, #32]
 8004f0c:	b9a3      	cbnz	r3, 8004f38 <_dtoa_r+0xa00>
 8004f0e:	9a06      	ldr	r2, [sp, #24]
 8004f10:	b992      	cbnz	r2, 8004f38 <_dtoa_r+0xa00>
 8004f12:	9a07      	ldr	r2, [sp, #28]
 8004f14:	b982      	cbnz	r2, 8004f38 <_dtoa_r+0xa00>
 8004f16:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004f1a:	d029      	beq.n	8004f70 <_dtoa_r+0xa38>
 8004f1c:	9b00      	ldr	r3, [sp, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	dd01      	ble.n	8004f26 <_dtoa_r+0x9ee>
 8004f22:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8004f26:	9b05      	ldr	r3, [sp, #20]
 8004f28:	1c5d      	adds	r5, r3, #1
 8004f2a:	f883 8000 	strb.w	r8, [r3]
 8004f2e:	e782      	b.n	8004e36 <_dtoa_r+0x8fe>
 8004f30:	4630      	mov	r0, r6
 8004f32:	e7c2      	b.n	8004eba <_dtoa_r+0x982>
 8004f34:	2301      	movs	r3, #1
 8004f36:	e7e3      	b.n	8004f00 <_dtoa_r+0x9c8>
 8004f38:	9a00      	ldr	r2, [sp, #0]
 8004f3a:	2a00      	cmp	r2, #0
 8004f3c:	db04      	blt.n	8004f48 <_dtoa_r+0xa10>
 8004f3e:	d125      	bne.n	8004f8c <_dtoa_r+0xa54>
 8004f40:	9a06      	ldr	r2, [sp, #24]
 8004f42:	bb1a      	cbnz	r2, 8004f8c <_dtoa_r+0xa54>
 8004f44:	9a07      	ldr	r2, [sp, #28]
 8004f46:	bb0a      	cbnz	r2, 8004f8c <_dtoa_r+0xa54>
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	ddec      	ble.n	8004f26 <_dtoa_r+0x9ee>
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	9904      	ldr	r1, [sp, #16]
 8004f50:	4620      	mov	r0, r4
 8004f52:	f7ff f8b5 	bl	80040c0 <__lshift>
 8004f56:	4639      	mov	r1, r7
 8004f58:	9004      	str	r0, [sp, #16]
 8004f5a:	f7ff f905 	bl	8004168 <__mcmp>
 8004f5e:	2800      	cmp	r0, #0
 8004f60:	dc03      	bgt.n	8004f6a <_dtoa_r+0xa32>
 8004f62:	d1e0      	bne.n	8004f26 <_dtoa_r+0x9ee>
 8004f64:	f018 0f01 	tst.w	r8, #1
 8004f68:	d0dd      	beq.n	8004f26 <_dtoa_r+0x9ee>
 8004f6a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004f6e:	d1d8      	bne.n	8004f22 <_dtoa_r+0x9ea>
 8004f70:	9b05      	ldr	r3, [sp, #20]
 8004f72:	9a05      	ldr	r2, [sp, #20]
 8004f74:	1c5d      	adds	r5, r3, #1
 8004f76:	2339      	movs	r3, #57	; 0x39
 8004f78:	7013      	strb	r3, [r2, #0]
 8004f7a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004f7e:	2b39      	cmp	r3, #57	; 0x39
 8004f80:	f105 32ff 	add.w	r2, r5, #4294967295
 8004f84:	d04f      	beq.n	8005026 <_dtoa_r+0xaee>
 8004f86:	3301      	adds	r3, #1
 8004f88:	7013      	strb	r3, [r2, #0]
 8004f8a:	e754      	b.n	8004e36 <_dtoa_r+0x8fe>
 8004f8c:	9a05      	ldr	r2, [sp, #20]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f102 0501 	add.w	r5, r2, #1
 8004f94:	dd06      	ble.n	8004fa4 <_dtoa_r+0xa6c>
 8004f96:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004f9a:	d0e9      	beq.n	8004f70 <_dtoa_r+0xa38>
 8004f9c:	f108 0801 	add.w	r8, r8, #1
 8004fa0:	9b05      	ldr	r3, [sp, #20]
 8004fa2:	e7c2      	b.n	8004f2a <_dtoa_r+0x9f2>
 8004fa4:	9a02      	ldr	r2, [sp, #8]
 8004fa6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8004faa:	eba5 030b 	sub.w	r3, r5, fp
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d021      	beq.n	8004ff6 <_dtoa_r+0xabe>
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	220a      	movs	r2, #10
 8004fb6:	9904      	ldr	r1, [sp, #16]
 8004fb8:	4620      	mov	r0, r4
 8004fba:	f7fe ff0a 	bl	8003dd2 <__multadd>
 8004fbe:	45b1      	cmp	r9, r6
 8004fc0:	9004      	str	r0, [sp, #16]
 8004fc2:	f04f 0300 	mov.w	r3, #0
 8004fc6:	f04f 020a 	mov.w	r2, #10
 8004fca:	4649      	mov	r1, r9
 8004fcc:	4620      	mov	r0, r4
 8004fce:	d105      	bne.n	8004fdc <_dtoa_r+0xaa4>
 8004fd0:	f7fe feff 	bl	8003dd2 <__multadd>
 8004fd4:	4681      	mov	r9, r0
 8004fd6:	4606      	mov	r6, r0
 8004fd8:	9505      	str	r5, [sp, #20]
 8004fda:	e776      	b.n	8004eca <_dtoa_r+0x992>
 8004fdc:	f7fe fef9 	bl	8003dd2 <__multadd>
 8004fe0:	4631      	mov	r1, r6
 8004fe2:	4681      	mov	r9, r0
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	220a      	movs	r2, #10
 8004fe8:	4620      	mov	r0, r4
 8004fea:	f7fe fef2 	bl	8003dd2 <__multadd>
 8004fee:	4606      	mov	r6, r0
 8004ff0:	e7f2      	b.n	8004fd8 <_dtoa_r+0xaa0>
 8004ff2:	f04f 0900 	mov.w	r9, #0
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	9904      	ldr	r1, [sp, #16]
 8004ffa:	4620      	mov	r0, r4
 8004ffc:	f7ff f860 	bl	80040c0 <__lshift>
 8005000:	4639      	mov	r1, r7
 8005002:	9004      	str	r0, [sp, #16]
 8005004:	f7ff f8b0 	bl	8004168 <__mcmp>
 8005008:	2800      	cmp	r0, #0
 800500a:	dcb6      	bgt.n	8004f7a <_dtoa_r+0xa42>
 800500c:	d102      	bne.n	8005014 <_dtoa_r+0xadc>
 800500e:	f018 0f01 	tst.w	r8, #1
 8005012:	d1b2      	bne.n	8004f7a <_dtoa_r+0xa42>
 8005014:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005018:	2b30      	cmp	r3, #48	; 0x30
 800501a:	f105 32ff 	add.w	r2, r5, #4294967295
 800501e:	f47f af0a 	bne.w	8004e36 <_dtoa_r+0x8fe>
 8005022:	4615      	mov	r5, r2
 8005024:	e7f6      	b.n	8005014 <_dtoa_r+0xadc>
 8005026:	4593      	cmp	fp, r2
 8005028:	d105      	bne.n	8005036 <_dtoa_r+0xafe>
 800502a:	2331      	movs	r3, #49	; 0x31
 800502c:	f10a 0a01 	add.w	sl, sl, #1
 8005030:	f88b 3000 	strb.w	r3, [fp]
 8005034:	e6ff      	b.n	8004e36 <_dtoa_r+0x8fe>
 8005036:	4615      	mov	r5, r2
 8005038:	e79f      	b.n	8004f7a <_dtoa_r+0xa42>
 800503a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80050a0 <_dtoa_r+0xb68>
 800503e:	e007      	b.n	8005050 <_dtoa_r+0xb18>
 8005040:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005042:	f8df b060 	ldr.w	fp, [pc, #96]	; 80050a4 <_dtoa_r+0xb6c>
 8005046:	b11b      	cbz	r3, 8005050 <_dtoa_r+0xb18>
 8005048:	f10b 0308 	add.w	r3, fp, #8
 800504c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800504e:	6013      	str	r3, [r2, #0]
 8005050:	4658      	mov	r0, fp
 8005052:	b017      	add	sp, #92	; 0x5c
 8005054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005058:	9b06      	ldr	r3, [sp, #24]
 800505a:	2b01      	cmp	r3, #1
 800505c:	f77f ae35 	ble.w	8004cca <_dtoa_r+0x792>
 8005060:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005062:	9307      	str	r3, [sp, #28]
 8005064:	e649      	b.n	8004cfa <_dtoa_r+0x7c2>
 8005066:	9b02      	ldr	r3, [sp, #8]
 8005068:	2b00      	cmp	r3, #0
 800506a:	dc03      	bgt.n	8005074 <_dtoa_r+0xb3c>
 800506c:	9b06      	ldr	r3, [sp, #24]
 800506e:	2b02      	cmp	r3, #2
 8005070:	f73f aecc 	bgt.w	8004e0c <_dtoa_r+0x8d4>
 8005074:	465d      	mov	r5, fp
 8005076:	4639      	mov	r1, r7
 8005078:	9804      	ldr	r0, [sp, #16]
 800507a:	f7ff f9d1 	bl	8004420 <quorem>
 800507e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005082:	f805 8b01 	strb.w	r8, [r5], #1
 8005086:	9a02      	ldr	r2, [sp, #8]
 8005088:	eba5 030b 	sub.w	r3, r5, fp
 800508c:	429a      	cmp	r2, r3
 800508e:	ddb0      	ble.n	8004ff2 <_dtoa_r+0xaba>
 8005090:	2300      	movs	r3, #0
 8005092:	220a      	movs	r2, #10
 8005094:	9904      	ldr	r1, [sp, #16]
 8005096:	4620      	mov	r0, r4
 8005098:	f7fe fe9b 	bl	8003dd2 <__multadd>
 800509c:	9004      	str	r0, [sp, #16]
 800509e:	e7ea      	b.n	8005076 <_dtoa_r+0xb3e>
 80050a0:	080052b1 	.word	0x080052b1
 80050a4:	080052a4 	.word	0x080052a4

080050a8 <malloc>:
 80050a8:	4b02      	ldr	r3, [pc, #8]	; (80050b4 <malloc+0xc>)
 80050aa:	4601      	mov	r1, r0
 80050ac:	6818      	ldr	r0, [r3, #0]
 80050ae:	f7ff b94d 	b.w	800434c <_malloc_r>
 80050b2:	bf00      	nop
 80050b4:	20000004 	.word	0x20000004

080050b8 <memcpy>:
 80050b8:	b510      	push	{r4, lr}
 80050ba:	1e43      	subs	r3, r0, #1
 80050bc:	440a      	add	r2, r1
 80050be:	4291      	cmp	r1, r2
 80050c0:	d100      	bne.n	80050c4 <memcpy+0xc>
 80050c2:	bd10      	pop	{r4, pc}
 80050c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050cc:	e7f7      	b.n	80050be <memcpy+0x6>

080050ce <__malloc_lock>:
 80050ce:	4770      	bx	lr

080050d0 <__malloc_unlock>:
 80050d0:	4770      	bx	lr
	...

080050d4 <_init>:
 80050d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050d6:	bf00      	nop
 80050d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050da:	bc08      	pop	{r3}
 80050dc:	469e      	mov	lr, r3
 80050de:	4770      	bx	lr

080050e0 <_fini>:
 80050e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050e2:	bf00      	nop
 80050e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050e6:	bc08      	pop	{r3}
 80050e8:	469e      	mov	lr, r3
 80050ea:	4770      	bx	lr
