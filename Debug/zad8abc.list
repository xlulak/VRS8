
zad8abc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ecc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08003054  08003054  00013054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031b0  080031b0  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  080031b0  080031b0  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031b0  080031b0  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031b0  080031b0  000131b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031b4  080031b4  000131b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080031b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  200001d4  0800338c  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  0800338c  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008c87  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ab1  00000000  00000000  00028e8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000958  00000000  00000000  0002a940  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000870  00000000  00000000  0002b298  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000186c4  00000000  00000000  0002bb08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000668f  00000000  00000000  000441cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00084c02  00000000  00000000  0004a85b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cf45d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002824  00000000  00000000  000cf4d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001d4 	.word	0x200001d4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800303c 	.word	0x0800303c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001d8 	.word	0x200001d8
 80001c4:	0800303c 	.word	0x0800303c

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <LL_ADC_REG_SetSequencerLength>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
 80001f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001fa:	f023 020f 	bic.w	r2, r3, #15
 80001fe:	683b      	ldr	r3, [r7, #0]
 8000200:	431a      	orrs	r2, r3
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000206:	bf00      	nop
 8000208:	370c      	adds	r7, #12
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr

08000212 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000212:	b480      	push	{r7}
 8000214:	b083      	sub	sp, #12
 8000216:	af00      	add	r7, sp, #0
 8000218:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	689b      	ldr	r3, [r3, #8]
 800021e:	f003 0301 	and.w	r3, r3, #1
 8000222:	2b01      	cmp	r3, #1
 8000224:	bf0c      	ite	eq
 8000226:	2301      	moveq	r3, #1
 8000228:	2300      	movne	r3, #0
 800022a:	b2db      	uxtb	r3, r3
}
 800022c:	4618      	mov	r0, r3
 800022e:	370c      	adds	r7, #12
 8000230:	46bd      	mov	sp, r7
 8000232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000236:	4770      	bx	lr

08000238 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8000238:	b590      	push	{r4, r7, lr}
 800023a:	b085      	sub	sp, #20
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
 8000240:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8000242:	2300      	movs	r3, #0
 8000244:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 8000246:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800024a:	f7ff ffe2 	bl	8000212 <LL_ADC_IsEnabled>
 800024e:	4604      	mov	r4, r0
 8000250:	4817      	ldr	r0, [pc, #92]	; (80002b0 <LL_ADC_CommonInit+0x78>)
 8000252:	f7ff ffde 	bl	8000212 <LL_ADC_IsEnabled>
 8000256:	4603      	mov	r3, r0
 8000258:	4323      	orrs	r3, r4
 800025a:	2b00      	cmp	r3, #0
 800025c:	d120      	bne.n	80002a0 <LL_ADC_CommonInit+0x68>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 800025e:	683b      	ldr	r3, [r7, #0]
 8000260:	685b      	ldr	r3, [r3, #4]
 8000262:	2b00      	cmp	r3, #0
 8000264:	d012      	beq.n	800028c <LL_ADC_CommonInit+0x54>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	689a      	ldr	r2, [r3, #8]
 800026a:	4b12      	ldr	r3, [pc, #72]	; (80002b4 <LL_ADC_CommonInit+0x7c>)
 800026c:	4013      	ands	r3, r2
 800026e:	683a      	ldr	r2, [r7, #0]
 8000270:	6811      	ldr	r1, [r2, #0]
 8000272:	683a      	ldr	r2, [r7, #0]
 8000274:	6852      	ldr	r2, [r2, #4]
 8000276:	4311      	orrs	r1, r2
 8000278:	683a      	ldr	r2, [r7, #0]
 800027a:	6892      	ldr	r2, [r2, #8]
 800027c:	4311      	orrs	r1, r2
 800027e:	683a      	ldr	r2, [r7, #0]
 8000280:	68d2      	ldr	r2, [r2, #12]
 8000282:	430a      	orrs	r2, r1
 8000284:	431a      	orrs	r2, r3
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	609a      	str	r2, [r3, #8]
 800028a:	e00b      	b.n	80002a4 <LL_ADC_CommonInit+0x6c>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	689a      	ldr	r2, [r3, #8]
 8000290:	4b08      	ldr	r3, [pc, #32]	; (80002b4 <LL_ADC_CommonInit+0x7c>)
 8000292:	4013      	ands	r3, r2
 8000294:	683a      	ldr	r2, [r7, #0]
 8000296:	6812      	ldr	r2, [r2, #0]
 8000298:	431a      	orrs	r2, r3
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	609a      	str	r2, [r3, #8]
 800029e:	e001      	b.n	80002a4 <LL_ADC_CommonInit+0x6c>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 80002a0:	2301      	movs	r3, #1
 80002a2:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 80002a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80002a6:	4618      	mov	r0, r3
 80002a8:	3714      	adds	r7, #20
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd90      	pop	{r4, r7, pc}
 80002ae:	bf00      	nop
 80002b0:	50000100 	.word	0x50000100
 80002b4:	fffc30e0 	.word	0xfffc30e0

080002b8 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b084      	sub	sp, #16
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
 80002c0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80002c2:	2300      	movs	r3, #0
 80002c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80002c6:	6878      	ldr	r0, [r7, #4]
 80002c8:	f7ff ffa3 	bl	8000212 <LL_ADC_IsEnabled>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d111      	bne.n	80002f6 <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	68db      	ldr	r3, [r3, #12]
 80002d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80002da:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80002de:	683a      	ldr	r2, [r7, #0]
 80002e0:	6811      	ldr	r1, [r2, #0]
 80002e2:	683a      	ldr	r2, [r7, #0]
 80002e4:	6852      	ldr	r2, [r2, #4]
 80002e6:	4311      	orrs	r1, r2
 80002e8:	683a      	ldr	r2, [r7, #0]
 80002ea:	6892      	ldr	r2, [r2, #8]
 80002ec:	430a      	orrs	r2, r1
 80002ee:	431a      	orrs	r2, r3
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	60da      	str	r2, [r3, #12]
 80002f4:	e001      	b.n	80002fa <LL_ADC_Init+0x42>
    
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80002f6:	2301      	movs	r3, #1
 80002f8:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80002fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80002fc:	4618      	mov	r0, r3
 80002fe:	3710      	adds	r7, #16
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}

08000304 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b084      	sub	sp, #16
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
 800030c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800030e:	2300      	movs	r3, #0
 8000310:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8000312:	6878      	ldr	r0, [r7, #4]
 8000314:	f7ff ff7d 	bl	8000212 <LL_ADC_IsEnabled>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d132      	bne.n	8000384 <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800031e:	683b      	ldr	r3, [r7, #0]
 8000320:	685b      	ldr	r3, [r3, #4]
 8000322:	2b00      	cmp	r3, #0
 8000324:	d015      	beq.n	8000352 <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	68da      	ldr	r2, [r3, #12]
 800032a:	4b1a      	ldr	r3, [pc, #104]	; (8000394 <LL_ADC_REG_Init+0x90>)
 800032c:	4013      	ands	r3, r2
 800032e:	683a      	ldr	r2, [r7, #0]
 8000330:	6811      	ldr	r1, [r2, #0]
 8000332:	683a      	ldr	r2, [r7, #0]
 8000334:	6892      	ldr	r2, [r2, #8]
 8000336:	4311      	orrs	r1, r2
 8000338:	683a      	ldr	r2, [r7, #0]
 800033a:	68d2      	ldr	r2, [r2, #12]
 800033c:	4311      	orrs	r1, r2
 800033e:	683a      	ldr	r2, [r7, #0]
 8000340:	6912      	ldr	r2, [r2, #16]
 8000342:	4311      	orrs	r1, r2
 8000344:	683a      	ldr	r2, [r7, #0]
 8000346:	6952      	ldr	r2, [r2, #20]
 8000348:	430a      	orrs	r2, r1
 800034a:	431a      	orrs	r2, r3
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	60da      	str	r2, [r3, #12]
 8000350:	e011      	b.n	8000376 <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	68da      	ldr	r2, [r3, #12]
 8000356:	4b0f      	ldr	r3, [pc, #60]	; (8000394 <LL_ADC_REG_Init+0x90>)
 8000358:	4013      	ands	r3, r2
 800035a:	683a      	ldr	r2, [r7, #0]
 800035c:	6811      	ldr	r1, [r2, #0]
 800035e:	683a      	ldr	r2, [r7, #0]
 8000360:	68d2      	ldr	r2, [r2, #12]
 8000362:	4311      	orrs	r1, r2
 8000364:	683a      	ldr	r2, [r7, #0]
 8000366:	6912      	ldr	r2, [r2, #16]
 8000368:	4311      	orrs	r1, r2
 800036a:	683a      	ldr	r2, [r7, #0]
 800036c:	6952      	ldr	r2, [r2, #20]
 800036e:	430a      	orrs	r2, r1
 8000370:	431a      	orrs	r2, r3
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }
    
    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8000376:	683b      	ldr	r3, [r7, #0]
 8000378:	685b      	ldr	r3, [r3, #4]
 800037a:	4619      	mov	r1, r3
 800037c:	6878      	ldr	r0, [r7, #4]
 800037e:	f7ff ff35 	bl	80001ec <LL_ADC_REG_SetSequencerLength>
 8000382:	e001      	b.n	8000388 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8000384:	2301      	movs	r3, #1
 8000386:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8000388:	7bfb      	ldrb	r3, [r7, #15]
}
 800038a:	4618      	mov	r0, r3
 800038c:	3710      	adds	r7, #16
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	fff0c03c 	.word	0xfff0c03c

08000398 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000398:	b480      	push	{r7}
 800039a:	b089      	sub	sp, #36	; 0x24
 800039c:	af00      	add	r7, sp, #0
 800039e:	60f8      	str	r0, [r7, #12]
 80003a0:	60b9      	str	r1, [r7, #8]
 80003a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	681a      	ldr	r2, [r3, #0]
 80003a8:	68bb      	ldr	r3, [r7, #8]
 80003aa:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003ac:	697b      	ldr	r3, [r7, #20]
 80003ae:	fa93 f3a3 	rbit	r3, r3
 80003b2:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80003b4:	693b      	ldr	r3, [r7, #16]
 80003b6:	fab3 f383 	clz	r3, r3
 80003ba:	005b      	lsls	r3, r3, #1
 80003bc:	2103      	movs	r1, #3
 80003be:	fa01 f303 	lsl.w	r3, r1, r3
 80003c2:	43db      	mvns	r3, r3
 80003c4:	401a      	ands	r2, r3
 80003c6:	68bb      	ldr	r3, [r7, #8]
 80003c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003ca:	69fb      	ldr	r3, [r7, #28]
 80003cc:	fa93 f3a3 	rbit	r3, r3
 80003d0:	61bb      	str	r3, [r7, #24]
  return(result);
 80003d2:	69bb      	ldr	r3, [r7, #24]
 80003d4:	fab3 f383 	clz	r3, r3
 80003d8:	005b      	lsls	r3, r3, #1
 80003da:	6879      	ldr	r1, [r7, #4]
 80003dc:	fa01 f303 	lsl.w	r3, r1, r3
 80003e0:	431a      	orrs	r2, r3
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	601a      	str	r2, [r3, #0]
}
 80003e6:	bf00      	nop
 80003e8:	3724      	adds	r7, #36	; 0x24
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr

080003f2 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80003f2:	b480      	push	{r7}
 80003f4:	b085      	sub	sp, #20
 80003f6:	af00      	add	r7, sp, #0
 80003f8:	60f8      	str	r0, [r7, #12]
 80003fa:	60b9      	str	r1, [r7, #8]
 80003fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	685a      	ldr	r2, [r3, #4]
 8000402:	68bb      	ldr	r3, [r7, #8]
 8000404:	43db      	mvns	r3, r3
 8000406:	401a      	ands	r2, r3
 8000408:	68bb      	ldr	r3, [r7, #8]
 800040a:	6879      	ldr	r1, [r7, #4]
 800040c:	fb01 f303 	mul.w	r3, r1, r3
 8000410:	431a      	orrs	r2, r3
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	605a      	str	r2, [r3, #4]
}
 8000416:	bf00      	nop
 8000418:	3714      	adds	r7, #20
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr

08000422 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000422:	b480      	push	{r7}
 8000424:	b089      	sub	sp, #36	; 0x24
 8000426:	af00      	add	r7, sp, #0
 8000428:	60f8      	str	r0, [r7, #12]
 800042a:	60b9      	str	r1, [r7, #8]
 800042c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	689a      	ldr	r2, [r3, #8]
 8000432:	68bb      	ldr	r3, [r7, #8]
 8000434:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000436:	697b      	ldr	r3, [r7, #20]
 8000438:	fa93 f3a3 	rbit	r3, r3
 800043c:	613b      	str	r3, [r7, #16]
  return(result);
 800043e:	693b      	ldr	r3, [r7, #16]
 8000440:	fab3 f383 	clz	r3, r3
 8000444:	005b      	lsls	r3, r3, #1
 8000446:	2103      	movs	r1, #3
 8000448:	fa01 f303 	lsl.w	r3, r1, r3
 800044c:	43db      	mvns	r3, r3
 800044e:	401a      	ands	r2, r3
 8000450:	68bb      	ldr	r3, [r7, #8]
 8000452:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000454:	69fb      	ldr	r3, [r7, #28]
 8000456:	fa93 f3a3 	rbit	r3, r3
 800045a:	61bb      	str	r3, [r7, #24]
  return(result);
 800045c:	69bb      	ldr	r3, [r7, #24]
 800045e:	fab3 f383 	clz	r3, r3
 8000462:	005b      	lsls	r3, r3, #1
 8000464:	6879      	ldr	r1, [r7, #4]
 8000466:	fa01 f303 	lsl.w	r3, r1, r3
 800046a:	431a      	orrs	r2, r3
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8000470:	bf00      	nop
 8000472:	3724      	adds	r7, #36	; 0x24
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr

0800047c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800047c:	b480      	push	{r7}
 800047e:	b089      	sub	sp, #36	; 0x24
 8000480:	af00      	add	r7, sp, #0
 8000482:	60f8      	str	r0, [r7, #12]
 8000484:	60b9      	str	r1, [r7, #8]
 8000486:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	68da      	ldr	r2, [r3, #12]
 800048c:	68bb      	ldr	r3, [r7, #8]
 800048e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000490:	697b      	ldr	r3, [r7, #20]
 8000492:	fa93 f3a3 	rbit	r3, r3
 8000496:	613b      	str	r3, [r7, #16]
  return(result);
 8000498:	693b      	ldr	r3, [r7, #16]
 800049a:	fab3 f383 	clz	r3, r3
 800049e:	005b      	lsls	r3, r3, #1
 80004a0:	2103      	movs	r1, #3
 80004a2:	fa01 f303 	lsl.w	r3, r1, r3
 80004a6:	43db      	mvns	r3, r3
 80004a8:	401a      	ands	r2, r3
 80004aa:	68bb      	ldr	r3, [r7, #8]
 80004ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004ae:	69fb      	ldr	r3, [r7, #28]
 80004b0:	fa93 f3a3 	rbit	r3, r3
 80004b4:	61bb      	str	r3, [r7, #24]
  return(result);
 80004b6:	69bb      	ldr	r3, [r7, #24]
 80004b8:	fab3 f383 	clz	r3, r3
 80004bc:	005b      	lsls	r3, r3, #1
 80004be:	6879      	ldr	r1, [r7, #4]
 80004c0:	fa01 f303 	lsl.w	r3, r1, r3
 80004c4:	431a      	orrs	r2, r3
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	60da      	str	r2, [r3, #12]
}
 80004ca:	bf00      	nop
 80004cc:	3724      	adds	r7, #36	; 0x24
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr

080004d6 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80004d6:	b480      	push	{r7}
 80004d8:	b089      	sub	sp, #36	; 0x24
 80004da:	af00      	add	r7, sp, #0
 80004dc:	60f8      	str	r0, [r7, #12]
 80004de:	60b9      	str	r1, [r7, #8]
 80004e0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	6a1a      	ldr	r2, [r3, #32]
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	fa93 f3a3 	rbit	r3, r3
 80004f0:	613b      	str	r3, [r7, #16]
  return(result);
 80004f2:	693b      	ldr	r3, [r7, #16]
 80004f4:	fab3 f383 	clz	r3, r3
 80004f8:	009b      	lsls	r3, r3, #2
 80004fa:	210f      	movs	r1, #15
 80004fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000500:	43db      	mvns	r3, r3
 8000502:	401a      	ands	r2, r3
 8000504:	68bb      	ldr	r3, [r7, #8]
 8000506:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000508:	69fb      	ldr	r3, [r7, #28]
 800050a:	fa93 f3a3 	rbit	r3, r3
 800050e:	61bb      	str	r3, [r7, #24]
  return(result);
 8000510:	69bb      	ldr	r3, [r7, #24]
 8000512:	fab3 f383 	clz	r3, r3
 8000516:	009b      	lsls	r3, r3, #2
 8000518:	6879      	ldr	r1, [r7, #4]
 800051a:	fa01 f303 	lsl.w	r3, r1, r3
 800051e:	431a      	orrs	r2, r3
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8000524:	bf00      	nop
 8000526:	3724      	adds	r7, #36	; 0x24
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr

08000530 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000530:	b480      	push	{r7}
 8000532:	b089      	sub	sp, #36	; 0x24
 8000534:	af00      	add	r7, sp, #0
 8000536:	60f8      	str	r0, [r7, #12]
 8000538:	60b9      	str	r1, [r7, #8]
 800053a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	0a1b      	lsrs	r3, r3, #8
 8000544:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	fa93 f3a3 	rbit	r3, r3
 800054c:	613b      	str	r3, [r7, #16]
  return(result);
 800054e:	693b      	ldr	r3, [r7, #16]
 8000550:	fab3 f383 	clz	r3, r3
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	210f      	movs	r1, #15
 8000558:	fa01 f303 	lsl.w	r3, r1, r3
 800055c:	43db      	mvns	r3, r3
 800055e:	401a      	ands	r2, r3
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	0a1b      	lsrs	r3, r3, #8
 8000564:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000566:	69fb      	ldr	r3, [r7, #28]
 8000568:	fa93 f3a3 	rbit	r3, r3
 800056c:	61bb      	str	r3, [r7, #24]
  return(result);
 800056e:	69bb      	ldr	r3, [r7, #24]
 8000570:	fab3 f383 	clz	r3, r3
 8000574:	009b      	lsls	r3, r3, #2
 8000576:	6879      	ldr	r1, [r7, #4]
 8000578:	fa01 f303 	lsl.w	r3, r1, r3
 800057c:	431a      	orrs	r2, r3
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8000582:	bf00      	nop
 8000584:	3724      	adds	r7, #36	; 0x24
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr

0800058e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800058e:	b580      	push	{r7, lr}
 8000590:	b088      	sub	sp, #32
 8000592:	af00      	add	r7, sp, #0
 8000594:	6078      	str	r0, [r7, #4]
 8000596:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8000598:	2300      	movs	r3, #0
 800059a:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 800059c:	2300      	movs	r3, #0
 800059e:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	fa93 f3a3 	rbit	r3, r3
 80005ac:	613b      	str	r3, [r7, #16]
  return(result);
 80005ae:	693b      	ldr	r3, [r7, #16]
 80005b0:	fab3 f383 	clz	r3, r3
 80005b4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80005b6:	e048      	b.n	800064a <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	681a      	ldr	r2, [r3, #0]
 80005bc:	2101      	movs	r1, #1
 80005be:	69fb      	ldr	r3, [r7, #28]
 80005c0:	fa01 f303 	lsl.w	r3, r1, r3
 80005c4:	4013      	ands	r3, r2
 80005c6:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 80005c8:	69bb      	ldr	r3, [r7, #24]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d03a      	beq.n	8000644 <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	461a      	mov	r2, r3
 80005d4:	69b9      	ldr	r1, [r7, #24]
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f7ff fede 	bl	8000398 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	685b      	ldr	r3, [r3, #4]
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d003      	beq.n	80005ec <LL_GPIO_Init+0x5e>
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	685b      	ldr	r3, [r3, #4]
 80005e8:	2b02      	cmp	r3, #2
 80005ea:	d106      	bne.n	80005fa <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	689b      	ldr	r3, [r3, #8]
 80005f0:	461a      	mov	r2, r3
 80005f2:	69b9      	ldr	r1, [r7, #24]
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f7ff ff14 	bl	8000422 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	691b      	ldr	r3, [r3, #16]
 80005fe:	461a      	mov	r2, r3
 8000600:	69b9      	ldr	r1, [r7, #24]
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	f7ff ff3a 	bl	800047c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	2b02      	cmp	r3, #2
 800060e:	d119      	bne.n	8000644 <LL_GPIO_Init+0xb6>
 8000610:	69bb      	ldr	r3, [r7, #24]
 8000612:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	fa93 f3a3 	rbit	r3, r3
 800061a:	60bb      	str	r3, [r7, #8]
  return(result);
 800061c:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800061e:	fab3 f383 	clz	r3, r3
 8000622:	2b07      	cmp	r3, #7
 8000624:	d807      	bhi.n	8000636 <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	461a      	mov	r2, r3
 800062c:	69b9      	ldr	r1, [r7, #24]
 800062e:	6878      	ldr	r0, [r7, #4]
 8000630:	f7ff ff51 	bl	80004d6 <LL_GPIO_SetAFPin_0_7>
 8000634:	e006      	b.n	8000644 <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	695b      	ldr	r3, [r3, #20]
 800063a:	461a      	mov	r2, r3
 800063c:	69b9      	ldr	r1, [r7, #24]
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f7ff ff76 	bl	8000530 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8000644:	69fb      	ldr	r3, [r7, #28]
 8000646:	3301      	adds	r3, #1
 8000648:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	69fb      	ldr	r3, [r7, #28]
 8000650:	fa22 f303 	lsr.w	r3, r2, r3
 8000654:	2b00      	cmp	r3, #0
 8000656:	d1af      	bne.n	80005b8 <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	685b      	ldr	r3, [r3, #4]
 800065c:	2b01      	cmp	r3, #1
 800065e:	d003      	beq.n	8000668 <LL_GPIO_Init+0xda>
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	685b      	ldr	r3, [r3, #4]
 8000664:	2b02      	cmp	r3, #2
 8000666:	d107      	bne.n	8000678 <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	6819      	ldr	r1, [r3, #0]
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	68db      	ldr	r3, [r3, #12]
 8000670:	461a      	mov	r2, r3
 8000672:	6878      	ldr	r0, [r7, #4]
 8000674:	f7ff febd 	bl	80003f2 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8000678:	2300      	movs	r3, #0
}
 800067a:	4618      	mov	r0, r3
 800067c:	3720      	adds	r7, #32
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
	...

08000684 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <LL_RCC_HSI_IsReady+0x20>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f003 0302 	and.w	r3, r3, #2
 8000690:	2b02      	cmp	r3, #2
 8000692:	bf0c      	ite	eq
 8000694:	2301      	moveq	r3, #1
 8000696:	2300      	movne	r3, #0
 8000698:	b2db      	uxtb	r3, r3
}
 800069a:	4618      	mov	r0, r3
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	40021000 	.word	0x40021000

080006a8 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <LL_RCC_LSE_IsReady+0x20>)
 80006ae:	6a1b      	ldr	r3, [r3, #32]
 80006b0:	f003 0302 	and.w	r3, r3, #2
 80006b4:	2b02      	cmp	r3, #2
 80006b6:	bf0c      	ite	eq
 80006b8:	2301      	moveq	r3, #1
 80006ba:	2300      	movne	r3, #0
 80006bc:	b2db      	uxtb	r3, r3
}
 80006be:	4618      	mov	r0, r3
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	40021000 	.word	0x40021000

080006cc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80006d0:	4b04      	ldr	r3, [pc, #16]	; (80006e4 <LL_RCC_GetSysClkSource+0x18>)
 80006d2:	685b      	ldr	r3, [r3, #4]
 80006d4:	f003 030c 	and.w	r3, r3, #12
}
 80006d8:	4618      	mov	r0, r3
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	40021000 	.word	0x40021000

080006e8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80006ec:	4b04      	ldr	r3, [pc, #16]	; (8000700 <LL_RCC_GetAHBPrescaler+0x18>)
 80006ee:	685b      	ldr	r3, [r3, #4]
 80006f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	40021000 	.word	0x40021000

08000704 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8000708:	4b04      	ldr	r3, [pc, #16]	; (800071c <LL_RCC_GetAPB1Prescaler+0x18>)
 800070a:	685b      	ldr	r3, [r3, #4]
 800070c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8000710:	4618      	mov	r0, r3
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	40021000 	.word	0x40021000

08000720 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8000724:	4b04      	ldr	r3, [pc, #16]	; (8000738 <LL_RCC_GetAPB2Prescaler+0x18>)
 8000726:	685b      	ldr	r3, [r3, #4]
 8000728:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800072c:	4618      	mov	r0, r3
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	40021000 	.word	0x40021000

0800073c <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8000744:	4b07      	ldr	r3, [pc, #28]	; (8000764 <LL_RCC_GetUSARTClockSource+0x28>)
 8000746:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000748:	2103      	movs	r1, #3
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	fa01 f303 	lsl.w	r3, r1, r3
 8000750:	401a      	ands	r2, r3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	061b      	lsls	r3, r3, #24
 8000756:	4313      	orrs	r3, r2
}
 8000758:	4618      	mov	r0, r3
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	40021000 	.word	0x40021000

08000768 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 800076c:	4b04      	ldr	r3, [pc, #16]	; (8000780 <LL_RCC_PLL_GetMainSource+0x18>)
 800076e:	685b      	ldr	r3, [r3, #4]
 8000770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8000774:	4618      	mov	r0, r3
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	40021000 	.word	0x40021000

08000784 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8000788:	4b04      	ldr	r3, [pc, #16]	; (800079c <LL_RCC_PLL_GetMultiplicator+0x18>)
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8000790:	4618      	mov	r0, r3
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	40021000 	.word	0x40021000

080007a0 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 80007a4:	4b04      	ldr	r3, [pc, #16]	; (80007b8 <LL_RCC_PLL_GetPrediv+0x18>)
 80007a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007a8:	f003 030f 	and.w	r3, r3, #15
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	40021000 	.word	0x40021000

080007bc <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80007c4:	f000 f860 	bl	8000888 <RCC_GetSystemClockFreq>
 80007c8:	4602      	mov	r2, r0
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4618      	mov	r0, r3
 80007d4:	f000 f87a 	bl	80008cc <RCC_GetHCLKClockFreq>
 80007d8:	4602      	mov	r2, r0
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 f888 	bl	80008f8 <RCC_GetPCLK1ClockFreq>
 80007e8:	4602      	mov	r2, r0
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	685b      	ldr	r3, [r3, #4]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f000 f894 	bl	8000920 <RCC_GetPCLK2ClockFreq>
 80007f8:	4602      	mov	r2, r0
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	60da      	str	r2, [r3, #12]
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
	...

08000808 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8000810:	2300      	movs	r3, #0
 8000812:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d12a      	bne.n	8000870 <LL_RCC_GetUSARTClockFreq+0x68>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	f7ff ff8e 	bl	800073c <LL_RCC_GetUSARTClockSource>
 8000820:	4603      	mov	r3, r0
 8000822:	2b02      	cmp	r3, #2
 8000824:	d00f      	beq.n	8000846 <LL_RCC_GetUSARTClockFreq+0x3e>
 8000826:	2b03      	cmp	r3, #3
 8000828:	d005      	beq.n	8000836 <LL_RCC_GetUSARTClockFreq+0x2e>
 800082a:	2b01      	cmp	r3, #1
 800082c:	d114      	bne.n	8000858 <LL_RCC_GetUSARTClockFreq+0x50>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800082e:	f000 f82b 	bl	8000888 <RCC_GetSystemClockFreq>
 8000832:	60f8      	str	r0, [r7, #12]
        break;
 8000834:	e021      	b.n	800087a <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8000836:	f7ff ff25 	bl	8000684 <LL_RCC_HSI_IsReady>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d019      	beq.n	8000874 <LL_RCC_GetUSARTClockFreq+0x6c>
        {
          usart_frequency = HSI_VALUE;
 8000840:	4b10      	ldr	r3, [pc, #64]	; (8000884 <LL_RCC_GetUSARTClockFreq+0x7c>)
 8000842:	60fb      	str	r3, [r7, #12]
        }
        break;
 8000844:	e016      	b.n	8000874 <LL_RCC_GetUSARTClockFreq+0x6c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8000846:	f7ff ff2f 	bl	80006a8 <LL_RCC_LSE_IsReady>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d013      	beq.n	8000878 <LL_RCC_GetUSARTClockFreq+0x70>
        {
          usart_frequency = LSE_VALUE;
 8000850:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000854:	60fb      	str	r3, [r7, #12]
        }
        break;
 8000856:	e00f      	b.n	8000878 <LL_RCC_GetUSARTClockFreq+0x70>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8000858:	f000 f816 	bl	8000888 <RCC_GetSystemClockFreq>
 800085c:	4603      	mov	r3, r0
 800085e:	4618      	mov	r0, r3
 8000860:	f000 f834 	bl	80008cc <RCC_GetHCLKClockFreq>
 8000864:	4603      	mov	r3, r0
 8000866:	4618      	mov	r0, r3
 8000868:	f000 f846 	bl	80008f8 <RCC_GetPCLK1ClockFreq>
 800086c:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 800086e:	e004      	b.n	800087a <LL_RCC_GetUSARTClockFreq+0x72>
    }
  }
 8000870:	bf00      	nop
 8000872:	e002      	b.n	800087a <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 8000874:	bf00      	nop
 8000876:	e000      	b.n	800087a <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 8000878:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 800087a:	68fb      	ldr	r3, [r7, #12]
}
 800087c:	4618      	mov	r0, r3
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	007a1200 	.word	0x007a1200

08000888 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8000892:	f7ff ff1b 	bl	80006cc <LL_RCC_GetSysClkSource>
 8000896:	4603      	mov	r3, r0
 8000898:	2b04      	cmp	r3, #4
 800089a:	d006      	beq.n	80008aa <RCC_GetSystemClockFreq+0x22>
 800089c:	2b08      	cmp	r3, #8
 800089e:	d007      	beq.n	80008b0 <RCC_GetSystemClockFreq+0x28>
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d109      	bne.n	80008b8 <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80008a4:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <RCC_GetSystemClockFreq+0x40>)
 80008a6:	607b      	str	r3, [r7, #4]
      break;
 80008a8:	e009      	b.n	80008be <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80008aa:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <RCC_GetSystemClockFreq+0x40>)
 80008ac:	607b      	str	r3, [r7, #4]
      break;
 80008ae:	e006      	b.n	80008be <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80008b0:	f000 f84a 	bl	8000948 <RCC_PLL_GetFreqDomain_SYS>
 80008b4:	6078      	str	r0, [r7, #4]
      break;
 80008b6:	e002      	b.n	80008be <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 80008b8:	4b03      	ldr	r3, [pc, #12]	; (80008c8 <RCC_GetSystemClockFreq+0x40>)
 80008ba:	607b      	str	r3, [r7, #4]
      break;
 80008bc:	bf00      	nop
  }

  return frequency;
 80008be:	687b      	ldr	r3, [r7, #4]
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	007a1200 	.word	0x007a1200

080008cc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80008d4:	f7ff ff08 	bl	80006e8 <LL_RCC_GetAHBPrescaler>
 80008d8:	4603      	mov	r3, r0
 80008da:	091b      	lsrs	r3, r3, #4
 80008dc:	f003 030f 	and.w	r3, r3, #15
 80008e0:	4a04      	ldr	r2, [pc, #16]	; (80008f4 <RCC_GetHCLKClockFreq+0x28>)
 80008e2:	5cd3      	ldrb	r3, [r2, r3]
 80008e4:	461a      	mov	r2, r3
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	40d3      	lsrs	r3, r2
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	0800306c 	.word	0x0800306c

080008f8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8000900:	f7ff ff00 	bl	8000704 <LL_RCC_GetAPB1Prescaler>
 8000904:	4603      	mov	r3, r0
 8000906:	0a1b      	lsrs	r3, r3, #8
 8000908:	4a04      	ldr	r2, [pc, #16]	; (800091c <RCC_GetPCLK1ClockFreq+0x24>)
 800090a:	5cd3      	ldrb	r3, [r2, r3]
 800090c:	461a      	mov	r2, r3
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	40d3      	lsrs	r3, r2
}
 8000912:	4618      	mov	r0, r3
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	0800307c 	.word	0x0800307c

08000920 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8000928:	f7ff fefa 	bl	8000720 <LL_RCC_GetAPB2Prescaler>
 800092c:	4603      	mov	r3, r0
 800092e:	0adb      	lsrs	r3, r3, #11
 8000930:	4a04      	ldr	r2, [pc, #16]	; (8000944 <RCC_GetPCLK2ClockFreq+0x24>)
 8000932:	5cd3      	ldrb	r3, [r2, r3]
 8000934:	461a      	mov	r2, r3
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	40d3      	lsrs	r3, r2
}
 800093a:	4618      	mov	r0, r3
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	0800307c 	.word	0x0800307c

08000948 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8000948:	b590      	push	{r4, r7, lr}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	2300      	movs	r3, #0
 8000954:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8000956:	f7ff ff07 	bl	8000768 <LL_RCC_PLL_GetMainSource>
 800095a:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d003      	beq.n	800096a <RCC_PLL_GetFreqDomain_SYS+0x22>
 8000962:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000966:	d003      	beq.n	8000970 <RCC_PLL_GetFreqDomain_SYS+0x28>
 8000968:	e005      	b.n	8000976 <RCC_PLL_GetFreqDomain_SYS+0x2e>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 800096a:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 800096c:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 800096e:	e005      	b.n	800097c <RCC_PLL_GetFreqDomain_SYS+0x34>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8000972:	60fb      	str	r3, [r7, #12]
      break;
 8000974:	e002      	b.n	800097c <RCC_PLL_GetFreqDomain_SYS+0x34>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8000976:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 8000978:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 800097a:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 800097c:	f7ff ff10 	bl	80007a0 <LL_RCC_PLL_GetPrediv>
 8000980:	4603      	mov	r3, r0
 8000982:	3301      	adds	r3, #1
 8000984:	68fa      	ldr	r2, [r7, #12]
 8000986:	fbb2 f4f3 	udiv	r4, r2, r3
 800098a:	f7ff fefb 	bl	8000784 <LL_RCC_PLL_GetMultiplicator>
 800098e:	4603      	mov	r3, r0
 8000990:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000994:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000998:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	fa92 f2a2 	rbit	r2, r2
 80009a0:	603a      	str	r2, [r7, #0]
  return(result);
 80009a2:	683a      	ldr	r2, [r7, #0]
 80009a4:	fab2 f282 	clz	r2, r2
 80009a8:	40d3      	lsrs	r3, r2
 80009aa:	3302      	adds	r3, #2
 80009ac:	fb03 f304 	mul.w	r3, r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3714      	adds	r7, #20
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd90      	pop	{r4, r7, pc}
 80009b8:	003d0900 	.word	0x003d0900
 80009bc:	007a1200 	.word	0x007a1200

080009c0 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	683a      	ldr	r2, [r7, #0]
 80009ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	683a      	ldr	r2, [r7, #0]
 80009ea:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80009ec:	bf00      	nop
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	683a      	ldr	r2, [r7, #0]
 8000a06:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000a08:	bf00      	nop
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	683a      	ldr	r2, [r7, #0]
 8000a22:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	683a      	ldr	r2, [r7, #0]
 8000a3e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000a40:	bf00      	nop
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	683a      	ldr	r2, [r7, #0]
 8000a5a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000a5c:	bf00      	nop
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	683a      	ldr	r2, [r7, #0]
 8000a76:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <LL_TIM_OC_SetCompareCH5>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH5 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH5(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR5, CompareValue);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	683a      	ldr	r2, [r7, #0]
 8000a92:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000a94:	bf00      	nop
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <LL_TIM_OC_SetCompareCH6>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH6 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH6(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	683a      	ldr	r2, [r7, #0]
 8000aae:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	695b      	ldr	r3, [r3, #20]
 8000ac8:	f043 0201 	orr.w	r2, r3, #1
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	615a      	str	r2, [r3, #20]
}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4a2f      	ldr	r2, [pc, #188]	; (8000bb0 <LL_TIM_Init+0xd4>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d007      	beq.n	8000b08 <LL_TIM_Init+0x2c>
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000afe:	d003      	beq.n	8000b08 <LL_TIM_Init+0x2c>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a2c      	ldr	r2, [pc, #176]	; (8000bb4 <LL_TIM_Init+0xd8>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d106      	bne.n	8000b16 <LL_TIM_Init+0x3a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	4313      	orrs	r3, r2
 8000b14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4a25      	ldr	r2, [pc, #148]	; (8000bb0 <LL_TIM_Init+0xd4>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d013      	beq.n	8000b46 <LL_TIM_Init+0x6a>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b24:	d00f      	beq.n	8000b46 <LL_TIM_Init+0x6a>
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4a22      	ldr	r2, [pc, #136]	; (8000bb4 <LL_TIM_Init+0xd8>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d00b      	beq.n	8000b46 <LL_TIM_Init+0x6a>
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4a21      	ldr	r2, [pc, #132]	; (8000bb8 <LL_TIM_Init+0xdc>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d007      	beq.n	8000b46 <LL_TIM_Init+0x6a>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4a20      	ldr	r2, [pc, #128]	; (8000bbc <LL_TIM_Init+0xe0>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d003      	beq.n	8000b46 <LL_TIM_Init+0x6a>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4a1f      	ldr	r2, [pc, #124]	; (8000bc0 <LL_TIM_Init+0xe4>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d106      	bne.n	8000b54 <LL_TIM_Init+0x78>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	68fa      	ldr	r2, [r7, #12]
 8000b58:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	4619      	mov	r1, r3
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f7ff ff3b 	bl	80009dc <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	881b      	ldrh	r3, [r3, #0]
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f7ff ff27 	bl	80009c0 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4a0e      	ldr	r2, [pc, #56]	; (8000bb0 <LL_TIM_Init+0xd4>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d00b      	beq.n	8000b92 <LL_TIM_Init+0xb6>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4a0e      	ldr	r2, [pc, #56]	; (8000bb8 <LL_TIM_Init+0xdc>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d007      	beq.n	8000b92 <LL_TIM_Init+0xb6>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4a0d      	ldr	r2, [pc, #52]	; (8000bbc <LL_TIM_Init+0xe0>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d003      	beq.n	8000b92 <LL_TIM_Init+0xb6>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4a0c      	ldr	r2, [pc, #48]	; (8000bc0 <LL_TIM_Init+0xe4>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d105      	bne.n	8000b9e <LL_TIM_Init+0xc2>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	7c1b      	ldrb	r3, [r3, #16]
 8000b96:	4619      	mov	r1, r3
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f7ff ff2d 	bl	80009f8 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f7ff ff8c 	bl	8000abc <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8000ba4:	2300      	movs	r3, #0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3710      	adds	r7, #16
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40012c00 	.word	0x40012c00
 8000bb4:	40000400 	.word	0x40000400
 8000bb8:	40014000 	.word	0x40014000
 8000bbc:	40014400 	.word	0x40014400
 8000bc0:	40014800 	.word	0x40014800

08000bc4 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bda:	d01f      	beq.n	8000c1c <LL_TIM_OC_Init+0x58>
 8000bdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000be0:	d804      	bhi.n	8000bec <LL_TIM_OC_Init+0x28>
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d00c      	beq.n	8000c00 <LL_TIM_OC_Init+0x3c>
 8000be6:	2b10      	cmp	r3, #16
 8000be8:	d011      	beq.n	8000c0e <LL_TIM_OC_Init+0x4a>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 8000bea:	e033      	b.n	8000c54 <LL_TIM_OC_Init+0x90>
  switch (Channel)
 8000bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bf0:	d022      	beq.n	8000c38 <LL_TIM_OC_Init+0x74>
 8000bf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000bf6:	d026      	beq.n	8000c46 <LL_TIM_OC_Init+0x82>
 8000bf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000bfc:	d015      	beq.n	8000c2a <LL_TIM_OC_Init+0x66>
      break;
 8000bfe:	e029      	b.n	8000c54 <LL_TIM_OC_Init+0x90>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8000c00:	6879      	ldr	r1, [r7, #4]
 8000c02:	68f8      	ldr	r0, [r7, #12]
 8000c04:	f000 f82c 	bl	8000c60 <OC1Config>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	75fb      	strb	r3, [r7, #23]
      break;
 8000c0c:	e022      	b.n	8000c54 <LL_TIM_OC_Init+0x90>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8000c0e:	6879      	ldr	r1, [r7, #4]
 8000c10:	68f8      	ldr	r0, [r7, #12]
 8000c12:	f000 f8a5 	bl	8000d60 <OC2Config>
 8000c16:	4603      	mov	r3, r0
 8000c18:	75fb      	strb	r3, [r7, #23]
      break;
 8000c1a:	e01b      	b.n	8000c54 <LL_TIM_OC_Init+0x90>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8000c1c:	6879      	ldr	r1, [r7, #4]
 8000c1e:	68f8      	ldr	r0, [r7, #12]
 8000c20:	f000 f922 	bl	8000e68 <OC3Config>
 8000c24:	4603      	mov	r3, r0
 8000c26:	75fb      	strb	r3, [r7, #23]
      break;
 8000c28:	e014      	b.n	8000c54 <LL_TIM_OC_Init+0x90>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8000c2a:	6879      	ldr	r1, [r7, #4]
 8000c2c:	68f8      	ldr	r0, [r7, #12]
 8000c2e:	f000 f99f 	bl	8000f70 <OC4Config>
 8000c32:	4603      	mov	r3, r0
 8000c34:	75fb      	strb	r3, [r7, #23]
      break;
 8000c36:	e00d      	b.n	8000c54 <LL_TIM_OC_Init+0x90>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8000c38:	6879      	ldr	r1, [r7, #4]
 8000c3a:	68f8      	ldr	r0, [r7, #12]
 8000c3c:	f000 fa04 	bl	8001048 <OC5Config>
 8000c40:	4603      	mov	r3, r0
 8000c42:	75fb      	strb	r3, [r7, #23]
      break;
 8000c44:	e006      	b.n	8000c54 <LL_TIM_OC_Init+0x90>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8000c46:	6879      	ldr	r1, [r7, #4]
 8000c48:	68f8      	ldr	r0, [r7, #12]
 8000c4a:	f000 fa5f 	bl	800110c <OC6Config>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	75fb      	strb	r3, [r7, #23]
      break;
 8000c52:	bf00      	nop
  }

  return result;
 8000c54:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3718      	adds	r7, #24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
	...

08000c60 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8000c72:	2300      	movs	r3, #0
 8000c74:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6a1b      	ldr	r3, [r3, #32]
 8000c7a:	f023 0201 	bic.w	r2, r3, #1
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6a1b      	ldr	r3, [r3, #32]
 8000c86:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	699b      	ldr	r3, [r3, #24]
 8000c92:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	f023 0303 	bic.w	r3, r3, #3
 8000c9a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000ca6:	683a      	ldr	r2, [r7, #0]
 8000ca8:	6812      	ldr	r2, [r2, #0]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	f023 0202 	bic.w	r2, r3, #2
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	691b      	ldr	r3, [r3, #16]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	f023 0201 	bic.w	r2, r3, #1
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4a20      	ldr	r2, [pc, #128]	; (8000d50 <OC1Config+0xf0>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d00b      	beq.n	8000cea <OC1Config+0x8a>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4a1f      	ldr	r2, [pc, #124]	; (8000d54 <OC1Config+0xf4>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d007      	beq.n	8000cea <OC1Config+0x8a>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4a1e      	ldr	r2, [pc, #120]	; (8000d58 <OC1Config+0xf8>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d003      	beq.n	8000cea <OC1Config+0x8a>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4a1d      	ldr	r2, [pc, #116]	; (8000d5c <OC1Config+0xfc>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d11e      	bne.n	8000d28 <OC1Config+0xc8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	f023 0208 	bic.w	r2, r3, #8
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	695b      	ldr	r3, [r3, #20]
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	f023 0204 	bic.w	r2, r3, #4
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	4313      	orrs	r3, r2
 8000d08:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	69db      	ldr	r3, [r3, #28]
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	4313      	orrs	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	68fa      	ldr	r2, [r7, #12]
 8000d32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f7ff fe6a 	bl	8000a14 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	697a      	ldr	r2, [r7, #20]
 8000d44:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000d46:	2300      	movs	r3, #0
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3718      	adds	r7, #24
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40012c00 	.word	0x40012c00
 8000d54:	40014000 	.word	0x40014000
 8000d58:	40014400 	.word	0x40014400
 8000d5c:	40014800 	.word	0x40014800

08000d60 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8000d72:	2300      	movs	r3, #0
 8000d74:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6a1b      	ldr	r3, [r3, #32]
 8000d7a:	f023 0210 	bic.w	r2, r3, #16
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6a1b      	ldr	r3, [r3, #32]
 8000d86:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	699b      	ldr	r3, [r3, #24]
 8000d92:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000da2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000da6:	683a      	ldr	r2, [r7, #0]
 8000da8:	6812      	ldr	r2, [r2, #0]
 8000daa:	0212      	lsls	r2, r2, #8
 8000dac:	4313      	orrs	r3, r2
 8000dae:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	f023 0220 	bic.w	r2, r3, #32
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	691b      	ldr	r3, [r3, #16]
 8000dba:	011b      	lsls	r3, r3, #4
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	f023 0210 	bic.w	r2, r3, #16
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	011b      	lsls	r3, r3, #4
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	4a21      	ldr	r2, [pc, #132]	; (8000e58 <OC2Config+0xf8>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d00b      	beq.n	8000df0 <OC2Config+0x90>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4a20      	ldr	r2, [pc, #128]	; (8000e5c <OC2Config+0xfc>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d007      	beq.n	8000df0 <OC2Config+0x90>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4a1f      	ldr	r2, [pc, #124]	; (8000e60 <OC2Config+0x100>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d003      	beq.n	8000df0 <OC2Config+0x90>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4a1e      	ldr	r2, [pc, #120]	; (8000e64 <OC2Config+0x104>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d11f      	bne.n	8000e30 <OC2Config+0xd0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	695b      	ldr	r3, [r3, #20]
 8000dfa:	019b      	lsls	r3, r3, #6
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	019b      	lsls	r3, r3, #6
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	699b      	ldr	r3, [r3, #24]
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	00db      	lsls	r3, r3, #3
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	68fa      	ldr	r2, [r7, #12]
 8000e3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	4619      	mov	r1, r3
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff fdf4 	bl	8000a30 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	697a      	ldr	r2, [r7, #20]
 8000e4c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000e4e:	2300      	movs	r3, #0
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3718      	adds	r7, #24
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40012c00 	.word	0x40012c00
 8000e5c:	40014000 	.word	0x40014000
 8000e60:	40014400 	.word	0x40014400
 8000e64:	40014800 	.word	0x40014800

08000e68 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6a1b      	ldr	r3, [r3, #32]
 8000e82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6a1b      	ldr	r3, [r3, #32]
 8000e8e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	69db      	ldr	r3, [r3, #28]
 8000e9a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f023 0303 	bic.w	r3, r3, #3
 8000ea2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000eae:	683a      	ldr	r2, [r7, #0]
 8000eb0:	6812      	ldr	r2, [r2, #0]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	691b      	ldr	r3, [r3, #16]
 8000ec0:	021b      	lsls	r3, r3, #8
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	021b      	lsls	r3, r3, #8
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a21      	ldr	r2, [pc, #132]	; (8000f60 <OC3Config+0xf8>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d00b      	beq.n	8000ef6 <OC3Config+0x8e>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a20      	ldr	r2, [pc, #128]	; (8000f64 <OC3Config+0xfc>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d007      	beq.n	8000ef6 <OC3Config+0x8e>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a1f      	ldr	r2, [pc, #124]	; (8000f68 <OC3Config+0x100>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d003      	beq.n	8000ef6 <OC3Config+0x8e>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a1e      	ldr	r2, [pc, #120]	; (8000f6c <OC3Config+0x104>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d11f      	bne.n	8000f36 <OC3Config+0xce>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	695b      	ldr	r3, [r3, #20]
 8000f00:	029b      	lsls	r3, r3, #10
 8000f02:	4313      	orrs	r3, r2
 8000f04:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	029b      	lsls	r3, r3, #10
 8000f12:	4313      	orrs	r3, r2
 8000f14:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	011b      	lsls	r3, r3, #4
 8000f22:	4313      	orrs	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	69db      	ldr	r3, [r3, #28]
 8000f30:	015b      	lsls	r3, r3, #5
 8000f32:	4313      	orrs	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	68db      	ldr	r3, [r3, #12]
 8000f46:	4619      	mov	r1, r3
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f7ff fd7f 	bl	8000a4c <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	697a      	ldr	r2, [r7, #20]
 8000f52:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3718      	adds	r7, #24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40012c00 	.word	0x40012c00
 8000f64:	40014000 	.word	0x40014000
 8000f68:	40014400 	.word	0x40014400
 8000f6c:	40014800 	.word	0x40014800

08000f70 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6a1b      	ldr	r3, [r3, #32]
 8000f8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6a1b      	ldr	r3, [r3, #32]
 8000f96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	69db      	ldr	r3, [r3, #28]
 8000fa2:	613b      	str	r3, [r7, #16]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000faa:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000fb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000fb6:	683a      	ldr	r2, [r7, #0]
 8000fb8:	6812      	ldr	r2, [r2, #0]
 8000fba:	0212      	lsls	r2, r2, #8
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	691b      	ldr	r3, [r3, #16]
 8000fca:	031b      	lsls	r3, r3, #12
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	031b      	lsls	r3, r3, #12
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a15      	ldr	r2, [pc, #84]	; (8001038 <OC4Config+0xc8>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d00b      	beq.n	8001000 <OC4Config+0x90>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4a14      	ldr	r2, [pc, #80]	; (800103c <OC4Config+0xcc>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d007      	beq.n	8001000 <OC4Config+0x90>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4a13      	ldr	r2, [pc, #76]	; (8001040 <OC4Config+0xd0>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d003      	beq.n	8001000 <OC4Config+0x90>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a12      	ldr	r2, [pc, #72]	; (8001044 <OC4Config+0xd4>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d107      	bne.n	8001010 <OC4Config+0xa0>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	699b      	ldr	r3, [r3, #24]
 800100a:	019b      	lsls	r3, r3, #6
 800100c:	4313      	orrs	r3, r2
 800100e:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	697a      	ldr	r2, [r7, #20]
 8001014:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	4619      	mov	r1, r3
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff fd20 	bl	8000a68 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	68fa      	ldr	r2, [r7, #12]
 800102c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800102e:	2300      	movs	r3, #0
}
 8001030:	4618      	mov	r0, r3
 8001032:	3718      	adds	r7, #24
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40012c00 	.word	0x40012c00
 800103c:	40014000 	.word	0x40014000
 8001040:	40014400 	.word	0x40014400
 8001044:	40014800 	.word	0x40014800

08001048 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001056:	2300      	movs	r3, #0
 8001058:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6a1b      	ldr	r3, [r3, #32]
 800105e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6a1b      	ldr	r3, [r3, #32]
 800106a:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001070:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800107c:	683a      	ldr	r2, [r7, #0]
 800107e:	6812      	ldr	r2, [r2, #0]
 8001080:	4313      	orrs	r3, r2
 8001082:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	691b      	ldr	r3, [r3, #16]
 800108e:	041b      	lsls	r3, r3, #16
 8001090:	4313      	orrs	r3, r2
 8001092:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	041b      	lsls	r3, r3, #16
 80010a0:	4313      	orrs	r3, r2
 80010a2:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a15      	ldr	r2, [pc, #84]	; (80010fc <OC5Config+0xb4>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d00b      	beq.n	80010c4 <OC5Config+0x7c>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a14      	ldr	r2, [pc, #80]	; (8001100 <OC5Config+0xb8>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d007      	beq.n	80010c4 <OC5Config+0x7c>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a13      	ldr	r2, [pc, #76]	; (8001104 <OC5Config+0xbc>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d003      	beq.n	80010c4 <OC5Config+0x7c>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a12      	ldr	r2, [pc, #72]	; (8001108 <OC5Config+0xc0>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d109      	bne.n	80010d8 <OC5Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	021b      	lsls	r3, r3, #8
 80010d2:	431a      	orrs	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	68db      	ldr	r3, [r3, #12]
 80010e2:	4619      	mov	r1, r3
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff fccd 	bl	8000a84 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	68ba      	ldr	r2, [r7, #8]
 80010ee:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40012c00 	.word	0x40012c00
 8001100:	40014000 	.word	0x40014000
 8001104:	40014400 	.word	0x40014400
 8001108:	40014800 	.word	0x40014800

0800110c <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800111a:	2300      	movs	r3, #0
 800111c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6a1b      	ldr	r3, [r3, #32]
 8001122:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6a1b      	ldr	r3, [r3, #32]
 800112e:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001134:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800113c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001140:	683a      	ldr	r2, [r7, #0]
 8001142:	6812      	ldr	r2, [r2, #0]
 8001144:	0212      	lsls	r2, r2, #8
 8001146:	4313      	orrs	r3, r2
 8001148:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	691b      	ldr	r3, [r3, #16]
 8001154:	051b      	lsls	r3, r3, #20
 8001156:	4313      	orrs	r3, r2
 8001158:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	051b      	lsls	r3, r3, #20
 8001166:	4313      	orrs	r3, r2
 8001168:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a14      	ldr	r2, [pc, #80]	; (80011c0 <OC6Config+0xb4>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d00b      	beq.n	800118a <OC6Config+0x7e>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a13      	ldr	r2, [pc, #76]	; (80011c4 <OC6Config+0xb8>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d007      	beq.n	800118a <OC6Config+0x7e>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a12      	ldr	r2, [pc, #72]	; (80011c8 <OC6Config+0xbc>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d003      	beq.n	800118a <OC6Config+0x7e>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a11      	ldr	r2, [pc, #68]	; (80011cc <OC6Config+0xc0>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d109      	bne.n	800119e <OC6Config+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	699b      	ldr	r3, [r3, #24]
 8001196:	029b      	lsls	r3, r3, #10
 8001198:	431a      	orrs	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	68fa      	ldr	r2, [r7, #12]
 80011a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	4619      	mov	r1, r3
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff fc78 	bl	8000aa0 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	68ba      	ldr	r2, [r7, #8]
 80011b4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40012c00 	.word	0x40012c00
 80011c4:	40014000 	.word	0x40014000
 80011c8:	40014400 	.word	0x40014400
 80011cc:	40014800 	.word	0x40014800

080011d0 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	bf0c      	ite	eq
 80011e4:	2301      	moveq	r3, #1
 80011e6:	2300      	movne	r3, #0
 80011e8:	b2db      	uxtb	r3, r3
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 80011f6:	b480      	push	{r7}
 80011f8:	b083      	sub	sp, #12
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
 80011fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	431a      	orrs	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	605a      	str	r2, [r3, #4]
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	431a      	orrs	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	609a      	str	r2, [r3, #8]
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 8001242:	b4b0      	push	{r4, r5, r7}
 8001244:	b085      	sub	sp, #20
 8001246:	af00      	add	r7, sp, #0
 8001248:	60f8      	str	r0, [r7, #12]
 800124a:	60b9      	str	r1, [r7, #8]
 800124c:	607a      	str	r2, [r7, #4]
 800124e:	603b      	str	r3, [r7, #0]
  register uint32_t usartdiv = 0x0U;
 8001250:	2500      	movs	r5, #0
  register uint32_t brrtemp = 0x0U;
 8001252:	2400      	movs	r4, #0

  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800125a:	d114      	bne.n	8001286 <LL_USART_SetBaudRate+0x44>
  {
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	005a      	lsls	r2, r3, #1
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	085b      	lsrs	r3, r3, #1
 8001264:	441a      	add	r2, r3
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	fbb2 f3f3 	udiv	r3, r2, r3
 800126c:	b29b      	uxth	r3, r3
 800126e:	461d      	mov	r5, r3
    brrtemp = usartdiv & 0xFFF0U;
 8001270:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8001274:	402c      	ands	r4, r5
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001276:	086b      	lsrs	r3, r5, #1
 8001278:	b29b      	uxth	r3, r3
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	60dc      	str	r4, [r3, #12]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 8001284:	e00a      	b.n	800129c <LL_USART_SetBaudRate+0x5a>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	085a      	lsrs	r2, r3, #1
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	441a      	add	r2, r3
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	fbb2 f3f3 	udiv	r3, r2, r3
 8001294:	b29b      	uxth	r3, r3
 8001296:	461a      	mov	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	60da      	str	r2, [r3, #12]
}
 800129c:	bf00      	nop
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bcb0      	pop	{r4, r5, r7}
 80012a4:	4770      	bx	lr
	...

080012a8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff ff88 	bl	80011d0 <LL_USART_IsEnabled>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d14e      	bne.n	8001364 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	4b29      	ldr	r3, [pc, #164]	; (8001370 <LL_USART_Init+0xc8>)
 80012cc:	4013      	ands	r3, r2
 80012ce:	683a      	ldr	r2, [r7, #0]
 80012d0:	6851      	ldr	r1, [r2, #4]
 80012d2:	683a      	ldr	r2, [r7, #0]
 80012d4:	68d2      	ldr	r2, [r2, #12]
 80012d6:	4311      	orrs	r1, r2
 80012d8:	683a      	ldr	r2, [r7, #0]
 80012da:	6912      	ldr	r2, [r2, #16]
 80012dc:	4311      	orrs	r1, r2
 80012de:	683a      	ldr	r2, [r7, #0]
 80012e0:	6992      	ldr	r2, [r2, #24]
 80012e2:	430a      	orrs	r2, r1
 80012e4:	431a      	orrs	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	4619      	mov	r1, r3
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff ff80 	bl	80011f6 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	4619      	mov	r1, r3
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff ff8d 	bl	800121c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a1b      	ldr	r2, [pc, #108]	; (8001374 <LL_USART_Init+0xcc>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d104      	bne.n	8001314 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800130a:	2000      	movs	r0, #0
 800130c:	f7ff fa7c 	bl	8000808 <LL_RCC_GetUSARTClockFreq>
 8001310:	61b8      	str	r0, [r7, #24]
 8001312:	e016      	b.n	8001342 <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a18      	ldr	r2, [pc, #96]	; (8001378 <LL_USART_Init+0xd0>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d107      	bne.n	800132c <LL_USART_Init+0x84>
    {
#if defined (RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800131c:	f107 0308 	add.w	r3, r7, #8
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff fa4b 	bl	80007bc <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	61bb      	str	r3, [r7, #24]
 800132a:	e00a      	b.n	8001342 <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a13      	ldr	r2, [pc, #76]	; (800137c <LL_USART_Init+0xd4>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d106      	bne.n	8001342 <LL_USART_Init+0x9a>
    {
#if defined (RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8001334:	f107 0308 	add.w	r3, r7, #8
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fa3f 	bl	80007bc <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d00d      	beq.n	8001364 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d009      	beq.n	8001364 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8001350:	2300      	movs	r3, #0
 8001352:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	699a      	ldr	r2, [r3, #24]
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	69b9      	ldr	r1, [r7, #24]
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff ff6f 	bl	8001242 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8001364:	7ffb      	ldrb	r3, [r7, #31]
}
 8001366:	4618      	mov	r0, r3
 8001368:	3720      	adds	r7, #32
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	efff69f3 	.word	0xefff69f3
 8001374:	40013800 	.word	0x40013800
 8001378:	40004400 	.word	0x40004400
 800137c:	40004800 	.word	0x40004800

08001380 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001392:	4a07      	ldr	r2, [pc, #28]	; (80013b0 <LL_InitTick+0x30>)
 8001394:	3b01      	subs	r3, #1
 8001396:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <LL_InitTick+0x30>)
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800139e:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <LL_InitTick+0x30>)
 80013a0:	2205      	movs	r2, #5
 80013a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	e000e010 	.word	0xe000e010

080013b4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80013bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff ffdd 	bl	8001380 <LL_InitTick>
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80013d8:	4a04      	ldr	r2, [pc, #16]	; (80013ec <LL_SetSystemCoreClock+0x1c>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6013      	str	r3, [r2, #0]
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	20000000 	.word	0x20000000

080013f0 <LL_ADC_REG_SetSequencerRanks>:
{
 80013f0:	b490      	push	{r4, r7}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	3330      	adds	r3, #48	; 0x30
 8001400:	4619      	mov	r1, r3
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001408:	f44f 7340 	mov.w	r3, #768	; 0x300
 800140c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	fa93 f3a3 	rbit	r3, r3
 8001414:	613b      	str	r3, [r7, #16]
  return(result);
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	fab3 f383 	clz	r3, r3
 800141c:	fa22 f303 	lsr.w	r3, r2, r3
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	440b      	add	r3, r1
 8001424:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8001426:	6822      	ldr	r2, [r4, #0]
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	f003 031f 	and.w	r3, r3, #31
 800142e:	211f      	movs	r1, #31
 8001430:	fa01 f303 	lsl.w	r3, r1, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	401a      	ands	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	f003 031f 	and.w	r3, r3, #31
 8001444:	f1c3 031a 	rsb	r3, r3, #26
 8001448:	fa21 f303 	lsr.w	r3, r1, r3
 800144c:	4313      	orrs	r3, r2
 800144e:	6023      	str	r3, [r4, #0]
}
 8001450:	bf00      	nop
 8001452:	3718      	adds	r7, #24
 8001454:	46bd      	mov	sp, r7
 8001456:	bc90      	pop	{r4, r7}
 8001458:	4770      	bx	lr

0800145a <LL_ADC_SetChannelSamplingTime>:
{
 800145a:	b490      	push	{r4, r7}
 800145c:	b08a      	sub	sp, #40	; 0x28
 800145e:	af00      	add	r7, sp, #0
 8001460:	60f8      	str	r0, [r7, #12]
 8001462:	60b9      	str	r1, [r7, #8]
 8001464:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	3314      	adds	r3, #20
 800146a:	4619      	mov	r1, r3
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8001472:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001476:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	fa93 f3a3 	rbit	r3, r3
 800147e:	613b      	str	r3, [r7, #16]
  return(result);
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	fab3 f383 	clz	r3, r3
 8001486:	fa22 f303 	lsr.w	r3, r2, r3
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	440b      	add	r3, r1
 800148e:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8001490:	6822      	ldr	r2, [r4, #0]
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	f003 71f8 	and.w	r1, r3, #32505856	; 0x1f00000
 8001498:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 800149c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	fa93 f3a3 	rbit	r3, r3
 80014a4:	61bb      	str	r3, [r7, #24]
  return(result);
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	fab3 f383 	clz	r3, r3
 80014ac:	fa21 f303 	lsr.w	r3, r1, r3
 80014b0:	2107      	movs	r1, #7
 80014b2:	fa01 f303 	lsl.w	r3, r1, r3
 80014b6:	43db      	mvns	r3, r3
 80014b8:	401a      	ands	r2, r3
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	f003 71f8 	and.w	r1, r3, #32505856	; 0x1f00000
 80014c0:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c8:	fa93 f3a3 	rbit	r3, r3
 80014cc:	623b      	str	r3, [r7, #32]
  return(result);
 80014ce:	6a3b      	ldr	r3, [r7, #32]
 80014d0:	fab3 f383 	clz	r3, r3
 80014d4:	fa21 f303 	lsr.w	r3, r1, r3
 80014d8:	6879      	ldr	r1, [r7, #4]
 80014da:	fa01 f303 	lsl.w	r3, r1, r3
 80014de:	4313      	orrs	r3, r2
 80014e0:	6023      	str	r3, [r4, #0]
}
 80014e2:	bf00      	nop
 80014e4:	3728      	adds	r7, #40	; 0x28
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc90      	pop	{r4, r7}
 80014ea:	4770      	bx	lr

080014ec <LL_ADC_SetChannelSingleDiff>:
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001504:	43db      	mvns	r3, r3
 8001506:	401a      	ands	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f003 0320 	and.w	r3, r3, #32
 800150e:	4908      	ldr	r1, [pc, #32]	; (8001530 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001510:	4099      	lsls	r1, r3
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	400b      	ands	r3, r1
 8001516:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800151a:	431a      	orrs	r2, r3
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001522:	bf00      	nop
 8001524:	3714      	adds	r7, #20
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	0007ffff 	.word	0x0007ffff

08001534 <LL_ADC_DisableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f023 0204 	bic.w	r2, r3, #4
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	605a      	str	r2, [r3, #4]
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <LL_ADC_DisableIT_EOS>:
  * @rmtoll IER      EOSIE          LL_ADC_DisableIT_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f023 0208 	bic.w	r2, r3, #8
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	605a      	str	r2, [r3, #4]
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 800157c:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800157e:	695a      	ldr	r2, [r3, #20]
 8001580:	4907      	ldr	r1, [pc, #28]	; (80015a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4313      	orrs	r3, r2
 8001586:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001588:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800158a:	695a      	ldr	r2, [r3, #20]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4013      	ands	r3, r2
 8001590:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001592:	68fb      	ldr	r3, [r7, #12]
}
 8001594:	bf00      	nop
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	40021000 	.word	0x40021000

080015a4 <MX_ADC1_Init>:

/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b094      	sub	sp, #80	; 0x50
 80015a8:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80015aa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	605a      	str	r2, [r3, #4]
 80015b4:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80015b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	609a      	str	r2, [r3, #8]
 80015c2:	60da      	str	r2, [r3, #12]
 80015c4:	611a      	str	r2, [r3, #16]
 80015c6:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 80015c8:	f107 031c 	add.w	r3, r7, #28
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
 80015e4:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_ADC12);
 80015e6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80015ea:	f7ff ffc3 	bl	8001574 <LL_AHB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80015ee:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80015f2:	f7ff ffbf 	bl	8001574 <LL_AHB1_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA0   ------> ADC1_IN1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80015f6:	2301      	movs	r3, #1
 80015f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80015fa:	2303      	movs	r3, #3
 80015fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001602:	1d3b      	adds	r3, r7, #4
 8001604:	4619      	mov	r1, r3
 8001606:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800160a:	f7fe ffc0 	bl	800058e <LL_GPIO_Init>

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 800160e:	2300      	movs	r3, #0
 8001610:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8001612:	2300      	movs	r3, #0
 8001614:	64bb      	str	r3, [r7, #72]	; 0x48
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8001616:	2300      	movs	r3, #0
 8001618:	64fb      	str	r3, [r7, #76]	; 0x4c
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 800161a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800161e:	4619      	mov	r1, r3
 8001620:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001624:	f7fe fe48 	bl	80002b8 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8001628:	2300      	movs	r3, #0
 800162a:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 800162c:	2300      	movs	r3, #0
 800162e:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8001630:	2300      	movs	r3, #0
 8001632:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8001634:	2300      	movs	r3, #0
 8001636:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 8001638:	2301      	movs	r3, #1
 800163a:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
 800163c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001640:	643b      	str	r3, [r7, #64]	; 0x40
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8001642:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001646:	4619      	mov	r1, r3
 8001648:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800164c:	f7fe fe5a 	bl	8000304 <LL_ADC_REG_Init>
  LL_ADC_DisableIT_EOC(ADC1);
 8001650:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001654:	f7ff ff6e 	bl	8001534 <LL_ADC_DisableIT_EOC>
  LL_ADC_DisableIT_EOS(ADC1);
 8001658:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800165c:	f7ff ff7a 	bl	8001554 <LL_ADC_DisableIT_EOS>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV1;
 8001660:	2300      	movs	r3, #0
 8001662:	61fb      	str	r3, [r7, #28]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8001664:	2300      	movs	r3, #0
 8001666:	623b      	str	r3, [r7, #32]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8001668:	f107 031c 	add.w	r3, r7, #28
 800166c:	4619      	mov	r1, r3
 800166e:	480c      	ldr	r0, [pc, #48]	; (80016a0 <MX_ADC1_Init+0xfc>)
 8001670:	f7fe fde2 	bl	8000238 <LL_ADC_CommonInit>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8001674:	4a0b      	ldr	r2, [pc, #44]	; (80016a4 <MX_ADC1_Init+0x100>)
 8001676:	2106      	movs	r1, #6
 8001678:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800167c:	f7ff feb8 	bl	80013f0 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8001680:	2200      	movs	r2, #0
 8001682:	4908      	ldr	r1, [pc, #32]	; (80016a4 <MX_ADC1_Init+0x100>)
 8001684:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001688:	f7ff fee7 	bl	800145a <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SINGLE_ENDED);
 800168c:	227f      	movs	r2, #127	; 0x7f
 800168e:	4905      	ldr	r1, [pc, #20]	; (80016a4 <MX_ADC1_Init+0x100>)
 8001690:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001694:	f7ff ff2a 	bl	80014ec <LL_ADC_SetChannelSingleDiff>

}
 8001698:	bf00      	nop
 800169a:	3750      	adds	r7, #80	; 0x50
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	50000300 	.word	0x50000300
 80016a4:	04300002 	.word	0x04300002

080016a8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	f003 021f 	and.w	r2, r3, #31
 80016b8:	4907      	ldr	r1, [pc, #28]	; (80016d8 <NVIC_EnableIRQ+0x30>)
 80016ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016be:	095b      	lsrs	r3, r3, #5
 80016c0:	2001      	movs	r0, #1
 80016c2:	fa00 f202 	lsl.w	r2, r0, r2
 80016c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	e000e100 	.word	0xe000e100

080016dc <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	6039      	str	r1, [r7, #0]
 80016e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80016e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	da0b      	bge.n	8001708 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	490c      	ldr	r1, [pc, #48]	; (8001728 <NVIC_SetPriority+0x4c>)
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	f003 030f 	and.w	r3, r3, #15
 80016fc:	3b04      	subs	r3, #4
 80016fe:	0112      	lsls	r2, r2, #4
 8001700:	b2d2      	uxtb	r2, r2
 8001702:	440b      	add	r3, r1
 8001704:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001706:	e009      	b.n	800171c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	b2da      	uxtb	r2, r3
 800170c:	4907      	ldr	r1, [pc, #28]	; (800172c <NVIC_SetPriority+0x50>)
 800170e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001712:	0112      	lsls	r2, r2, #4
 8001714:	b2d2      	uxtb	r2, r2
 8001716:	440b      	add	r3, r1
 8001718:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	e000ed00 	.word	0xe000ed00
 800172c:	e000e100 	.word	0xe000e100

08001730 <LL_AHB1_GRP1_EnableClock>:
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001738:	4b08      	ldr	r3, [pc, #32]	; (800175c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800173a:	695a      	ldr	r2, [r3, #20]
 800173c:	4907      	ldr	r1, [pc, #28]	; (800175c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4313      	orrs	r3, r2
 8001742:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001744:	4b05      	ldr	r3, [pc, #20]	; (800175c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001746:	695a      	ldr	r2, [r3, #20]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4013      	ands	r3, r2
 800174c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800174e:	68fb      	ldr	r3, [r7, #12]
}
 8001750:	bf00      	nop
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	40021000 	.word	0x40021000

08001760 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8001764:	2001      	movs	r0, #1
 8001766:	f7ff ffe3 	bl	8001730 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, 0); //NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0)
 800176a:	2100      	movs	r1, #0
 800176c:	2010      	movs	r0, #16
 800176e:	f7ff ffb5 	bl	80016dc <NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001772:	2010      	movs	r0, #16
 8001774:	f7ff ff98 	bl	80016a8 <NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, 0); //NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0)
 8001778:	2100      	movs	r1, #0
 800177a:	2011      	movs	r0, #17
 800177c:	f7ff ffae 	bl	80016dc <NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001780:	2011      	movs	r0, #17
 8001782:	f7ff ff91 	bl	80016a8 <NVIC_EnableIRQ>

}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
	...

0800178c <LL_AHB1_GRP1_EnableClock>:
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001794:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001796:	695a      	ldr	r2, [r3, #20]
 8001798:	4907      	ldr	r1, [pc, #28]	; (80017b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4313      	orrs	r3, r2
 800179e:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80017a0:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80017a2:	695a      	ldr	r2, [r3, #20]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	4013      	ands	r3, r2
 80017a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017aa:	68fb      	ldr	r3, [r7, #12]
}
 80017ac:	bf00      	nop
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	40021000 	.word	0x40021000

080017bc <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017de:	463b      	mov	r3, r7
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
 80017ec:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80017ee:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80017f2:	f7ff ffcb 	bl	800178c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80017f6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80017fa:	f7ff ffc7 	bl	800178c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_3);
 80017fe:	2108      	movs	r1, #8
 8001800:	480a      	ldr	r0, [pc, #40]	; (800182c <MX_GPIO_Init+0x54>)
 8001802:	f7ff ffdb 	bl	80017bc <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8001806:	2308      	movs	r3, #8
 8001808:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800180a:	2301      	movs	r3, #1
 800180c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800180e:	2300      	movs	r3, #0
 8001810:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001816:	2300      	movs	r3, #0
 8001818:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181a:	463b      	mov	r3, r7
 800181c:	4619      	mov	r1, r3
 800181e:	4803      	ldr	r0, [pc, #12]	; (800182c <MX_GPIO_Init+0x54>)
 8001820:	f7fe feb5 	bl	800058e <LL_GPIO_Init>

}
 8001824:	bf00      	nop
 8001826:	3718      	adds	r7, #24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	48000400 	.word	0x48000400

08001830 <NVIC_SetPriorityGrouping>:
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001840:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <NVIC_SetPriorityGrouping+0x44>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001846:	68ba      	ldr	r2, [r7, #8]
 8001848:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800184c:	4013      	ands	r3, r2
 800184e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001858:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800185c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001860:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001862:	4a04      	ldr	r2, [pc, #16]	; (8001874 <NVIC_SetPriorityGrouping+0x44>)
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	60d3      	str	r3, [r2, #12]
}
 8001868:	bf00      	nop
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <LL_RCC_HSI_Enable>:
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800187c:	4b05      	ldr	r3, [pc, #20]	; (8001894 <LL_RCC_HSI_Enable+0x1c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a04      	ldr	r2, [pc, #16]	; (8001894 <LL_RCC_HSI_Enable+0x1c>)
 8001882:	f043 0301 	orr.w	r3, r3, #1
 8001886:	6013      	str	r3, [r2, #0]
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	40021000 	.word	0x40021000

08001898 <LL_RCC_HSI_IsReady>:
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <LL_RCC_HSI_IsReady+0x20>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	bf0c      	ite	eq
 80018a8:	2301      	moveq	r3, #1
 80018aa:	2300      	movne	r3, #0
 80018ac:	b2db      	uxtb	r3, r3
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	40021000 	.word	0x40021000

080018bc <LL_RCC_HSI_SetCalibTrimming>:
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80018c4:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	4904      	ldr	r1, [pc, #16]	; (80018e4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	600b      	str	r3, [r1, #0]
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	40021000 	.word	0x40021000

080018e8 <LL_RCC_SetSysClkSource>:
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80018f0:	4b06      	ldr	r3, [pc, #24]	; (800190c <LL_RCC_SetSysClkSource+0x24>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f023 0203 	bic.w	r2, r3, #3
 80018f8:	4904      	ldr	r1, [pc, #16]	; (800190c <LL_RCC_SetSysClkSource+0x24>)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	604b      	str	r3, [r1, #4]
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	40021000 	.word	0x40021000

08001910 <LL_RCC_GetSysClkSource>:
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001914:	4b04      	ldr	r3, [pc, #16]	; (8001928 <LL_RCC_GetSysClkSource+0x18>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f003 030c 	and.w	r3, r3, #12
}
 800191c:	4618      	mov	r0, r3
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	40021000 	.word	0x40021000

0800192c <LL_RCC_SetAHBPrescaler>:
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001934:	4b06      	ldr	r3, [pc, #24]	; (8001950 <LL_RCC_SetAHBPrescaler+0x24>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800193c:	4904      	ldr	r1, [pc, #16]	; (8001950 <LL_RCC_SetAHBPrescaler+0x24>)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4313      	orrs	r3, r2
 8001942:	604b      	str	r3, [r1, #4]
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	40021000 	.word	0x40021000

08001954 <LL_RCC_SetAPB1Prescaler>:
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <LL_RCC_SetAPB1Prescaler+0x24>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001964:	4904      	ldr	r1, [pc, #16]	; (8001978 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4313      	orrs	r3, r2
 800196a:	604b      	str	r3, [r1, #4]
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	40021000 	.word	0x40021000

0800197c <LL_RCC_SetAPB2Prescaler>:
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800198c:	4904      	ldr	r1, [pc, #16]	; (80019a0 <LL_RCC_SetAPB2Prescaler+0x24>)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4313      	orrs	r3, r2
 8001992:	604b      	str	r3, [r1, #4]
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	40021000 	.word	0x40021000

080019a4 <LL_RCC_SetADCClockSource>:
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_ADCPRE12, ADCxSource);
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <LL_RCC_SetADCClockSource+0x24>)
 80019ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80019b4:	4904      	ldr	r1, [pc, #16]	; (80019c8 <LL_RCC_SetADCClockSource+0x24>)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	40021000 	.word	0x40021000

080019cc <LL_RCC_PLL_Enable>:
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80019d0:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <LL_RCC_PLL_Enable+0x1c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a04      	ldr	r2, [pc, #16]	; (80019e8 <LL_RCC_PLL_Enable+0x1c>)
 80019d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019da:	6013      	str	r3, [r2, #0]
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	40021000 	.word	0x40021000

080019ec <LL_RCC_PLL_IsReady>:
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80019f0:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <LL_RCC_PLL_IsReady+0x24>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80019fc:	bf0c      	ite	eq
 80019fe:	2301      	moveq	r3, #1
 8001a00:	2300      	movne	r3, #0
 8001a02:	b2db      	uxtb	r3, r3
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	40021000 	.word	0x40021000

08001a14 <LL_RCC_PLL_ConfigDomain_SYS>:
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, (Source & RCC_CFGR_PLLSRC) | PLLMul);
 8001a1e:	4b0e      	ldr	r3, [pc, #56]	; (8001a58 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	430b      	orrs	r3, r1
 8001a30:	4909      	ldr	r1, [pc, #36]	; (8001a58 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001a32:	4313      	orrs	r3, r2
 8001a34:	604b      	str	r3, [r1, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (Source & RCC_CFGR2_PREDIV));
 8001a36:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3a:	f023 020f 	bic.w	r2, r3, #15
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f003 030f 	and.w	r3, r3, #15
 8001a44:	4904      	ldr	r1, [pc, #16]	; (8001a58 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	40021000 	.word	0x40021000

08001a5c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001a64:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a66:	69da      	ldr	r2, [r3, #28]
 8001a68:	4907      	ldr	r1, [pc, #28]	; (8001a88 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001a70:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a72:	69da      	ldr	r2, [r3, #28]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4013      	ands	r3, r2
 8001a78:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
}
 8001a7c:	bf00      	nop
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	40021000 	.word	0x40021000

08001a8c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001a94:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001a96:	699a      	ldr	r2, [r3, #24]
 8001a98:	4907      	ldr	r1, [pc, #28]	; (8001ab8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001aa0:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001aa2:	699a      	ldr	r2, [r3, #24]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
}
 8001aac:	bf00      	nop
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	40021000 	.word	0x40021000

08001abc <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001ac4:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <LL_FLASH_SetLatency+0x24>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f023 0207 	bic.w	r2, r3, #7
 8001acc:	4904      	ldr	r1, [pc, #16]	; (8001ae0 <LL_FLASH_SetLatency+0x24>)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	600b      	str	r3, [r1, #0]
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	40022000 	.word	0x40022000

08001ae4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001ae8:	4b04      	ldr	r3, [pc, #16]	; (8001afc <LL_FLASH_GetLatency+0x18>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0307 	and.w	r3, r3, #7
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	40022000 	.word	0x40022000

08001b00 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	d106      	bne.n	8001b1c <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8001b0e:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <LL_SYSTICK_SetClkSource+0x34>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a08      	ldr	r2, [pc, #32]	; (8001b34 <LL_SYSTICK_SetClkSource+0x34>)
 8001b14:	f043 0304 	orr.w	r3, r3, #4
 8001b18:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8001b1a:	e005      	b.n	8001b28 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8001b1c:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <LL_SYSTICK_SetClkSource+0x34>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a04      	ldr	r2, [pc, #16]	; (8001b34 <LL_SYSTICK_SetClkSource+0x34>)
 8001b22:	f023 0304 	bic.w	r3, r3, #4
 8001b26:	6013      	str	r3, [r2, #0]
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	e000e010 	.word	0xe000e010

08001b38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001b3c:	2001      	movs	r0, #1
 8001b3e:	f7ff ffa5 	bl	8001a8c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001b42:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001b46:	f7ff ff89 	bl	8001a5c <LL_APB1_GRP1_EnableClock>
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b4a:	2003      	movs	r0, #3
 8001b4c:	f7ff fe70 	bl	8001830 <NVIC_SetPriorityGrouping>

  /* Configure the system clock */
  SystemClock_Config();
 8001b50:	f000 f812 	bl	8001b78 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b54:	f7ff fe40 	bl	80017d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b58:	f7ff fe02 	bl	8001760 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001b5c:	f000 ffea 	bl	8002b34 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001b60:	f7ff fd20 	bl	80015a4 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001b64:	f000 fc58 	bl	8002418 <MX_TIM2_Init>
  USART2_RegisterCallback(proccesDmaData);
 8001b68:	4802      	ldr	r0, [pc, #8]	; (8001b74 <main+0x3c>)
 8001b6a:	f000 ffd1 	bl	8002b10 <USART2_RegisterCallback>
    		uint8_t tx3[] = " bytes, load [in %]: ";
    		uint8_t tx4[] = "  %\n \r";
*/
    		while (1)
  {
    					USART2_CheckDmaReception();
 8001b6e:	f001 f8b9 	bl	8002ce4 <USART2_CheckDmaReception>
 8001b72:	e7fc      	b.n	8001b6e <main+0x36>
 8001b74:	08001c09 	.word	0x08001c09

08001b78 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */

void SystemClock_Config(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001b7c:	2000      	movs	r0, #0
 8001b7e:	f7ff ff9d 	bl	8001abc <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8001b82:	f7ff ffaf 	bl	8001ae4 <LL_FLASH_GetLatency>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <SystemClock_Config+0x18>
  {
  Error_Handler();
 8001b8c:	f000 f91c 	bl	8001dc8 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 8001b90:	f7ff fe72 	bl	8001878 <LL_RCC_HSI_Enable>


  while(LL_RCC_HSI_IsReady() != 1)
 8001b94:	bf00      	nop
 8001b96:	f7ff fe7f 	bl	8001898 <LL_RCC_HSI_IsReady>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d1fa      	bne.n	8001b96 <SystemClock_Config+0x1e>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8001ba0:	2010      	movs	r0, #16
 8001ba2:	f7ff fe8b 	bl	80018bc <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI_DIV_2, LL_RCC_PLL_MUL_4);
 8001ba6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8001baa:	2000      	movs	r0, #0
 8001bac:	f7ff ff32 	bl	8001a14 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8001bb0:	f7ff ff0c 	bl	80019cc <LL_RCC_PLL_Enable>


  while(LL_RCC_PLL_IsReady() != 1)
 8001bb4:	bf00      	nop
 8001bb6:	f7ff ff19 	bl	80019ec <LL_RCC_PLL_IsReady>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d1fa      	bne.n	8001bb6 <SystemClock_Config+0x3e>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001bc0:	2000      	movs	r0, #0
 8001bc2:	f7ff feb3 	bl	800192c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001bc6:	2000      	movs	r0, #0
 8001bc8:	f7ff fec4 	bl	8001954 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8001bcc:	2000      	movs	r0, #0
 8001bce:	f7ff fed5 	bl	800197c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	f7ff fe88 	bl	80018e8 <LL_RCC_SetSysClkSource>


  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001bd8:	bf00      	nop
 8001bda:	f7ff fe99 	bl	8001910 <LL_RCC_GetSysClkSource>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1fa      	bne.n	8001bda <SystemClock_Config+0x62>
  {

  }
  LL_Init1msTick(8000000);
 8001be4:	4807      	ldr	r0, [pc, #28]	; (8001c04 <SystemClock_Config+0x8c>)
 8001be6:	f7ff fbe5 	bl	80013b4 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8001bea:	2004      	movs	r0, #4
 8001bec:	f7ff ff88 	bl	8001b00 <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 8001bf0:	4804      	ldr	r0, [pc, #16]	; (8001c04 <SystemClock_Config+0x8c>)
 8001bf2:	f7ff fbed 	bl	80013d0 <LL_SetSystemCoreClock>
  LL_RCC_SetADCClockSource(LL_RCC_ADC12_CLKSRC_PLL_DIV_1);
 8001bf6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001bfa:	f7ff fed3 	bl	80019a4 <LL_RCC_SetADCClockSource>
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	007a1200 	.word	0x007a1200

08001c08 <proccesDmaData>:

void proccesDmaData(uint8_t sign)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	71fb      	strb	r3, [r7, #7]
	/* Process received data */
		// type your algorithm here:

		if(start==1 && sign!=0 && sign !='$'){					//nacitavanie slova
 8001c12:	4b26      	ldr	r3, [pc, #152]	; (8001cac <proccesDmaData+0xa4>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d10f      	bne.n	8001c3a <proccesDmaData+0x32>
 8001c1a:	79fb      	ldrb	r3, [r7, #7]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d00c      	beq.n	8001c3a <proccesDmaData+0x32>
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	2b24      	cmp	r3, #36	; 0x24
 8001c24:	d009      	beq.n	8001c3a <proccesDmaData+0x32>

			pole[poc_prijatych]=sign;
 8001c26:	4b22      	ldr	r3, [pc, #136]	; (8001cb0 <proccesDmaData+0xa8>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4922      	ldr	r1, [pc, #136]	; (8001cb4 <proccesDmaData+0xac>)
 8001c2c:	79fa      	ldrb	r2, [r7, #7]
 8001c2e:	54ca      	strb	r2, [r1, r3]
			poc_prijatych++;
 8001c30:	4b1f      	ldr	r3, [pc, #124]	; (8001cb0 <proccesDmaData+0xa8>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	3301      	adds	r3, #1
 8001c36:	4a1e      	ldr	r2, [pc, #120]	; (8001cb0 <proccesDmaData+0xa8>)
 8001c38:	6013      	str	r3, [r2, #0]
		}

		if ((poc_prijatych==10 || (sign=='$' && poc_prijatych<10)) && start == 1)		//ked doslo moc zbytocnych znakov / ukoncovaci
 8001c3a:	4b1d      	ldr	r3, [pc, #116]	; (8001cb0 <proccesDmaData+0xa8>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2b0a      	cmp	r3, #10
 8001c40:	d006      	beq.n	8001c50 <proccesDmaData+0x48>
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	2b24      	cmp	r3, #36	; 0x24
 8001c46:	d118      	bne.n	8001c7a <proccesDmaData+0x72>
 8001c48:	4b19      	ldr	r3, [pc, #100]	; (8001cb0 <proccesDmaData+0xa8>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2b09      	cmp	r3, #9
 8001c4e:	dc14      	bgt.n	8001c7a <proccesDmaData+0x72>
 8001c50:	4b16      	ldr	r3, [pc, #88]	; (8001cac <proccesDmaData+0xa4>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d110      	bne.n	8001c7a <proccesDmaData+0x72>
		{

					poc_prijatych=0;
 8001c58:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <proccesDmaData+0xa8>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]

					if (sign == '$') 	//iba ked je ukoncovaci
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	2b24      	cmp	r3, #36	; 0x24
 8001c62:	d101      	bne.n	8001c68 <proccesDmaData+0x60>
					{
						checkForKeyWords();
 8001c64:	f000 f828 	bl	8001cb8 <checkForKeyWords>
					}
					memset(pole, 0, strlen(pole));
 8001c68:	4812      	ldr	r0, [pc, #72]	; (8001cb4 <proccesDmaData+0xac>)
 8001c6a:	f7fe fab7 	bl	80001dc <strlen>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	461a      	mov	r2, r3
 8001c72:	2100      	movs	r1, #0
 8001c74:	480f      	ldr	r0, [pc, #60]	; (8001cb4 <proccesDmaData+0xac>)
 8001c76:	f001 f91f 	bl	8002eb8 <memset>
		}


		if (start==0 && sign=='$'){				// zaciatok
 8001c7a:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <proccesDmaData+0xa4>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d105      	bne.n	8001c8e <proccesDmaData+0x86>
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	2b24      	cmp	r3, #36	; 0x24
 8001c86:	d102      	bne.n	8001c8e <proccesDmaData+0x86>
							start=1;
 8001c88:	4b08      	ldr	r3, [pc, #32]	; (8001cac <proccesDmaData+0xa4>)
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	601a      	str	r2, [r3, #0]
				}
		if (start==1 &&  sign=='$'){
 8001c8e:	4b07      	ldr	r3, [pc, #28]	; (8001cac <proccesDmaData+0xa4>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d105      	bne.n	8001ca2 <proccesDmaData+0x9a>
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	2b24      	cmp	r3, #36	; 0x24
 8001c9a:	d102      	bne.n	8001ca2 <proccesDmaData+0x9a>
			start=0;
 8001c9c:	4b03      	ldr	r3, [pc, #12]	; (8001cac <proccesDmaData+0xa4>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
		}

}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	200001f0 	.word	0x200001f0
 8001cb0:	200001f4 	.word	0x200001f4
 8001cb4:	20000208 	.word	0x20000208

08001cb8 <checkForKeyWords>:

void checkForKeyWords(){					//
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08a      	sub	sp, #40	; 0x28
 8001cbc:	af00      	add	r7, sp, #0
	const uint8_t autoWord[] = "auto";
 8001cbe:	4a3c      	ldr	r2, [pc, #240]	; (8001db0 <checkForKeyWords+0xf8>)
 8001cc0:	f107 0314 	add.w	r3, r7, #20
 8001cc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cc8:	6018      	str	r0, [r3, #0]
 8001cca:	3304      	adds	r3, #4
 8001ccc:	7019      	strb	r1, [r3, #0]
	const uint8_t manWord[] = "manual";
 8001cce:	4a39      	ldr	r2, [pc, #228]	; (8001db4 <checkForKeyWords+0xfc>)
 8001cd0:	f107 030c 	add.w	r3, r7, #12
 8001cd4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cd8:	6018      	str	r0, [r3, #0]
 8001cda:	3304      	adds	r3, #4
 8001cdc:	8019      	strh	r1, [r3, #0]
 8001cde:	3302      	adds	r3, #2
 8001ce0:	0c0a      	lsrs	r2, r1, #16
 8001ce2:	701a      	strb	r2, [r3, #0]
	const uint8_t pwmWord[] = "pwm";
 8001ce4:	4b34      	ldr	r3, [pc, #208]	; (8001db8 <checkForKeyWords+0x100>)
 8001ce6:	60bb      	str	r3, [r7, #8]

	int dlzka = strlen(pole);
 8001ce8:	4834      	ldr	r0, [pc, #208]	; (8001dbc <checkForKeyWords+0x104>)
 8001cea:	f7fe fa77 	bl	80001dc <strlen>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	623b      	str	r3, [r7, #32]
	for (int i = 0; i < dlzka ; i++)
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8001cf6:	e01c      	b.n	8001d32 <checkForKeyWords+0x7a>
	{
		pole[i] = tolower(pole[i]);		//da to na male
 8001cf8:	4a30      	ldr	r2, [pc, #192]	; (8001dbc <checkForKeyWords+0x104>)
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	4413      	add	r3, r2
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	76fb      	strb	r3, [r7, #27]
 8001d02:	f001 f8b9 	bl	8002e78 <__locale_ctype_ptr>
 8001d06:	4602      	mov	r2, r0
 8001d08:	7efb      	ldrb	r3, [r7, #27]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	4413      	add	r3, r2
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	f003 0303 	and.w	r3, r3, #3
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d102      	bne.n	8001d1e <checkForKeyWords+0x66>
 8001d18:	7efb      	ldrb	r3, [r7, #27]
 8001d1a:	3320      	adds	r3, #32
 8001d1c:	e000      	b.n	8001d20 <checkForKeyWords+0x68>
 8001d1e:	7efb      	ldrb	r3, [r7, #27]
 8001d20:	b2d9      	uxtb	r1, r3
 8001d22:	4a26      	ldr	r2, [pc, #152]	; (8001dbc <checkForKeyWords+0x104>)
 8001d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d26:	4413      	add	r3, r2
 8001d28:	460a      	mov	r2, r1
 8001d2a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < dlzka ; i++)
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2e:	3301      	adds	r3, #1
 8001d30:	627b      	str	r3, [r7, #36]	; 0x24
 8001d32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d34:	6a3b      	ldr	r3, [r7, #32]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	dbde      	blt.n	8001cf8 <checkForKeyWords+0x40>
	}
	char *pomocny_pointer;

	//checkneme hotwordy
	if (!strcmp(pole, autoWord))
 8001d3a:	f107 0314 	add.w	r3, r7, #20
 8001d3e:	4619      	mov	r1, r3
 8001d40:	481e      	ldr	r0, [pc, #120]	; (8001dbc <checkForKeyWords+0x104>)
 8001d42:	f7fe fa41 	bl	80001c8 <strcmp>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d102      	bne.n	8001d52 <checkForKeyWords+0x9a>
		{
		mode_auto = 1;
 8001d4c:	4b1c      	ldr	r3, [pc, #112]	; (8001dc0 <checkForKeyWords+0x108>)
 8001d4e:	2201      	movs	r2, #1
 8001d50:	601a      	str	r2, [r3, #0]
		}
	if (!strcmp(pole, manWord))
 8001d52:	f107 030c 	add.w	r3, r7, #12
 8001d56:	4619      	mov	r1, r3
 8001d58:	4818      	ldr	r0, [pc, #96]	; (8001dbc <checkForKeyWords+0x104>)
 8001d5a:	f7fe fa35 	bl	80001c8 <strcmp>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d102      	bne.n	8001d6a <checkForKeyWords+0xb2>
		{
		mode_auto = 0;
 8001d64:	4b16      	ldr	r3, [pc, #88]	; (8001dc0 <checkForKeyWords+0x108>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
		}

	pomocny_pointer = strstr(pole, pwmWord);
 8001d6a:	f107 0308 	add.w	r3, r7, #8
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4812      	ldr	r0, [pc, #72]	; (8001dbc <checkForKeyWords+0x104>)
 8001d72:	f001 f8a9 	bl	8002ec8 <strstr>
 8001d76:	61f8      	str	r0, [r7, #28]
	char uroven[2];
	if (pomocny_pointer != NULL)
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d014      	beq.n	8001da8 <checkForKeyWords+0xf0>
		{
		if (pole[3] != 0)
 8001d7e:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <checkForKeyWords+0x104>)
 8001d80:	78db      	ldrb	r3, [r3, #3]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d006      	beq.n	8001d94 <checkForKeyWords+0xdc>
		{
			uroven[0] =	pole[3];
 8001d86:	4b0d      	ldr	r3, [pc, #52]	; (8001dbc <checkForKeyWords+0x104>)
 8001d88:	78db      	ldrb	r3, [r3, #3]
 8001d8a:	713b      	strb	r3, [r7, #4]
			uroven[1] = pole[4];
 8001d8c:	4b0b      	ldr	r3, [pc, #44]	; (8001dbc <checkForKeyWords+0x104>)
 8001d8e:	791b      	ldrb	r3, [r3, #4]
 8001d90:	717b      	strb	r3, [r7, #5]
 8001d92:	e002      	b.n	8001d9a <checkForKeyWords+0xe2>
		}
		else
			uroven[0] = pole[4];
 8001d94:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <checkForKeyWords+0x104>)
 8001d96:	791b      	ldrb	r3, [r3, #4]
 8001d98:	713b      	strb	r3, [r7, #4]
		pwm_cnt = atoi(uroven);
 8001d9a:	1d3b      	adds	r3, r7, #4
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f001 f83e 	bl	8002e1e <atoi>
 8001da2:	4602      	mov	r2, r0
 8001da4:	4b07      	ldr	r3, [pc, #28]	; (8001dc4 <checkForKeyWords+0x10c>)
 8001da6:	601a      	str	r2, [r3, #0]
		}

}
 8001da8:	bf00      	nop
 8001daa:	3728      	adds	r7, #40	; 0x28
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	08003054 	.word	0x08003054
 8001db4:	0800305c 	.word	0x0800305c
 8001db8:	006d7770 	.word	0x006d7770
 8001dbc:	20000208 	.word	0x20000208
 8001dc0:	200001f8 	.word	0x200001f8
 8001dc4:	200001fc 	.word	0x200001fc

08001dc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0

}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
	...

08001dd8 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	3b01      	subs	r3, #1
 8001de6:	4a0b      	ldr	r2, [pc, #44]	; (8001e14 <LL_DMA_DisableChannel+0x3c>)
 8001de8:	5cd3      	ldrb	r3, [r2, r3]
 8001dea:	461a      	mov	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4413      	add	r3, r2
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	3a01      	subs	r2, #1
 8001df6:	4907      	ldr	r1, [pc, #28]	; (8001e14 <LL_DMA_DisableChannel+0x3c>)
 8001df8:	5c8a      	ldrb	r2, [r1, r2]
 8001dfa:	4611      	mov	r1, r2
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	440a      	add	r2, r1
 8001e00:	f023 0301 	bic.w	r3, r3, #1
 8001e04:	6013      	str	r3, [r2, #0]
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	08003064 	.word	0x08003064

08001e18 <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e2c:	bf0c      	ite	eq
 8001e2e:	2301      	moveq	r3, #1
 8001e30:	2300      	movne	r3, #0
 8001e32:	b2db      	uxtb	r3, r3
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e54:	bf0c      	ite	eq
 8001e56:	2301      	moveq	r3, #1
 8001e58:	2300      	movne	r3, #0
 8001e5a:	b2db      	uxtb	r3, r3
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <LL_DMA_IsActiveFlag_HT6>:
  * @rmtoll ISR          HTIF6         LL_DMA_IsActiveFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e7c:	bf0c      	ite	eq
 8001e7e:	2301      	moveq	r3, #1
 8001e80:	2300      	movne	r3, #0
 8001e82:	b2db      	uxtb	r3, r3
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001e9e:	605a      	str	r2, [r3, #4]
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eba:	605a      	str	r2, [r3, #4]
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <LL_DMA_ClearFlag_HT6>:
  * @rmtoll IFCR         CHTIF6        LL_DMA_ClearFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001ed6:	605a      	str	r2, [r3, #4]
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	69db      	ldr	r3, [r3, #28]
 8001ef0:	f003 0310 	and.w	r3, r3, #16
 8001ef4:	2b10      	cmp	r3, #16
 8001ef6:	bf0c      	ite	eq
 8001ef8:	2301      	moveq	r3, #1
 8001efa:	2300      	movne	r3, #0
 8001efc:	b2db      	uxtb	r3, r3
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	b083      	sub	sp, #12
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f1a:	2b40      	cmp	r3, #64	; 0x40
 8001f1c:	bf0c      	ite	eq
 8001f1e:	2301      	moveq	r3, #1
 8001f20:	2300      	movne	r3, #0
 8001f22:	b2db      	uxtb	r3, r3
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2210      	movs	r2, #16
 8001f3c:	621a      	str	r2, [r3, #32]
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f5c:	e7fe      	b.n	8001f5c <HardFault_Handler+0x4>

08001f5e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f62:	e7fe      	b.n	8001f62 <MemManage_Handler+0x4>

08001f64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f68:	e7fe      	b.n	8001f68 <BusFault_Handler+0x4>

08001f6a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f6e:	e7fe      	b.n	8001f6e <UsageFault_Handler+0x4>

08001f70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f74:	bf00      	nop
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr

08001f7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == SET)
 8001fac:	480c      	ldr	r0, [pc, #48]	; (8001fe0 <DMA1_Channel6_IRQHandler+0x38>)
 8001fae:	f7ff ff33 	bl	8001e18 <LL_DMA_IsActiveFlag_TC6>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d105      	bne.n	8001fc4 <DMA1_Channel6_IRQHandler+0x1c>
	{
		USART2_CheckDmaReception();
 8001fb8:	f000 fe94 	bl	8002ce4 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_TC6(DMA1);
 8001fbc:	4808      	ldr	r0, [pc, #32]	; (8001fe0 <DMA1_Channel6_IRQHandler+0x38>)
 8001fbe:	f7ff ff67 	bl	8001e90 <LL_DMA_ClearFlag_TC6>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
	{
		USART2_CheckDmaReception();
		LL_DMA_ClearFlag_HT6(DMA1);
	}
}
 8001fc2:	e00a      	b.n	8001fda <DMA1_Channel6_IRQHandler+0x32>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
 8001fc4:	4806      	ldr	r0, [pc, #24]	; (8001fe0 <DMA1_Channel6_IRQHandler+0x38>)
 8001fc6:	f7ff ff4f 	bl	8001e68 <LL_DMA_IsActiveFlag_HT6>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d104      	bne.n	8001fda <DMA1_Channel6_IRQHandler+0x32>
		USART2_CheckDmaReception();
 8001fd0:	f000 fe88 	bl	8002ce4 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_HT6(DMA1);
 8001fd4:	4802      	ldr	r0, [pc, #8]	; (8001fe0 <DMA1_Channel6_IRQHandler+0x38>)
 8001fd6:	f7ff ff77 	bl	8001ec8 <LL_DMA_ClearFlag_HT6>
}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40020000 	.word	0x40020000

08001fe4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 8001fe8:	480a      	ldr	r0, [pc, #40]	; (8002014 <DMA1_Channel7_IRQHandler+0x30>)
 8001fea:	f7ff ff29 	bl	8001e40 <LL_DMA_IsActiveFlag_TC7>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d10d      	bne.n	8002010 <DMA1_Channel7_IRQHandler+0x2c>
	{
		LL_DMA_ClearFlag_TC7(DMA1);
 8001ff4:	4807      	ldr	r0, [pc, #28]	; (8002014 <DMA1_Channel7_IRQHandler+0x30>)
 8001ff6:	f7ff ff59 	bl	8001eac <LL_DMA_ClearFlag_TC7>

		while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 8001ffa:	bf00      	nop
 8001ffc:	4806      	ldr	r0, [pc, #24]	; (8002018 <DMA1_Channel7_IRQHandler+0x34>)
 8001ffe:	f7ff ff84 	bl	8001f0a <LL_USART_IsActiveFlag_TC>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d0f9      	beq.n	8001ffc <DMA1_Channel7_IRQHandler+0x18>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 8002008:	2107      	movs	r1, #7
 800200a:	4802      	ldr	r0, [pc, #8]	; (8002014 <DMA1_Channel7_IRQHandler+0x30>)
 800200c:	f7ff fee4 	bl	8001dd8 <LL_DMA_DisableChannel>
	}
}
 8002010:	bf00      	nop
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40020000 	.word	0x40020000
 8002018:	40004400 	.word	0x40004400

0800201c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0

  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
	...

0800202c <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_IDLE(USART2))
 8002030:	4806      	ldr	r0, [pc, #24]	; (800204c <USART2_IRQHandler+0x20>)
 8002032:	f7ff ff57 	bl	8001ee4 <LL_USART_IsActiveFlag_IDLE>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d004      	beq.n	8002046 <USART2_IRQHandler+0x1a>
	{
		USART2_CheckDmaReception();
 800203c:	f000 fe52 	bl	8002ce4 <USART2_CheckDmaReception>
		LL_USART_ClearFlag_IDLE(USART2);
 8002040:	4802      	ldr	r0, [pc, #8]	; (800204c <USART2_IRQHandler+0x20>)
 8002042:	f7ff ff75 	bl	8001f30 <LL_USART_ClearFlag_IDLE>
	}
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40004400 	.word	0x40004400

08002050 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002054:	4b1f      	ldr	r3, [pc, #124]	; (80020d4 <SystemInit+0x84>)
 8002056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800205a:	4a1e      	ldr	r2, [pc, #120]	; (80020d4 <SystemInit+0x84>)
 800205c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002060:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002064:	4b1c      	ldr	r3, [pc, #112]	; (80020d8 <SystemInit+0x88>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a1b      	ldr	r2, [pc, #108]	; (80020d8 <SystemInit+0x88>)
 800206a:	f043 0301 	orr.w	r3, r3, #1
 800206e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8002070:	4b19      	ldr	r3, [pc, #100]	; (80020d8 <SystemInit+0x88>)
 8002072:	685a      	ldr	r2, [r3, #4]
 8002074:	4918      	ldr	r1, [pc, #96]	; (80020d8 <SystemInit+0x88>)
 8002076:	4b19      	ldr	r3, [pc, #100]	; (80020dc <SystemInit+0x8c>)
 8002078:	4013      	ands	r3, r2
 800207a:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800207c:	4b16      	ldr	r3, [pc, #88]	; (80020d8 <SystemInit+0x88>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a15      	ldr	r2, [pc, #84]	; (80020d8 <SystemInit+0x88>)
 8002082:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800208a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800208c:	4b12      	ldr	r3, [pc, #72]	; (80020d8 <SystemInit+0x88>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a11      	ldr	r2, [pc, #68]	; (80020d8 <SystemInit+0x88>)
 8002092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002096:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002098:	4b0f      	ldr	r3, [pc, #60]	; (80020d8 <SystemInit+0x88>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	4a0e      	ldr	r2, [pc, #56]	; (80020d8 <SystemInit+0x88>)
 800209e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80020a2:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80020a4:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <SystemInit+0x88>)
 80020a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a8:	4a0b      	ldr	r2, [pc, #44]	; (80020d8 <SystemInit+0x88>)
 80020aa:	f023 030f 	bic.w	r3, r3, #15
 80020ae:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80020b0:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <SystemInit+0x88>)
 80020b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020b4:	4908      	ldr	r1, [pc, #32]	; (80020d8 <SystemInit+0x88>)
 80020b6:	4b0a      	ldr	r3, [pc, #40]	; (80020e0 <SystemInit+0x90>)
 80020b8:	4013      	ands	r3, r2
 80020ba:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80020bc:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <SystemInit+0x88>)
 80020be:	2200      	movs	r2, #0
 80020c0:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80020c2:	4b04      	ldr	r3, [pc, #16]	; (80020d4 <SystemInit+0x84>)
 80020c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020c8:	609a      	str	r2, [r3, #8]
#endif
}
 80020ca:	bf00      	nop
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	e000ed00 	.word	0xe000ed00
 80020d8:	40021000 	.word	0x40021000
 80020dc:	f87fc00c 	.word	0xf87fc00c
 80020e0:	ff00fccc 	.word	0xff00fccc

080020e4 <NVIC_GetPriorityGrouping>:
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020e8:	4b04      	ldr	r3, [pc, #16]	; (80020fc <NVIC_GetPriorityGrouping+0x18>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	0a1b      	lsrs	r3, r3, #8
 80020ee:	f003 0307 	and.w	r3, r3, #7
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	e000ed00 	.word	0xe000ed00

08002100 <NVIC_EnableIRQ>:
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	4603      	mov	r3, r0
 8002108:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800210a:	79fb      	ldrb	r3, [r7, #7]
 800210c:	f003 021f 	and.w	r2, r3, #31
 8002110:	4907      	ldr	r1, [pc, #28]	; (8002130 <NVIC_EnableIRQ+0x30>)
 8002112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002116:	095b      	lsrs	r3, r3, #5
 8002118:	2001      	movs	r0, #1
 800211a:	fa00 f202 	lsl.w	r2, r0, r2
 800211e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	e000e100 	.word	0xe000e100

08002134 <NVIC_SetPriority>:
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	6039      	str	r1, [r7, #0]
 800213e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002144:	2b00      	cmp	r3, #0
 8002146:	da0b      	bge.n	8002160 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	b2da      	uxtb	r2, r3
 800214c:	490c      	ldr	r1, [pc, #48]	; (8002180 <NVIC_SetPriority+0x4c>)
 800214e:	79fb      	ldrb	r3, [r7, #7]
 8002150:	f003 030f 	and.w	r3, r3, #15
 8002154:	3b04      	subs	r3, #4
 8002156:	0112      	lsls	r2, r2, #4
 8002158:	b2d2      	uxtb	r2, r2
 800215a:	440b      	add	r3, r1
 800215c:	761a      	strb	r2, [r3, #24]
}
 800215e:	e009      	b.n	8002174 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	b2da      	uxtb	r2, r3
 8002164:	4907      	ldr	r1, [pc, #28]	; (8002184 <NVIC_SetPriority+0x50>)
 8002166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216a:	0112      	lsls	r2, r2, #4
 800216c:	b2d2      	uxtb	r2, r2
 800216e:	440b      	add	r3, r1
 8002170:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	e000ed00 	.word	0xe000ed00
 8002184:	e000e100 	.word	0xe000e100

08002188 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002188:	b480      	push	{r7}
 800218a:	b089      	sub	sp, #36	; 0x24
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f1c3 0307 	rsb	r3, r3, #7
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	bf28      	it	cs
 80021a6:	2304      	movcs	r3, #4
 80021a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	3304      	adds	r3, #4
 80021ae:	2b06      	cmp	r3, #6
 80021b0:	d902      	bls.n	80021b8 <NVIC_EncodePriority+0x30>
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	3b03      	subs	r3, #3
 80021b6:	e000      	b.n	80021ba <NVIC_EncodePriority+0x32>
 80021b8:	2300      	movs	r3, #0
 80021ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021bc:	f04f 32ff 	mov.w	r2, #4294967295
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43da      	mvns	r2, r3
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	401a      	ands	r2, r3
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021d0:	f04f 31ff 	mov.w	r1, #4294967295
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	fa01 f303 	lsl.w	r3, r1, r3
 80021da:	43d9      	mvns	r1, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e0:	4313      	orrs	r3, r2
         );
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3724      	adds	r7, #36	; 0x24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
	...

080021f0 <LL_AHB1_GRP1_EnableClock>:
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80021f8:	4b08      	ldr	r3, [pc, #32]	; (800221c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80021fa:	695a      	ldr	r2, [r3, #20]
 80021fc:	4907      	ldr	r1, [pc, #28]	; (800221c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4313      	orrs	r3, r2
 8002202:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002204:	4b05      	ldr	r3, [pc, #20]	; (800221c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002206:	695a      	ldr	r2, [r3, #20]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4013      	ands	r3, r2
 800220c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800220e:	68fb      	ldr	r3, [r7, #12]
}
 8002210:	bf00      	nop
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	40021000 	.word	0x40021000

08002220 <LL_APB1_GRP1_EnableClock>:
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002228:	4b08      	ldr	r3, [pc, #32]	; (800224c <LL_APB1_GRP1_EnableClock+0x2c>)
 800222a:	69da      	ldr	r2, [r3, #28]
 800222c:	4907      	ldr	r1, [pc, #28]	; (800224c <LL_APB1_GRP1_EnableClock+0x2c>)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4313      	orrs	r3, r2
 8002232:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002234:	4b05      	ldr	r3, [pc, #20]	; (800224c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002236:	69da      	ldr	r2, [r3, #28]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4013      	ands	r3, r2
 800223c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800223e:	68fb      	ldr	r3, [r7, #12]
}
 8002240:	bf00      	nop
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	40021000 	.word	0x40021000

08002250 <LL_TIM_DisableARRPreload>:
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	601a      	str	r2, [r3, #0]
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <LL_TIM_OC_DisableFast>:
{
 8002270:	b4b0      	push	{r4, r5, r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d028      	beq.n	80022d2 <LL_TIM_OC_DisableFast+0x62>
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	2b04      	cmp	r3, #4
 8002284:	d023      	beq.n	80022ce <LL_TIM_OC_DisableFast+0x5e>
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	2b10      	cmp	r3, #16
 800228a:	d01e      	beq.n	80022ca <LL_TIM_OC_DisableFast+0x5a>
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	2b40      	cmp	r3, #64	; 0x40
 8002290:	d019      	beq.n	80022c6 <LL_TIM_OC_DisableFast+0x56>
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002298:	d013      	beq.n	80022c2 <LL_TIM_OC_DisableFast+0x52>
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022a0:	d00d      	beq.n	80022be <LL_TIM_OC_DisableFast+0x4e>
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022a8:	d007      	beq.n	80022ba <LL_TIM_OC_DisableFast+0x4a>
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b0:	d101      	bne.n	80022b6 <LL_TIM_OC_DisableFast+0x46>
 80022b2:	2307      	movs	r3, #7
 80022b4:	e00e      	b.n	80022d4 <LL_TIM_OC_DisableFast+0x64>
 80022b6:	2308      	movs	r3, #8
 80022b8:	e00c      	b.n	80022d4 <LL_TIM_OC_DisableFast+0x64>
 80022ba:	2306      	movs	r3, #6
 80022bc:	e00a      	b.n	80022d4 <LL_TIM_OC_DisableFast+0x64>
 80022be:	2305      	movs	r3, #5
 80022c0:	e008      	b.n	80022d4 <LL_TIM_OC_DisableFast+0x64>
 80022c2:	2304      	movs	r3, #4
 80022c4:	e006      	b.n	80022d4 <LL_TIM_OC_DisableFast+0x64>
 80022c6:	2303      	movs	r3, #3
 80022c8:	e004      	b.n	80022d4 <LL_TIM_OC_DisableFast+0x64>
 80022ca:	2302      	movs	r3, #2
 80022cc:	e002      	b.n	80022d4 <LL_TIM_OC_DisableFast+0x64>
 80022ce:	2301      	movs	r3, #1
 80022d0:	e000      	b.n	80022d4 <LL_TIM_OC_DisableFast+0x64>
 80022d2:	2300      	movs	r3, #0
 80022d4:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	3318      	adds	r3, #24
 80022da:	461a      	mov	r2, r3
 80022dc:	4629      	mov	r1, r5
 80022de:	4b09      	ldr	r3, [pc, #36]	; (8002304 <LL_TIM_OC_DisableFast+0x94>)
 80022e0:	5c5b      	ldrb	r3, [r3, r1]
 80022e2:	4413      	add	r3, r2
 80022e4:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80022e6:	6822      	ldr	r2, [r4, #0]
 80022e8:	4629      	mov	r1, r5
 80022ea:	4b07      	ldr	r3, [pc, #28]	; (8002308 <LL_TIM_OC_DisableFast+0x98>)
 80022ec:	5c5b      	ldrb	r3, [r3, r1]
 80022ee:	4619      	mov	r1, r3
 80022f0:	2304      	movs	r3, #4
 80022f2:	408b      	lsls	r3, r1
 80022f4:	43db      	mvns	r3, r3
 80022f6:	4013      	ands	r3, r2
 80022f8:	6023      	str	r3, [r4, #0]
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	bcb0      	pop	{r4, r5, r7}
 8002302:	4770      	bx	lr
 8002304:	08003084 	.word	0x08003084
 8002308:	08003090 	.word	0x08003090

0800230c <LL_TIM_OC_EnablePreload>:
{
 800230c:	b4b0      	push	{r4, r5, r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d028      	beq.n	800236e <LL_TIM_OC_EnablePreload+0x62>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	2b04      	cmp	r3, #4
 8002320:	d023      	beq.n	800236a <LL_TIM_OC_EnablePreload+0x5e>
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	2b10      	cmp	r3, #16
 8002326:	d01e      	beq.n	8002366 <LL_TIM_OC_EnablePreload+0x5a>
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	2b40      	cmp	r3, #64	; 0x40
 800232c:	d019      	beq.n	8002362 <LL_TIM_OC_EnablePreload+0x56>
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002334:	d013      	beq.n	800235e <LL_TIM_OC_EnablePreload+0x52>
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800233c:	d00d      	beq.n	800235a <LL_TIM_OC_EnablePreload+0x4e>
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002344:	d007      	beq.n	8002356 <LL_TIM_OC_EnablePreload+0x4a>
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800234c:	d101      	bne.n	8002352 <LL_TIM_OC_EnablePreload+0x46>
 800234e:	2307      	movs	r3, #7
 8002350:	e00e      	b.n	8002370 <LL_TIM_OC_EnablePreload+0x64>
 8002352:	2308      	movs	r3, #8
 8002354:	e00c      	b.n	8002370 <LL_TIM_OC_EnablePreload+0x64>
 8002356:	2306      	movs	r3, #6
 8002358:	e00a      	b.n	8002370 <LL_TIM_OC_EnablePreload+0x64>
 800235a:	2305      	movs	r3, #5
 800235c:	e008      	b.n	8002370 <LL_TIM_OC_EnablePreload+0x64>
 800235e:	2304      	movs	r3, #4
 8002360:	e006      	b.n	8002370 <LL_TIM_OC_EnablePreload+0x64>
 8002362:	2303      	movs	r3, #3
 8002364:	e004      	b.n	8002370 <LL_TIM_OC_EnablePreload+0x64>
 8002366:	2302      	movs	r3, #2
 8002368:	e002      	b.n	8002370 <LL_TIM_OC_EnablePreload+0x64>
 800236a:	2301      	movs	r3, #1
 800236c:	e000      	b.n	8002370 <LL_TIM_OC_EnablePreload+0x64>
 800236e:	2300      	movs	r3, #0
 8002370:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	3318      	adds	r3, #24
 8002376:	461a      	mov	r2, r3
 8002378:	4629      	mov	r1, r5
 800237a:	4b09      	ldr	r3, [pc, #36]	; (80023a0 <LL_TIM_OC_EnablePreload+0x94>)
 800237c:	5c5b      	ldrb	r3, [r3, r1]
 800237e:	4413      	add	r3, r2
 8002380:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8002382:	6822      	ldr	r2, [r4, #0]
 8002384:	4629      	mov	r1, r5
 8002386:	4b07      	ldr	r3, [pc, #28]	; (80023a4 <LL_TIM_OC_EnablePreload+0x98>)
 8002388:	5c5b      	ldrb	r3, [r3, r1]
 800238a:	4619      	mov	r1, r3
 800238c:	2308      	movs	r3, #8
 800238e:	408b      	lsls	r3, r1
 8002390:	4313      	orrs	r3, r2
 8002392:	6023      	str	r3, [r4, #0]
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	bcb0      	pop	{r4, r5, r7}
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	08003084 	.word	0x08003084
 80023a4:	08003090 	.word	0x08003090

080023a8 <LL_TIM_SetClockSource>:
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80023ba:	f023 0307 	bic.w	r3, r3, #7
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	431a      	orrs	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	609a      	str	r2, [r3, #8]
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <LL_TIM_SetTriggerOutput>:
{
 80023d2:	b480      	push	{r7}
 80023d4:	b083      	sub	sp, #12
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
 80023da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	431a      	orrs	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	605a      	str	r2, [r3, #4]
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <LL_TIM_DisableMasterSlaveMode>:
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	609a      	str	r2, [r3, #8]
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b094      	sub	sp, #80	; 0x50
 800241c:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800241e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002422:	2200      	movs	r2, #0
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	605a      	str	r2, [r3, #4]
 8002428:	609a      	str	r2, [r3, #8]
 800242a:	60da      	str	r2, [r3, #12]
 800242c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800242e:	f107 031c 	add.w	r3, r7, #28
 8002432:	2220      	movs	r2, #32
 8002434:	2100      	movs	r1, #0
 8002436:	4618      	mov	r0, r3
 8002438:	f000 fd3e 	bl	8002eb8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800243c:	1d3b      	adds	r3, r7, #4
 800243e:	2200      	movs	r2, #0
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	605a      	str	r2, [r3, #4]
 8002444:	609a      	str	r2, [r3, #8]
 8002446:	60da      	str	r2, [r3, #12]
 8002448:	611a      	str	r2, [r3, #16]
 800244a:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 800244c:	2001      	movs	r0, #1
 800244e:	f7ff fee7 	bl	8002220 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002452:	f7ff fe47 	bl	80020e4 <NVIC_GetPriorityGrouping>
 8002456:	4603      	mov	r3, r0
 8002458:	2200      	movs	r2, #0
 800245a:	2100      	movs	r1, #0
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff fe93 	bl	8002188 <NVIC_EncodePriority>
 8002462:	4603      	mov	r3, r0
 8002464:	4619      	mov	r1, r3
 8002466:	201c      	movs	r0, #28
 8002468:	f7ff fe64 	bl	8002134 <NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 800246c:	201c      	movs	r0, #28
 800246e:	f7ff fe47 	bl	8002100 <NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 0;
 8002472:	2300      	movs	r3, #0
 8002474:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002476:	2300      	movs	r3, #0
 8002478:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 0;
 800247a:	2300      	movs	r3, #0
 800247c:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800247e:	2300      	movs	r3, #0
 8002480:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8002482:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002486:	4619      	mov	r1, r3
 8002488:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800248c:	f7fe fb26 	bl	8000adc <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8002490:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002494:	f7ff fedc 	bl	8002250 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002498:	2100      	movs	r1, #0
 800249a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800249e:	f7ff ff83 	bl	80023a8 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 80024a2:	2101      	movs	r1, #1
 80024a4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80024a8:	f7ff ff30 	bl	800230c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80024ac:	2360      	movs	r3, #96	; 0x60
 80024ae:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80024b0:	2300      	movs	r3, #0
 80024b2:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80024b4:	2300      	movs	r3, #0
 80024b6:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 80024b8:	2300      	movs	r3, #0
 80024ba:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80024bc:	2300      	movs	r3, #0
 80024be:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80024c0:	f107 031c 	add.w	r3, r7, #28
 80024c4:	461a      	mov	r2, r3
 80024c6:	2101      	movs	r1, #1
 80024c8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80024cc:	f7fe fb7a 	bl	8000bc4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 80024d0:	2101      	movs	r1, #1
 80024d2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80024d6:	f7ff fecb 	bl	8002270 <LL_TIM_OC_DisableFast>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 80024da:	2300      	movs	r3, #0
 80024dc:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80024de:	2300      	movs	r3, #0
 80024e0:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80024e2:	2300      	movs	r3, #0
 80024e4:	627b      	str	r3, [r7, #36]	; 0x24
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 80024e6:	f107 031c 	add.w	r3, r7, #28
 80024ea:	461a      	mov	r2, r3
 80024ec:	2110      	movs	r1, #16
 80024ee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80024f2:	f7fe fb67 	bl	8000bc4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH2);
 80024f6:	2110      	movs	r1, #16
 80024f8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80024fc:	f7ff feb8 	bl	8002270 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8002500:	2100      	movs	r1, #0
 8002502:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002506:	f7ff ff64 	bl	80023d2 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 800250a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800250e:	f7ff ff73 	bl	80023f8 <LL_TIM_DisableMasterSlaveMode>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002512:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002516:	f7ff fe6b 	bl	80021f0 <LL_AHB1_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 800251a:	2320      	movs	r3, #32
 800251c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800251e:	2302      	movs	r3, #2
 8002520:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002522:	2300      	movs	r3, #0
 8002524:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002526:	2300      	movs	r3, #0
 8002528:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800252a:	2300      	movs	r3, #0
 800252c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 800252e:	2301      	movs	r3, #1
 8002530:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002532:	1d3b      	adds	r3, r7, #4
 8002534:	4619      	mov	r1, r3
 8002536:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800253a:	f7fe f828 	bl	800058e <LL_GPIO_Init>

}
 800253e:	bf00      	nop
 8002540:	3750      	adds	r7, #80	; 0x50
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
	...

08002548 <NVIC_EnableIRQ>:
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	4603      	mov	r3, r0
 8002550:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002552:	79fb      	ldrb	r3, [r7, #7]
 8002554:	f003 021f 	and.w	r2, r3, #31
 8002558:	4907      	ldr	r1, [pc, #28]	; (8002578 <NVIC_EnableIRQ+0x30>)
 800255a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255e:	095b      	lsrs	r3, r3, #5
 8002560:	2001      	movs	r0, #1
 8002562:	fa00 f202 	lsl.w	r2, r0, r2
 8002566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800256a:	bf00      	nop
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	e000e100 	.word	0xe000e100

0800257c <NVIC_SetPriority>:
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	6039      	str	r1, [r7, #0]
 8002586:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258c:	2b00      	cmp	r3, #0
 800258e:	da0b      	bge.n	80025a8 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	b2da      	uxtb	r2, r3
 8002594:	490c      	ldr	r1, [pc, #48]	; (80025c8 <NVIC_SetPriority+0x4c>)
 8002596:	79fb      	ldrb	r3, [r7, #7]
 8002598:	f003 030f 	and.w	r3, r3, #15
 800259c:	3b04      	subs	r3, #4
 800259e:	0112      	lsls	r2, r2, #4
 80025a0:	b2d2      	uxtb	r2, r2
 80025a2:	440b      	add	r3, r1
 80025a4:	761a      	strb	r2, [r3, #24]
}
 80025a6:	e009      	b.n	80025bc <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	b2da      	uxtb	r2, r3
 80025ac:	4907      	ldr	r1, [pc, #28]	; (80025cc <NVIC_SetPriority+0x50>)
 80025ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b2:	0112      	lsls	r2, r2, #4
 80025b4:	b2d2      	uxtb	r2, r2
 80025b6:	440b      	add	r3, r1
 80025b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	e000ed00 	.word	0xe000ed00
 80025cc:	e000e100 	.word	0xe000e100

080025d0 <LL_DMA_EnableChannel>:
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	3b01      	subs	r3, #1
 80025de:	4a0b      	ldr	r2, [pc, #44]	; (800260c <LL_DMA_EnableChannel+0x3c>)
 80025e0:	5cd3      	ldrb	r3, [r2, r3]
 80025e2:	461a      	mov	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4413      	add	r3, r2
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	3a01      	subs	r2, #1
 80025ee:	4907      	ldr	r1, [pc, #28]	; (800260c <LL_DMA_EnableChannel+0x3c>)
 80025f0:	5c8a      	ldrb	r2, [r1, r2]
 80025f2:	4611      	mov	r1, r2
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	440a      	add	r2, r1
 80025f8:	f043 0301 	orr.w	r3, r3, #1
 80025fc:	6013      	str	r3, [r2, #0]
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	0800309c 	.word	0x0800309c

08002610 <LL_DMA_DisableChannel>:
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	3b01      	subs	r3, #1
 800261e:	4a0b      	ldr	r2, [pc, #44]	; (800264c <LL_DMA_DisableChannel+0x3c>)
 8002620:	5cd3      	ldrb	r3, [r2, r3]
 8002622:	461a      	mov	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4413      	add	r3, r2
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	3a01      	subs	r2, #1
 800262e:	4907      	ldr	r1, [pc, #28]	; (800264c <LL_DMA_DisableChannel+0x3c>)
 8002630:	5c8a      	ldrb	r2, [r1, r2]
 8002632:	4611      	mov	r1, r2
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	440a      	add	r2, r1
 8002638:	f023 0301 	bic.w	r3, r3, #1
 800263c:	6013      	str	r3, [r2, #0]
}
 800263e:	bf00      	nop
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	0800309c 	.word	0x0800309c

08002650 <LL_DMA_SetDataTransferDirection>:
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	3b01      	subs	r3, #1
 8002660:	4a0d      	ldr	r2, [pc, #52]	; (8002698 <LL_DMA_SetDataTransferDirection+0x48>)
 8002662:	5cd3      	ldrb	r3, [r2, r3]
 8002664:	461a      	mov	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	4413      	add	r3, r2
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002670:	f023 0310 	bic.w	r3, r3, #16
 8002674:	68ba      	ldr	r2, [r7, #8]
 8002676:	3a01      	subs	r2, #1
 8002678:	4907      	ldr	r1, [pc, #28]	; (8002698 <LL_DMA_SetDataTransferDirection+0x48>)
 800267a:	5c8a      	ldrb	r2, [r1, r2]
 800267c:	4611      	mov	r1, r2
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	440a      	add	r2, r1
 8002682:	4611      	mov	r1, r2
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	4313      	orrs	r3, r2
 8002688:	600b      	str	r3, [r1, #0]
}
 800268a:	bf00      	nop
 800268c:	3714      	adds	r7, #20
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	0800309c 	.word	0x0800309c

0800269c <LL_DMA_GetDataTransferDirection>:
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	3b01      	subs	r3, #1
 80026aa:	4a07      	ldr	r2, [pc, #28]	; (80026c8 <LL_DMA_GetDataTransferDirection+0x2c>)
 80026ac:	5cd3      	ldrb	r3, [r2, r3]
 80026ae:	461a      	mov	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4413      	add	r3, r2
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	f244 0310 	movw	r3, #16400	; 0x4010
 80026ba:	4013      	ands	r3, r2
}
 80026bc:	4618      	mov	r0, r3
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	0800309c 	.word	0x0800309c

080026cc <LL_DMA_SetMode>:
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	3b01      	subs	r3, #1
 80026dc:	4a0c      	ldr	r2, [pc, #48]	; (8002710 <LL_DMA_SetMode+0x44>)
 80026de:	5cd3      	ldrb	r3, [r2, r3]
 80026e0:	461a      	mov	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	4413      	add	r3, r2
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f023 0220 	bic.w	r2, r3, #32
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	4907      	ldr	r1, [pc, #28]	; (8002710 <LL_DMA_SetMode+0x44>)
 80026f2:	5ccb      	ldrb	r3, [r1, r3]
 80026f4:	4619      	mov	r1, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	440b      	add	r3, r1
 80026fa:	4619      	mov	r1, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4313      	orrs	r3, r2
 8002700:	600b      	str	r3, [r1, #0]
}
 8002702:	bf00      	nop
 8002704:	3714      	adds	r7, #20
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	0800309c 	.word	0x0800309c

08002714 <LL_DMA_SetPeriphIncMode>:
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	3b01      	subs	r3, #1
 8002724:	4a0c      	ldr	r2, [pc, #48]	; (8002758 <LL_DMA_SetPeriphIncMode+0x44>)
 8002726:	5cd3      	ldrb	r3, [r2, r3]
 8002728:	461a      	mov	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	4413      	add	r3, r2
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	3b01      	subs	r3, #1
 8002738:	4907      	ldr	r1, [pc, #28]	; (8002758 <LL_DMA_SetPeriphIncMode+0x44>)
 800273a:	5ccb      	ldrb	r3, [r1, r3]
 800273c:	4619      	mov	r1, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	440b      	add	r3, r1
 8002742:	4619      	mov	r1, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4313      	orrs	r3, r2
 8002748:	600b      	str	r3, [r1, #0]
}
 800274a:	bf00      	nop
 800274c:	3714      	adds	r7, #20
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	0800309c 	.word	0x0800309c

0800275c <LL_DMA_SetMemoryIncMode>:
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	3b01      	subs	r3, #1
 800276c:	4a0c      	ldr	r2, [pc, #48]	; (80027a0 <LL_DMA_SetMemoryIncMode+0x44>)
 800276e:	5cd3      	ldrb	r3, [r2, r3]
 8002770:	461a      	mov	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	4413      	add	r3, r2
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	3b01      	subs	r3, #1
 8002780:	4907      	ldr	r1, [pc, #28]	; (80027a0 <LL_DMA_SetMemoryIncMode+0x44>)
 8002782:	5ccb      	ldrb	r3, [r1, r3]
 8002784:	4619      	mov	r1, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	440b      	add	r3, r1
 800278a:	4619      	mov	r1, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4313      	orrs	r3, r2
 8002790:	600b      	str	r3, [r1, #0]
}
 8002792:	bf00      	nop
 8002794:	3714      	adds	r7, #20
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	0800309c 	.word	0x0800309c

080027a4 <LL_DMA_SetPeriphSize>:
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	3b01      	subs	r3, #1
 80027b4:	4a0c      	ldr	r2, [pc, #48]	; (80027e8 <LL_DMA_SetPeriphSize+0x44>)
 80027b6:	5cd3      	ldrb	r3, [r2, r3]
 80027b8:	461a      	mov	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	4413      	add	r3, r2
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	3b01      	subs	r3, #1
 80027c8:	4907      	ldr	r1, [pc, #28]	; (80027e8 <LL_DMA_SetPeriphSize+0x44>)
 80027ca:	5ccb      	ldrb	r3, [r1, r3]
 80027cc:	4619      	mov	r1, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	440b      	add	r3, r1
 80027d2:	4619      	mov	r1, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	600b      	str	r3, [r1, #0]
}
 80027da:	bf00      	nop
 80027dc:	3714      	adds	r7, #20
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	0800309c 	.word	0x0800309c

080027ec <LL_DMA_SetMemorySize>:
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	3b01      	subs	r3, #1
 80027fc:	4a0c      	ldr	r2, [pc, #48]	; (8002830 <LL_DMA_SetMemorySize+0x44>)
 80027fe:	5cd3      	ldrb	r3, [r2, r3]
 8002800:	461a      	mov	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	4413      	add	r3, r2
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	3b01      	subs	r3, #1
 8002810:	4907      	ldr	r1, [pc, #28]	; (8002830 <LL_DMA_SetMemorySize+0x44>)
 8002812:	5ccb      	ldrb	r3, [r1, r3]
 8002814:	4619      	mov	r1, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	440b      	add	r3, r1
 800281a:	4619      	mov	r1, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4313      	orrs	r3, r2
 8002820:	600b      	str	r3, [r1, #0]
}
 8002822:	bf00      	nop
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	0800309c 	.word	0x0800309c

08002834 <LL_DMA_SetChannelPriorityLevel>:
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	3b01      	subs	r3, #1
 8002844:	4a0c      	ldr	r2, [pc, #48]	; (8002878 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8002846:	5cd3      	ldrb	r3, [r2, r3]
 8002848:	461a      	mov	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	4413      	add	r3, r2
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	3b01      	subs	r3, #1
 8002858:	4907      	ldr	r1, [pc, #28]	; (8002878 <LL_DMA_SetChannelPriorityLevel+0x44>)
 800285a:	5ccb      	ldrb	r3, [r1, r3]
 800285c:	4619      	mov	r1, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	440b      	add	r3, r1
 8002862:	4619      	mov	r1, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4313      	orrs	r3, r2
 8002868:	600b      	str	r3, [r1, #0]
}
 800286a:	bf00      	nop
 800286c:	3714      	adds	r7, #20
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	0800309c 	.word	0x0800309c

0800287c <LL_DMA_SetDataLength>:
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	3b01      	subs	r3, #1
 800288c:	4a0c      	ldr	r2, [pc, #48]	; (80028c0 <LL_DMA_SetDataLength+0x44>)
 800288e:	5cd3      	ldrb	r3, [r2, r3]
 8002890:	461a      	mov	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	4413      	add	r3, r2
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	0c1b      	lsrs	r3, r3, #16
 800289a:	041b      	lsls	r3, r3, #16
 800289c:	68ba      	ldr	r2, [r7, #8]
 800289e:	3a01      	subs	r2, #1
 80028a0:	4907      	ldr	r1, [pc, #28]	; (80028c0 <LL_DMA_SetDataLength+0x44>)
 80028a2:	5c8a      	ldrb	r2, [r1, r2]
 80028a4:	4611      	mov	r1, r2
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	440a      	add	r2, r1
 80028aa:	4611      	mov	r1, r2
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	604b      	str	r3, [r1, #4]
}
 80028b2:	bf00      	nop
 80028b4:	3714      	adds	r7, #20
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	0800309c 	.word	0x0800309c

080028c4 <LL_DMA_GetDataLength>:
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	3b01      	subs	r3, #1
 80028d2:	4a06      	ldr	r2, [pc, #24]	; (80028ec <LL_DMA_GetDataLength+0x28>)
 80028d4:	5cd3      	ldrb	r3, [r2, r3]
 80028d6:	461a      	mov	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4413      	add	r3, r2
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	b29b      	uxth	r3, r3
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	0800309c 	.word	0x0800309c

080028f0 <LL_DMA_ConfigAddresses>:
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
 80028fc:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	2b10      	cmp	r3, #16
 8002902:	d114      	bne.n	800292e <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	3b01      	subs	r3, #1
 8002908:	4a16      	ldr	r2, [pc, #88]	; (8002964 <LL_DMA_ConfigAddresses+0x74>)
 800290a:	5cd3      	ldrb	r3, [r2, r3]
 800290c:	461a      	mov	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	4413      	add	r3, r2
 8002912:	461a      	mov	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	3b01      	subs	r3, #1
 800291c:	4a11      	ldr	r2, [pc, #68]	; (8002964 <LL_DMA_ConfigAddresses+0x74>)
 800291e:	5cd3      	ldrb	r3, [r2, r3]
 8002920:	461a      	mov	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	4413      	add	r3, r2
 8002926:	461a      	mov	r2, r3
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	6093      	str	r3, [r2, #8]
}
 800292c:	e013      	b.n	8002956 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	3b01      	subs	r3, #1
 8002932:	4a0c      	ldr	r2, [pc, #48]	; (8002964 <LL_DMA_ConfigAddresses+0x74>)
 8002934:	5cd3      	ldrb	r3, [r2, r3]
 8002936:	461a      	mov	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	4413      	add	r3, r2
 800293c:	461a      	mov	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	3b01      	subs	r3, #1
 8002946:	4a07      	ldr	r2, [pc, #28]	; (8002964 <LL_DMA_ConfigAddresses+0x74>)
 8002948:	5cd3      	ldrb	r3, [r2, r3]
 800294a:	461a      	mov	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	4413      	add	r3, r2
 8002950:	461a      	mov	r2, r3
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	60d3      	str	r3, [r2, #12]
}
 8002956:	bf00      	nop
 8002958:	3714      	adds	r7, #20
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	0800309c 	.word	0x0800309c

08002968 <LL_DMA_SetPeriphAddress>:
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	3b01      	subs	r3, #1
 8002978:	4a06      	ldr	r2, [pc, #24]	; (8002994 <LL_DMA_SetPeriphAddress+0x2c>)
 800297a:	5cd3      	ldrb	r3, [r2, r3]
 800297c:	461a      	mov	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	4413      	add	r3, r2
 8002982:	461a      	mov	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6093      	str	r3, [r2, #8]
}
 8002988:	bf00      	nop
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	0800309c 	.word	0x0800309c

08002998 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	3b01      	subs	r3, #1
 80029a6:	4a0b      	ldr	r2, [pc, #44]	; (80029d4 <LL_DMA_EnableIT_TE+0x3c>)
 80029a8:	5cd3      	ldrb	r3, [r2, r3]
 80029aa:	461a      	mov	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4413      	add	r3, r2
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	3a01      	subs	r2, #1
 80029b6:	4907      	ldr	r1, [pc, #28]	; (80029d4 <LL_DMA_EnableIT_TE+0x3c>)
 80029b8:	5c8a      	ldrb	r2, [r1, r2]
 80029ba:	4611      	mov	r1, r2
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	440a      	add	r2, r1
 80029c0:	f043 0308 	orr.w	r3, r3, #8
 80029c4:	6013      	str	r3, [r2, #0]
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	0800309c 	.word	0x0800309c

080029d8 <LL_AHB1_GRP1_EnableClock>:
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80029e0:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80029e2:	695a      	ldr	r2, [r3, #20]
 80029e4:	4907      	ldr	r1, [pc, #28]	; (8002a04 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80029ec:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80029ee:	695a      	ldr	r2, [r3, #20]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4013      	ands	r3, r2
 80029f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029f6:	68fb      	ldr	r3, [r7, #12]
}
 80029f8:	bf00      	nop
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	40021000 	.word	0x40021000

08002a08 <LL_APB1_GRP1_EnableClock>:
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002a10:	4b08      	ldr	r3, [pc, #32]	; (8002a34 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002a12:	69da      	ldr	r2, [r3, #28]
 8002a14:	4907      	ldr	r1, [pc, #28]	; (8002a34 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002a1c:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002a1e:	69da      	ldr	r2, [r3, #28]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4013      	ands	r3, r2
 8002a24:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a26:	68fb      	ldr	r3, [r7, #12]
}
 8002a28:	bf00      	nop
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	40021000 	.word	0x40021000

08002a38 <LL_USART_Enable>:
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f043 0201 	orr.w	r2, r3, #1
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	601a      	str	r2, [r3, #0]
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <LL_USART_ConfigAsyncMode>:
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	609a      	str	r2, [r3, #8]
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	609a      	str	r2, [r3, #8]
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	609a      	str	r2, [r3, #8]
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	609a      	str	r2, [r3, #8]
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx, uint32_t Direction)
{
 8002ae4:	b490      	push	{r4, r7}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  register uint32_t data_reg_addr = 0U;
 8002aee:	2400      	movs	r4, #0

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d103      	bne.n	8002afe <LL_USART_DMA_GetRegAddr+0x1a>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	3328      	adds	r3, #40	; 0x28
 8002afa:	461c      	mov	r4, r3
 8002afc:	e002      	b.n	8002b04 <LL_USART_DMA_GetRegAddr+0x20>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	3324      	adds	r3, #36	; 0x24
 8002b02:	461c      	mov	r4, r3
  }

  return data_reg_addr;
 8002b04:	4623      	mov	r3, r4
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc90      	pop	{r4, r7}
 8002b0e:	4770      	bx	lr

08002b10 <USART2_RegisterCallback>:
/* Declaration and initialization of callback function */
static void (* USART2_ProcessData)(uint8_t data) = 0;

/* Register callback */
void USART2_RegisterCallback(void *callback)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
	if(callback != 0)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d002      	beq.n	8002b24 <USART2_RegisterCallback+0x14>
	{
		USART2_ProcessData = callback;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a03      	ldr	r2, [pc, #12]	; (8002b30 <USART2_RegisterCallback+0x20>)
 8002b22:	6013      	str	r3, [r2, #0]
	}
}
 8002b24:	bf00      	nop
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	20000200 	.word	0x20000200

08002b34 <MX_USART2_UART_Init>:

uint8_t pos;

void MX_USART2_UART_Init(void)
{
 8002b34:	b5b0      	push	{r4, r5, r7, lr}
 8002b36:	b090      	sub	sp, #64	; 0x40
 8002b38:	af02      	add	r7, sp, #8
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002b3a:	f107 031c 	add.w	r3, r7, #28
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	605a      	str	r2, [r3, #4]
 8002b44:	609a      	str	r2, [r3, #8]
 8002b46:	60da      	str	r2, [r3, #12]
 8002b48:	611a      	str	r2, [r3, #16]
 8002b4a:	615a      	str	r2, [r3, #20]
 8002b4c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b4e:	1d3b      	adds	r3, r7, #4
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	605a      	str	r2, [r3, #4]
 8002b56:	609a      	str	r2, [r3, #8]
 8002b58:	60da      	str	r2, [r3, #12]
 8002b5a:	611a      	str	r2, [r3, #16]
 8002b5c:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8002b5e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002b62:	f7ff ff51 	bl	8002a08 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002b66:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002b6a:	f7ff ff35 	bl	80029d8 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 8002b6e:	f248 0304 	movw	r3, #32772	; 0x8004
 8002b72:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002b74:	2302      	movs	r3, #2
 8002b76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002b80:	2300      	movs	r3, #0
 8002b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002b84:	2307      	movs	r3, #7
 8002b86:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b88:	1d3b      	adds	r3, r7, #4
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b90:	f7fd fcfd 	bl	800058e <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_RX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002b94:	2200      	movs	r2, #0
 8002b96:	2106      	movs	r1, #6
 8002b98:	484f      	ldr	r0, [pc, #316]	; (8002cd8 <MX_USART2_UART_Init+0x1a4>)
 8002b9a:	f7ff fd59 	bl	8002650 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 8002b9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ba2:	2106      	movs	r1, #6
 8002ba4:	484c      	ldr	r0, [pc, #304]	; (8002cd8 <MX_USART2_UART_Init+0x1a4>)
 8002ba6:	f7ff fe45 	bl	8002834 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 8002baa:	2200      	movs	r2, #0
 8002bac:	2106      	movs	r1, #6
 8002bae:	484a      	ldr	r0, [pc, #296]	; (8002cd8 <MX_USART2_UART_Init+0x1a4>)
 8002bb0:	f7ff fd8c 	bl	80026cc <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	2106      	movs	r1, #6
 8002bb8:	4847      	ldr	r0, [pc, #284]	; (8002cd8 <MX_USART2_UART_Init+0x1a4>)
 8002bba:	f7ff fdab 	bl	8002714 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 8002bbe:	2280      	movs	r2, #128	; 0x80
 8002bc0:	2106      	movs	r1, #6
 8002bc2:	4845      	ldr	r0, [pc, #276]	; (8002cd8 <MX_USART2_UART_Init+0x1a4>)
 8002bc4:	f7ff fdca 	bl	800275c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8002bc8:	2200      	movs	r2, #0
 8002bca:	2106      	movs	r1, #6
 8002bcc:	4842      	ldr	r0, [pc, #264]	; (8002cd8 <MX_USART2_UART_Init+0x1a4>)
 8002bce:	f7ff fde9 	bl	80027a4 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	2106      	movs	r1, #6
 8002bd6:	4840      	ldr	r0, [pc, #256]	; (8002cd8 <MX_USART2_UART_Init+0x1a4>)
 8002bd8:	f7ff fe08 	bl	80027ec <LL_DMA_SetMemorySize>

  LL_DMA_ConfigAddresses(	DMA1, LL_DMA_CHANNEL_6,
 8002bdc:	2101      	movs	r1, #1
 8002bde:	483f      	ldr	r0, [pc, #252]	; (8002cdc <MX_USART2_UART_Init+0x1a8>)
 8002be0:	f7ff ff80 	bl	8002ae4 <LL_USART_DMA_GetRegAddr>
 8002be4:	4605      	mov	r5, r0
 8002be6:	4c3e      	ldr	r4, [pc, #248]	; (8002ce0 <MX_USART2_UART_Init+0x1ac>)
 8002be8:	2106      	movs	r1, #6
 8002bea:	483b      	ldr	r0, [pc, #236]	; (8002cd8 <MX_USART2_UART_Init+0x1a4>)
 8002bec:	f7ff fd56 	bl	800269c <LL_DMA_GetDataTransferDirection>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	9300      	str	r3, [sp, #0]
 8002bf4:	4623      	mov	r3, r4
 8002bf6:	462a      	mov	r2, r5
 8002bf8:	2106      	movs	r1, #6
 8002bfa:	4837      	ldr	r0, [pc, #220]	; (8002cd8 <MX_USART2_UART_Init+0x1a4>)
 8002bfc:	f7ff fe78 	bl	80028f0 <LL_DMA_ConfigAddresses>
  				  						 	LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
  				  							(uint32_t)bufferUSART2dma,
  				  							LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));

  				    LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 8002c00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c04:	2106      	movs	r1, #6
 8002c06:	4834      	ldr	r0, [pc, #208]	; (8002cd8 <MX_USART2_UART_Init+0x1a4>)
 8002c08:	f7ff fe38 	bl	800287c <LL_DMA_SetDataLength>
  				    LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 8002c0c:	2106      	movs	r1, #6
 8002c0e:	4832      	ldr	r0, [pc, #200]	; (8002cd8 <MX_USART2_UART_Init+0x1a4>)
 8002c10:	f7ff fcde 	bl	80025d0 <LL_DMA_EnableChannel>
  				    LL_USART_EnableDMAReq_RX(USART2);
 8002c14:	4831      	ldr	r0, [pc, #196]	; (8002cdc <MX_USART2_UART_Init+0x1a8>)
 8002c16:	f7ff ff45 	bl	8002aa4 <LL_USART_EnableDMAReq_RX>

  /* USART2_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8002c1a:	2210      	movs	r2, #16
 8002c1c:	2107      	movs	r1, #7
 8002c1e:	482e      	ldr	r0, [pc, #184]	; (8002cd8 <MX_USART2_UART_Init+0x1a4>)
 8002c20:	f7ff fd16 	bl	8002650 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 8002c24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c28:	2107      	movs	r1, #7
 8002c2a:	482b      	ldr	r0, [pc, #172]	; (8002cd8 <MX_USART2_UART_Init+0x1a4>)
 8002c2c:	f7ff fe02 	bl	8002834 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 8002c30:	2200      	movs	r2, #0
 8002c32:	2107      	movs	r1, #7
 8002c34:	4828      	ldr	r0, [pc, #160]	; (8002cd8 <MX_USART2_UART_Init+0x1a4>)
 8002c36:	f7ff fd49 	bl	80026cc <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	2107      	movs	r1, #7
 8002c3e:	4826      	ldr	r0, [pc, #152]	; (8002cd8 <MX_USART2_UART_Init+0x1a4>)
 8002c40:	f7ff fd68 	bl	8002714 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 8002c44:	2280      	movs	r2, #128	; 0x80
 8002c46:	2107      	movs	r1, #7
 8002c48:	4823      	ldr	r0, [pc, #140]	; (8002cd8 <MX_USART2_UART_Init+0x1a4>)
 8002c4a:	f7ff fd87 	bl	800275c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 8002c4e:	2200      	movs	r2, #0
 8002c50:	2107      	movs	r1, #7
 8002c52:	4821      	ldr	r0, [pc, #132]	; (8002cd8 <MX_USART2_UART_Init+0x1a4>)
 8002c54:	f7ff fda6 	bl	80027a4 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8002c58:	2200      	movs	r2, #0
 8002c5a:	2107      	movs	r1, #7
 8002c5c:	481e      	ldr	r0, [pc, #120]	; (8002cd8 <MX_USART2_UART_Init+0x1a4>)
 8002c5e:	f7ff fdc5 	bl	80027ec <LL_DMA_SetMemorySize>

  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
 8002c62:	2100      	movs	r1, #0
 8002c64:	481d      	ldr	r0, [pc, #116]	; (8002cdc <MX_USART2_UART_Init+0x1a8>)
 8002c66:	f7ff ff3d 	bl	8002ae4 <LL_USART_DMA_GetRegAddr>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	2107      	movs	r1, #7
 8002c70:	4819      	ldr	r0, [pc, #100]	; (8002cd8 <MX_USART2_UART_Init+0x1a4>)
 8002c72:	f7ff fe79 	bl	8002968 <LL_DMA_SetPeriphAddress>
  LL_USART_EnableDMAReq_TX(USART2);
 8002c76:	4819      	ldr	r0, [pc, #100]	; (8002cdc <MX_USART2_UART_Init+0x1a8>)
 8002c78:	f7ff ff24 	bl	8002ac4 <LL_USART_EnableDMAReq_TX>

  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 8002c7c:	2107      	movs	r1, #7
 8002c7e:	4816      	ldr	r0, [pc, #88]	; (8002cd8 <MX_USART2_UART_Init+0x1a4>)
 8002c80:	f7ff fe8a 	bl	8002998 <LL_DMA_EnableIT_TE>


  NVIC_SetPriority(USART2_IRQn, 0);
 8002c84:	2100      	movs	r1, #0
 8002c86:	2026      	movs	r0, #38	; 0x26
 8002c88:	f7ff fc78 	bl	800257c <NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8002c8c:	2026      	movs	r0, #38	; 0x26
 8002c8e:	f7ff fc5b 	bl	8002548 <NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 8002c92:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002c96:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002ca4:	230c      	movs	r3, #12
 8002ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002cac:	2300      	movs	r3, #0
 8002cae:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8002cb0:	f107 031c 	add.w	r3, r7, #28
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4809      	ldr	r0, [pc, #36]	; (8002cdc <MX_USART2_UART_Init+0x1a8>)
 8002cb8:	f7fe faf6 	bl	80012a8 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 8002cbc:	4807      	ldr	r0, [pc, #28]	; (8002cdc <MX_USART2_UART_Init+0x1a8>)
 8002cbe:	f7ff fee1 	bl	8002a84 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 8002cc2:	4806      	ldr	r0, [pc, #24]	; (8002cdc <MX_USART2_UART_Init+0x1a8>)
 8002cc4:	f7ff fec8 	bl	8002a58 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8002cc8:	4804      	ldr	r0, [pc, #16]	; (8002cdc <MX_USART2_UART_Init+0x1a8>)
 8002cca:	f7ff feb5 	bl	8002a38 <LL_USART_Enable>

}
 8002cce:	bf00      	nop
 8002cd0:	3738      	adds	r7, #56	; 0x38
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bdb0      	pop	{r4, r5, r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40020000 	.word	0x40020000
 8002cdc:	40004400 	.word	0x40004400
 8002ce0:	20000218 	.word	0x20000218

08002ce4 <USART2_CheckDmaReception>:

	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
}

void USART2_CheckDmaReception(void)
{
 8002ce4:	b5b0      	push	{r4, r5, r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af02      	add	r7, sp, #8
	if(USART2_ProcessData == 0) return;
 8002cea:	4b32      	ldr	r3, [pc, #200]	; (8002db4 <USART2_CheckDmaReception+0xd0>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d05c      	beq.n	8002dac <USART2_CheckDmaReception+0xc8>
	static uint8_t old_pos = 0;

		//memset(bufferUSART2dma, 0, strlen(bufferUSART2dma));	//vynuluje buff


		uint8_t num = LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6) % 256;	// 0 - 255
 8002cf2:	2106      	movs	r1, #6
 8002cf4:	4830      	ldr	r0, [pc, #192]	; (8002db8 <USART2_CheckDmaReception+0xd4>)
 8002cf6:	f7ff fde5 	bl	80028c4 <LL_DMA_GetDataLength>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	70fb      	strb	r3, [r7, #3]

		pos = DMA_USART2_BUFFER_SIZE-num;
 8002cfe:	78fb      	ldrb	r3, [r7, #3]
 8002d00:	425b      	negs	r3, r3
 8002d02:	b2da      	uxtb	r2, r3
 8002d04:	4b2d      	ldr	r3, [pc, #180]	; (8002dbc <USART2_CheckDmaReception+0xd8>)
 8002d06:	701a      	strb	r2, [r3, #0]

		for (int i = old_pos; i <= pos; i++)
 8002d08:	4b2d      	ldr	r3, [pc, #180]	; (8002dc0 <USART2_CheckDmaReception+0xdc>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	607b      	str	r3, [r7, #4]
 8002d0e:	e00a      	b.n	8002d26 <USART2_CheckDmaReception+0x42>
		{
		USART2_ProcessData(bufferUSART2dma[i]); // zavola funkciu v maine, pricom ukazuje na prvy znak novoprijaty
 8002d10:	4b28      	ldr	r3, [pc, #160]	; (8002db4 <USART2_CheckDmaReception+0xd0>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	492b      	ldr	r1, [pc, #172]	; (8002dc4 <USART2_CheckDmaReception+0xe0>)
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	440a      	add	r2, r1
 8002d1a:	7812      	ldrb	r2, [r2, #0]
 8002d1c:	4610      	mov	r0, r2
 8002d1e:	4798      	blx	r3
		for (int i = old_pos; i <= pos; i++)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3301      	adds	r3, #1
 8002d24:	607b      	str	r3, [r7, #4]
 8002d26:	4b25      	ldr	r3, [pc, #148]	; (8002dbc <USART2_CheckDmaReception+0xd8>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	ddee      	ble.n	8002d10 <USART2_CheckDmaReception+0x2c>
		}

		old_pos = pos;
 8002d32:	4b22      	ldr	r3, [pc, #136]	; (8002dbc <USART2_CheckDmaReception+0xd8>)
 8002d34:	781a      	ldrb	r2, [r3, #0]
 8002d36:	4b22      	ldr	r3, [pc, #136]	; (8002dc0 <USART2_CheckDmaReception+0xdc>)
 8002d38:	701a      	strb	r2, [r3, #0]

		if (num < 20 && num != 0)
 8002d3a:	78fb      	ldrb	r3, [r7, #3]
 8002d3c:	2b13      	cmp	r3, #19
 8002d3e:	d836      	bhi.n	8002dae <USART2_CheckDmaReception+0xca>
 8002d40:	78fb      	ldrb	r3, [r7, #3]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d033      	beq.n	8002dae <USART2_CheckDmaReception+0xca>
			{
				memset(bufferUSART2dma, 0, strlen(bufferUSART2dma));											//vynuluje buff
 8002d46:	481f      	ldr	r0, [pc, #124]	; (8002dc4 <USART2_CheckDmaReception+0xe0>)
 8002d48:	f7fd fa48 	bl	80001dc <strlen>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	461a      	mov	r2, r3
 8002d50:	2100      	movs	r1, #0
 8002d52:	481c      	ldr	r0, [pc, #112]	; (8002dc4 <USART2_CheckDmaReception+0xe0>)
 8002d54:	f000 f8b0 	bl	8002eb8 <memset>

				LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_6);													//NAŠA SPÁSA
 8002d58:	2106      	movs	r1, #6
 8002d5a:	4817      	ldr	r0, [pc, #92]	; (8002db8 <USART2_CheckDmaReception+0xd4>)
 8002d5c:	f7ff fc58 	bl	8002610 <LL_DMA_DisableChannel>
				LL_DMA_ConfigAddresses(	DMA1, LL_DMA_CHANNEL_6,
 8002d60:	2101      	movs	r1, #1
 8002d62:	4819      	ldr	r0, [pc, #100]	; (8002dc8 <USART2_CheckDmaReception+0xe4>)
 8002d64:	f7ff febe 	bl	8002ae4 <LL_USART_DMA_GetRegAddr>
 8002d68:	4605      	mov	r5, r0
 8002d6a:	4c16      	ldr	r4, [pc, #88]	; (8002dc4 <USART2_CheckDmaReception+0xe0>)
 8002d6c:	2106      	movs	r1, #6
 8002d6e:	4812      	ldr	r0, [pc, #72]	; (8002db8 <USART2_CheckDmaReception+0xd4>)
 8002d70:	f7ff fc94 	bl	800269c <LL_DMA_GetDataTransferDirection>
 8002d74:	4603      	mov	r3, r0
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	4623      	mov	r3, r4
 8002d7a:	462a      	mov	r2, r5
 8002d7c:	2106      	movs	r1, #6
 8002d7e:	480e      	ldr	r0, [pc, #56]	; (8002db8 <USART2_CheckDmaReception+0xd4>)
 8002d80:	f7ff fdb6 	bl	80028f0 <LL_DMA_ConfigAddresses>
				  						 	LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
				  							(uint32_t)bufferUSART2dma,
				  							LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));

				    LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 8002d84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d88:	2106      	movs	r1, #6
 8002d8a:	480b      	ldr	r0, [pc, #44]	; (8002db8 <USART2_CheckDmaReception+0xd4>)
 8002d8c:	f7ff fd76 	bl	800287c <LL_DMA_SetDataLength>
				    LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 8002d90:	2106      	movs	r1, #6
 8002d92:	4809      	ldr	r0, [pc, #36]	; (8002db8 <USART2_CheckDmaReception+0xd4>)
 8002d94:	f7ff fc1c 	bl	80025d0 <LL_DMA_EnableChannel>
				    LL_USART_EnableDMAReq_RX(USART2);
 8002d98:	480b      	ldr	r0, [pc, #44]	; (8002dc8 <USART2_CheckDmaReception+0xe4>)
 8002d9a:	f7ff fe83 	bl	8002aa4 <LL_USART_EnableDMAReq_RX>

			old_pos = 0;
 8002d9e:	4b08      	ldr	r3, [pc, #32]	; (8002dc0 <USART2_CheckDmaReception+0xdc>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	701a      	strb	r2, [r3, #0]
			pos = 0;
 8002da4:	4b05      	ldr	r3, [pc, #20]	; (8002dbc <USART2_CheckDmaReception+0xd8>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	701a      	strb	r2, [r3, #0]
 8002daa:	e000      	b.n	8002dae <USART2_CheckDmaReception+0xca>
	if(USART2_ProcessData == 0) return;
 8002dac:	bf00      	nop
			}
}
 8002dae:	3708      	adds	r7, #8
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bdb0      	pop	{r4, r5, r7, pc}
 8002db4:	20000200 	.word	0x20000200
 8002db8:	40020000 	.word	0x40020000
 8002dbc:	20000214 	.word	0x20000214
 8002dc0:	20000204 	.word	0x20000204
 8002dc4:	20000218 	.word	0x20000218
 8002dc8:	40004400 	.word	0x40004400

08002dcc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002dcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e04 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002dd0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002dd2:	e003      	b.n	8002ddc <LoopCopyDataInit>

08002dd4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002dd4:	4b0c      	ldr	r3, [pc, #48]	; (8002e08 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002dd6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002dd8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002dda:	3104      	adds	r1, #4

08002ddc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002ddc:	480b      	ldr	r0, [pc, #44]	; (8002e0c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002dde:	4b0c      	ldr	r3, [pc, #48]	; (8002e10 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002de0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002de2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002de4:	d3f6      	bcc.n	8002dd4 <CopyDataInit>
	ldr	r2, =_sbss
 8002de6:	4a0b      	ldr	r2, [pc, #44]	; (8002e14 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002de8:	e002      	b.n	8002df0 <LoopFillZerobss>

08002dea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002dea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002dec:	f842 3b04 	str.w	r3, [r2], #4

08002df0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002df0:	4b09      	ldr	r3, [pc, #36]	; (8002e18 <LoopForever+0x16>)
	cmp	r2, r3
 8002df2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002df4:	d3f9      	bcc.n	8002dea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002df6:	f7ff f92b 	bl	8002050 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dfa:	f000 f815 	bl	8002e28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002dfe:	f7fe fe9b 	bl	8001b38 <main>

08002e02 <LoopForever>:

LoopForever:
    b LoopForever
 8002e02:	e7fe      	b.n	8002e02 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002e04:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8002e08:	080031b8 	.word	0x080031b8
	ldr	r0, =_sdata
 8002e0c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002e10:	200001d4 	.word	0x200001d4
	ldr	r2, =_sbss
 8002e14:	200001d4 	.word	0x200001d4
	ldr	r3, = _ebss
 8002e18:	20000318 	.word	0x20000318

08002e1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e1c:	e7fe      	b.n	8002e1c <ADC1_2_IRQHandler>

08002e1e <atoi>:
 8002e1e:	220a      	movs	r2, #10
 8002e20:	2100      	movs	r1, #0
 8002e22:	f000 b8e7 	b.w	8002ff4 <strtol>
	...

08002e28 <__libc_init_array>:
 8002e28:	b570      	push	{r4, r5, r6, lr}
 8002e2a:	4e0d      	ldr	r6, [pc, #52]	; (8002e60 <__libc_init_array+0x38>)
 8002e2c:	4c0d      	ldr	r4, [pc, #52]	; (8002e64 <__libc_init_array+0x3c>)
 8002e2e:	1ba4      	subs	r4, r4, r6
 8002e30:	10a4      	asrs	r4, r4, #2
 8002e32:	2500      	movs	r5, #0
 8002e34:	42a5      	cmp	r5, r4
 8002e36:	d109      	bne.n	8002e4c <__libc_init_array+0x24>
 8002e38:	4e0b      	ldr	r6, [pc, #44]	; (8002e68 <__libc_init_array+0x40>)
 8002e3a:	4c0c      	ldr	r4, [pc, #48]	; (8002e6c <__libc_init_array+0x44>)
 8002e3c:	f000 f8fe 	bl	800303c <_init>
 8002e40:	1ba4      	subs	r4, r4, r6
 8002e42:	10a4      	asrs	r4, r4, #2
 8002e44:	2500      	movs	r5, #0
 8002e46:	42a5      	cmp	r5, r4
 8002e48:	d105      	bne.n	8002e56 <__libc_init_array+0x2e>
 8002e4a:	bd70      	pop	{r4, r5, r6, pc}
 8002e4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e50:	4798      	blx	r3
 8002e52:	3501      	adds	r5, #1
 8002e54:	e7ee      	b.n	8002e34 <__libc_init_array+0xc>
 8002e56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e5a:	4798      	blx	r3
 8002e5c:	3501      	adds	r5, #1
 8002e5e:	e7f2      	b.n	8002e46 <__libc_init_array+0x1e>
 8002e60:	080031b0 	.word	0x080031b0
 8002e64:	080031b0 	.word	0x080031b0
 8002e68:	080031b0 	.word	0x080031b0
 8002e6c:	080031b4 	.word	0x080031b4

08002e70 <__locale_ctype_ptr_l>:
 8002e70:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8002e74:	4770      	bx	lr
	...

08002e78 <__locale_ctype_ptr>:
 8002e78:	4b04      	ldr	r3, [pc, #16]	; (8002e8c <__locale_ctype_ptr+0x14>)
 8002e7a:	4a05      	ldr	r2, [pc, #20]	; (8002e90 <__locale_ctype_ptr+0x18>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	bf08      	it	eq
 8002e84:	4613      	moveq	r3, r2
 8002e86:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8002e8a:	4770      	bx	lr
 8002e8c:	20000004 	.word	0x20000004
 8002e90:	20000068 	.word	0x20000068

08002e94 <__ascii_mbtowc>:
 8002e94:	b082      	sub	sp, #8
 8002e96:	b901      	cbnz	r1, 8002e9a <__ascii_mbtowc+0x6>
 8002e98:	a901      	add	r1, sp, #4
 8002e9a:	b142      	cbz	r2, 8002eae <__ascii_mbtowc+0x1a>
 8002e9c:	b14b      	cbz	r3, 8002eb2 <__ascii_mbtowc+0x1e>
 8002e9e:	7813      	ldrb	r3, [r2, #0]
 8002ea0:	600b      	str	r3, [r1, #0]
 8002ea2:	7812      	ldrb	r2, [r2, #0]
 8002ea4:	1c10      	adds	r0, r2, #0
 8002ea6:	bf18      	it	ne
 8002ea8:	2001      	movne	r0, #1
 8002eaa:	b002      	add	sp, #8
 8002eac:	4770      	bx	lr
 8002eae:	4610      	mov	r0, r2
 8002eb0:	e7fb      	b.n	8002eaa <__ascii_mbtowc+0x16>
 8002eb2:	f06f 0001 	mvn.w	r0, #1
 8002eb6:	e7f8      	b.n	8002eaa <__ascii_mbtowc+0x16>

08002eb8 <memset>:
 8002eb8:	4402      	add	r2, r0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d100      	bne.n	8002ec2 <memset+0xa>
 8002ec0:	4770      	bx	lr
 8002ec2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ec6:	e7f9      	b.n	8002ebc <memset+0x4>

08002ec8 <strstr>:
 8002ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eca:	7803      	ldrb	r3, [r0, #0]
 8002ecc:	b17b      	cbz	r3, 8002eee <strstr+0x26>
 8002ece:	4604      	mov	r4, r0
 8002ed0:	7823      	ldrb	r3, [r4, #0]
 8002ed2:	4620      	mov	r0, r4
 8002ed4:	1c66      	adds	r6, r4, #1
 8002ed6:	b17b      	cbz	r3, 8002ef8 <strstr+0x30>
 8002ed8:	1e4a      	subs	r2, r1, #1
 8002eda:	1e63      	subs	r3, r4, #1
 8002edc:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8002ee0:	b14d      	cbz	r5, 8002ef6 <strstr+0x2e>
 8002ee2:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8002ee6:	42af      	cmp	r7, r5
 8002ee8:	4634      	mov	r4, r6
 8002eea:	d0f7      	beq.n	8002edc <strstr+0x14>
 8002eec:	e7f0      	b.n	8002ed0 <strstr+0x8>
 8002eee:	780b      	ldrb	r3, [r1, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	bf18      	it	ne
 8002ef4:	2000      	movne	r0, #0
 8002ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	e7fc      	b.n	8002ef6 <strstr+0x2e>

08002efc <_strtol_l.isra.0>:
 8002efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f00:	4680      	mov	r8, r0
 8002f02:	4689      	mov	r9, r1
 8002f04:	4692      	mov	sl, r2
 8002f06:	461e      	mov	r6, r3
 8002f08:	460f      	mov	r7, r1
 8002f0a:	463d      	mov	r5, r7
 8002f0c:	9808      	ldr	r0, [sp, #32]
 8002f0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002f12:	f7ff ffad 	bl	8002e70 <__locale_ctype_ptr_l>
 8002f16:	4420      	add	r0, r4
 8002f18:	7843      	ldrb	r3, [r0, #1]
 8002f1a:	f013 0308 	ands.w	r3, r3, #8
 8002f1e:	d132      	bne.n	8002f86 <_strtol_l.isra.0+0x8a>
 8002f20:	2c2d      	cmp	r4, #45	; 0x2d
 8002f22:	d132      	bne.n	8002f8a <_strtol_l.isra.0+0x8e>
 8002f24:	787c      	ldrb	r4, [r7, #1]
 8002f26:	1cbd      	adds	r5, r7, #2
 8002f28:	2201      	movs	r2, #1
 8002f2a:	2e00      	cmp	r6, #0
 8002f2c:	d05d      	beq.n	8002fea <_strtol_l.isra.0+0xee>
 8002f2e:	2e10      	cmp	r6, #16
 8002f30:	d109      	bne.n	8002f46 <_strtol_l.isra.0+0x4a>
 8002f32:	2c30      	cmp	r4, #48	; 0x30
 8002f34:	d107      	bne.n	8002f46 <_strtol_l.isra.0+0x4a>
 8002f36:	782b      	ldrb	r3, [r5, #0]
 8002f38:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8002f3c:	2b58      	cmp	r3, #88	; 0x58
 8002f3e:	d14f      	bne.n	8002fe0 <_strtol_l.isra.0+0xe4>
 8002f40:	786c      	ldrb	r4, [r5, #1]
 8002f42:	2610      	movs	r6, #16
 8002f44:	3502      	adds	r5, #2
 8002f46:	2a00      	cmp	r2, #0
 8002f48:	bf14      	ite	ne
 8002f4a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8002f4e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8002f52:	2700      	movs	r7, #0
 8002f54:	fbb1 fcf6 	udiv	ip, r1, r6
 8002f58:	4638      	mov	r0, r7
 8002f5a:	fb06 1e1c 	mls	lr, r6, ip, r1
 8002f5e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8002f62:	2b09      	cmp	r3, #9
 8002f64:	d817      	bhi.n	8002f96 <_strtol_l.isra.0+0x9a>
 8002f66:	461c      	mov	r4, r3
 8002f68:	42a6      	cmp	r6, r4
 8002f6a:	dd23      	ble.n	8002fb4 <_strtol_l.isra.0+0xb8>
 8002f6c:	1c7b      	adds	r3, r7, #1
 8002f6e:	d007      	beq.n	8002f80 <_strtol_l.isra.0+0x84>
 8002f70:	4584      	cmp	ip, r0
 8002f72:	d31c      	bcc.n	8002fae <_strtol_l.isra.0+0xb2>
 8002f74:	d101      	bne.n	8002f7a <_strtol_l.isra.0+0x7e>
 8002f76:	45a6      	cmp	lr, r4
 8002f78:	db19      	blt.n	8002fae <_strtol_l.isra.0+0xb2>
 8002f7a:	fb00 4006 	mla	r0, r0, r6, r4
 8002f7e:	2701      	movs	r7, #1
 8002f80:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002f84:	e7eb      	b.n	8002f5e <_strtol_l.isra.0+0x62>
 8002f86:	462f      	mov	r7, r5
 8002f88:	e7bf      	b.n	8002f0a <_strtol_l.isra.0+0xe>
 8002f8a:	2c2b      	cmp	r4, #43	; 0x2b
 8002f8c:	bf04      	itt	eq
 8002f8e:	1cbd      	addeq	r5, r7, #2
 8002f90:	787c      	ldrbeq	r4, [r7, #1]
 8002f92:	461a      	mov	r2, r3
 8002f94:	e7c9      	b.n	8002f2a <_strtol_l.isra.0+0x2e>
 8002f96:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8002f9a:	2b19      	cmp	r3, #25
 8002f9c:	d801      	bhi.n	8002fa2 <_strtol_l.isra.0+0xa6>
 8002f9e:	3c37      	subs	r4, #55	; 0x37
 8002fa0:	e7e2      	b.n	8002f68 <_strtol_l.isra.0+0x6c>
 8002fa2:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8002fa6:	2b19      	cmp	r3, #25
 8002fa8:	d804      	bhi.n	8002fb4 <_strtol_l.isra.0+0xb8>
 8002faa:	3c57      	subs	r4, #87	; 0x57
 8002fac:	e7dc      	b.n	8002f68 <_strtol_l.isra.0+0x6c>
 8002fae:	f04f 37ff 	mov.w	r7, #4294967295
 8002fb2:	e7e5      	b.n	8002f80 <_strtol_l.isra.0+0x84>
 8002fb4:	1c7b      	adds	r3, r7, #1
 8002fb6:	d108      	bne.n	8002fca <_strtol_l.isra.0+0xce>
 8002fb8:	2322      	movs	r3, #34	; 0x22
 8002fba:	f8c8 3000 	str.w	r3, [r8]
 8002fbe:	4608      	mov	r0, r1
 8002fc0:	f1ba 0f00 	cmp.w	sl, #0
 8002fc4:	d107      	bne.n	8002fd6 <_strtol_l.isra.0+0xda>
 8002fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fca:	b102      	cbz	r2, 8002fce <_strtol_l.isra.0+0xd2>
 8002fcc:	4240      	negs	r0, r0
 8002fce:	f1ba 0f00 	cmp.w	sl, #0
 8002fd2:	d0f8      	beq.n	8002fc6 <_strtol_l.isra.0+0xca>
 8002fd4:	b10f      	cbz	r7, 8002fda <_strtol_l.isra.0+0xde>
 8002fd6:	f105 39ff 	add.w	r9, r5, #4294967295
 8002fda:	f8ca 9000 	str.w	r9, [sl]
 8002fde:	e7f2      	b.n	8002fc6 <_strtol_l.isra.0+0xca>
 8002fe0:	2430      	movs	r4, #48	; 0x30
 8002fe2:	2e00      	cmp	r6, #0
 8002fe4:	d1af      	bne.n	8002f46 <_strtol_l.isra.0+0x4a>
 8002fe6:	2608      	movs	r6, #8
 8002fe8:	e7ad      	b.n	8002f46 <_strtol_l.isra.0+0x4a>
 8002fea:	2c30      	cmp	r4, #48	; 0x30
 8002fec:	d0a3      	beq.n	8002f36 <_strtol_l.isra.0+0x3a>
 8002fee:	260a      	movs	r6, #10
 8002ff0:	e7a9      	b.n	8002f46 <_strtol_l.isra.0+0x4a>
	...

08002ff4 <strtol>:
 8002ff4:	4b08      	ldr	r3, [pc, #32]	; (8003018 <strtol+0x24>)
 8002ff6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002ff8:	681c      	ldr	r4, [r3, #0]
 8002ffa:	4d08      	ldr	r5, [pc, #32]	; (800301c <strtol+0x28>)
 8002ffc:	6a23      	ldr	r3, [r4, #32]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	bf08      	it	eq
 8003002:	462b      	moveq	r3, r5
 8003004:	9300      	str	r3, [sp, #0]
 8003006:	4613      	mov	r3, r2
 8003008:	460a      	mov	r2, r1
 800300a:	4601      	mov	r1, r0
 800300c:	4620      	mov	r0, r4
 800300e:	f7ff ff75 	bl	8002efc <_strtol_l.isra.0>
 8003012:	b003      	add	sp, #12
 8003014:	bd30      	pop	{r4, r5, pc}
 8003016:	bf00      	nop
 8003018:	20000004 	.word	0x20000004
 800301c:	20000068 	.word	0x20000068

08003020 <__ascii_wctomb>:
 8003020:	b149      	cbz	r1, 8003036 <__ascii_wctomb+0x16>
 8003022:	2aff      	cmp	r2, #255	; 0xff
 8003024:	bf85      	ittet	hi
 8003026:	238a      	movhi	r3, #138	; 0x8a
 8003028:	6003      	strhi	r3, [r0, #0]
 800302a:	700a      	strbls	r2, [r1, #0]
 800302c:	f04f 30ff 	movhi.w	r0, #4294967295
 8003030:	bf98      	it	ls
 8003032:	2001      	movls	r0, #1
 8003034:	4770      	bx	lr
 8003036:	4608      	mov	r0, r1
 8003038:	4770      	bx	lr
	...

0800303c <_init>:
 800303c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800303e:	bf00      	nop
 8003040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003042:	bc08      	pop	{r3}
 8003044:	469e      	mov	lr, r3
 8003046:	4770      	bx	lr

08003048 <_fini>:
 8003048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800304a:	bf00      	nop
 800304c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800304e:	bc08      	pop	{r3}
 8003050:	469e      	mov	lr, r3
 8003052:	4770      	bx	lr
